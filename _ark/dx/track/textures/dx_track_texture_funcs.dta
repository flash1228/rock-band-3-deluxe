#define EXTERNAL_CUSTOM_TEX_PATH_FINDER
(
   #ifdef HX_PS3
   {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/custom_textures/" $path "/gen/" $customtex ".png_ps3"}
   #endif
   #ifdef HX_WII
   {sprint "SD:/custom_textures/" $path "/gen/" $customtex ".png_wii"}
   #endif
   #ifdef HX_XBOX
   {sprint "GAME:/custom_textures/" $path "/gen/" $customtex ".png_xbox"}
   #endif
)
#define EXTERNAL_CUSTOM_TEX_PATH
(
   #ifdef HX_PS3
   {$sourcetex set_bitmap {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/custom_textures/" $path "/" $customtex ".png"}}
   #endif
   #ifdef HX_WII
   {$sourcetex set_bitmap {sprint "SD:/custom_textures/" $path "/" $customtex ".png"}}
   #endif
   #ifdef HX_XBOX
   {$sourcetex set_bitmap {sprint "GAME:/custom_textures/" $path "/" $customtex ".png"}}
   #endif
)
#define INTERNAL_CUSTOM_TEX_PATH_FINDER
(
   {sprint "dx/custom_textures/" $path "/gen/" $customtex #ifdef HX_PS3 ".png_ps3" #endif #ifdef HX_WII ".png_wii" #endif #ifdef HX_XBOX ".png_xbox" #endif}
)
#define EXTERNAL_CUSTOM_TEX_PATH_FINDER_CATEGORY
(
   #ifdef HX_PS3
   {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/custom_textures/" $category "/" $path "/gen/" $customtex ".png_ps3"}
   #endif
   #ifdef HX_WII
   {sprint "GAME:/custom_textures/" $category "/" $path "/gen/" $customtex ".png_wii"}
   #endif
   #ifdef HX_XBOX
   {sprint "GAME:/custom_textures/" $category "/" $path "/gen/" $customtex ".png_xbox"}
   #endif
)
#define EXTERNAL_CUSTOM_TEX_PATH_CATEGORY
(
   
   #ifdef HX_PS3
   {$sourcetex set_bitmap {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/custom_textures/" $category "/" $path "/" $customtex ".png"}}
   #endif
   #ifdef HX_WII
   {$sourcetex set_bitmap {sprint "SD:/custom_textures/" $category "/" $path "/" $customtex ".png"}}
   #endif
   #ifdef HX_XBOX
   {$sourcetex set_bitmap {sprint "GAME:/custom_textures/" $category "/" $path "/" $customtex ".png"}}
   #endif
)
#define INTERNAL_CUSTOM_TEX_PATH_FINDER_CATEGORY
(
   {sprint "dx/custom_textures/" $category "/" $path "/gen/" $customtex #ifdef HX_PS3 ".png_ps3" #endif #ifdef HX_WII ".png_wii" #endif #ifdef HX_XBOX ".png_xbox" #endif}
)
{func
   color_me_milo
   {beatmatch foreach_active_player $player ;dx - add our custom fc checking callbacks to the currently loaded player
      {set_this {find_obj DX_GEMTRACKDIR}}
      {set $this_streak_tex {sprint "dx_overdrive" {$player instrument} ".tex"}}
      {new Tex $this_streak_tex}
      ;color-me-milo
      ;this fixes bass and guitar not using correct unique streak textures
      ;needs to be properly implemented TODOs
      {switch {$player instrument}
         (real_keys
            {peakstate_plane_prokeys.mat set color {pack_color $dx_overdrive_r $dx_overdrive_g $dx_overdrive_b}}
            {peakstate_plane_prokeys.mat set diffuse_tex $this_streak_tex}
            {$this_streak_tex set_bitmap "dx/custom_textures/streaks/fnfestival (prokeys).png"}
         )
         (bass
            {bassgroove_plane.mat set color {pack_color $dx_overdrive_r $dx_overdrive_g $dx_overdrive_b}}
            {bassgroove_plane.mat set diffuse_tex $this_streak_tex}
            {$this_streak_tex set_bitmap "dx/custom_textures/streaks/rb4alt_white.png"}
         )
         ((drum real_drum)
            {peakstate_plane.mat set color {pack_color $dx_overdrive_r $dx_overdrive_g $dx_overdrive_b}}
            {peakstate_plane.mat set diffuse_tex $this_streak_tex}
            {$this_streak_tex set_bitmap "dx/custom_textures/streaks/yarg white.png"}
         )
         (guitar
            {peakstate_plane.mat set color {pack_color $dx_overdrive_r $dx_overdrive_g $dx_overdrive_b}}
            {peakstate_plane.mat set diffuse_tex $this_streak_tex}
            {$this_streak_tex set_bitmap "dx/custom_textures/streaks/rb3_keys_white.png"}
         )
      }
   }
}

{func
   dx_custom_texture_setter
   ($category $path $sourcetex $customtex)
   ;{dx_log_writer insane {sprint "func: dx_custom_texture_setter" " - " $category ", " $path ", " $sourcetex ", " $customtex}}
   ;{dx_log_writer insane
   ;   {sprintf "Executed dx_custom_texture_setter - time: %.4fms"
         {time
            {search_replace $customtex "'" "" $customtex}
            {set $dx_failover_tex FALSE}
            {if {&& {exists beatmatch} $dx_customizer $dx_refresh_beatmatch}
               {set $dx_refresh_beatmatch FALSE}
               {beatmatch set_paused TRUE}
            }
            {unless
               #ifdef _SHIP
               {|| {! {find_exists $customtex}} {== $customtex none}} ;check the texture is not set to default
               #else
               {== $customtex none}
               #endif
               {dx_log_writer insane {sprint "Setting " $sourcetex " to: " $customtex}}
               {if_else $category
                  {if_else {file_exists EXTERNAL_CUSTOM_TEX_PATH_FINDER_CATEGORY}
                     EXTERNAL_CUSTOM_TEX_PATH_CATEGORY
                     {if_else {file_exists INTERNAL_CUSTOM_TEX_PATH_FINDER_CATEGORY}
                        {$sourcetex set_bitmap {sprint "dx/custom_textures/" $category "/" $path "/" $customtex ".png"}}
                        {set $dx_failover_tex TRUE}
                     }
                  }
                  {if_else {file_exists EXTERNAL_CUSTOM_TEX_PATH_FINDER}
                     EXTERNAL_CUSTOM_TEX_PATH
                     {if_else {file_exists INTERNAL_CUSTOM_TEX_PATH_FINDER}
                        {$sourcetex set_bitmap {sprint "dx/custom_textures/" $path "/" $customtex ".png"}}
                        {set $dx_failover_tex TRUE}
                     }
                  }
               }
               {if $dx_failover_tex
                  {if_else $category
                     {$sourcetex set_bitmap {sprint "dx/custom_textures/" $category "/" $path "/rock band 3.png"}}
                     {$sourcetex set_bitmap {sprint "dx/custom_textures/" $path "/rock band 3.png"}}
                  }
               }
               {if {&& {exists beatmatch} $dx_customizer}
                  {beatmatch set_paused FALSE}
               }
            }
         }
   ;   }
   ;}
}
{func
   color_me_milo_lite
   {dx_log_writer info {sprint "color_me_milo_lite"}}
   
   {user_mgr foreach_user $user
      {set $player {$user get_player}}
      {unless {== {$player instrument} vocals}
         {if_else
            {&&
               {eval {var {sprint "dx_remote_slot" {{$player get_user} get_slot_num} "_highway"}}} ; check if we received a remote texture
               {eval {var {sprint "dx_remote_slot" {{$player get_user} get_slot_num} "_streak"}}}
               {eval {var {sprint "dx_remote_slot" {{$player get_user} get_slot_num} "_overdrive"}}}
               {eval {var {sprint "dx_remote_slot" {{$player get_user} get_slot_num} "_rails"}}}
               {modifier_mgr is_modifier_active mod_remote_texture_sync} ; if user wants texture syncing
               {! {{$player get_user} is_local}} ; only change texture on remote players
            }
            ; apply online user's textures
            {do
               {set $current_highway {eval {var {sprint "dx_remote_slot" {{$player get_user} get_slot_num} "_highway"}}}}
               {set $current_streak {eval {var {sprint "dx_remote_slot" {{$player get_user} get_slot_num} "_streak"}}}}
               {set $current_overdrive {eval {var {sprint "dx_remote_slot" {{$player get_user} get_slot_num} "_overdrive"}}}}
               {set $current_rails {eval {var {sprint "dx_remote_slot" {{$player get_user} get_slot_num} "_rails"}}}}
            }
            ; apply local user's textures
            {do
               {set $instrument {if_else {== {$player instrument} real_drum} drum {$player instrument}}}
               {set $current_highway {eval {var {sprint "dx_highway_" $instrument}}}}
               {set $current_streak {eval {var {sprint "dx_streak_" $instrument}}}}
               {set $current_overdrive {eval {var {sprint "dx_overdrive_" $instrument}}}}
               {set $current_rails $dx_rails}
            }
         }

         {if ;don't run at all if using default theme and never had custom textures
            {||
               {eval {var {sprint "dx_tex_ran_once_slot" {{$player get_user} get_slot_num}}}}
               {! {== $current_highway none}}
               {! {== $current_streak none}}
               {! {== $current_overdrive none}}
               {! {== $current_rails none}}
               {&& $dx_song_key_var {modifier_mgr is_modifier_active mod_highlight_key} {== {$player instrument} real_keys}}
            }
            
            {set_var {sprint "dx_tex_ran_once_slot" {{$player get_user} get_slot_num}} TRUE}
            {set_this {find_obj DX_GEMTRACKDIR}}
            
            {set $this_highway_tex {sprint "dx_highway" {{$player get_user} get_slot_num} ".tex"}}
            {if {exists $this_highway_tex} {delete $this_highway_tex}}
            {new Tex $this_highway_tex}
            
            {set $this_streak_tex {sprint "dx_streak" {{$player get_user} get_slot_num} ".tex"}}
            {if {exists $this_streak_tex} {delete $this_streak_tex}}
            {new Tex $this_streak_tex}
   
            {set $this_overdrive_tex {sprint "dx_overdrive" {{$player get_user} get_slot_num} ".tex"}}
            {if {exists $this_overdrive_tex} {delete $this_overdrive_tex}}
            {new Tex $this_overdrive_tex}
            
            {set $this_rails_tex {sprint "dx_rails" {{$player get_user} get_slot_num} ".tex"}}
            {if {exists $this_rails_tex} {delete $this_rails_tex}}
            {new Tex $this_rails_tex}
            
            {set $this_rails_bracket_tex {sprint "dx_rails_bracket" {{$player get_user} get_slot_num} ".tex"}}
            {if {exists $this_rails_bracket_tex} {delete $this_rails_bracket_tex}}
            {new Tex $this_rails_bracket_tex}
            
            ;hacky way to restore default textures
            {if {== $current_highway none}
               {set $this_highway_tex
                  #ifndef HX_WII
                  {switch {$player instrument}
                     ((guitar real_guitar) watermark_bass.tex)
                     ((bass real_bass) watermark_guitar.tex)
                     ((drum real_drum) watermark_drum.tex)
                     (keys watermark_keys.tex)
                     (real_keys track_lanes_keyboard.tex)
                  }
                  #else
                  {if_else {== {$player instrument} real_keys}
                     track_lanes_keyboard.tex
                     watermark_bass.tex
                  }
                  #endif
               }
            }
            
            {if {== $current_streak none}
               {set $this_streak_tex
                  #ifndef HX_WII
                  {switch {$player instrument}
                     ((guitar real_guitar) spotlight_bass_track.tex)
                     ((bass real_bass) spotlight_bass_track.tex)
                     ((drum real_drum) spotlight_drums_track.tex)
                     (keys spotlight_keys_track.tex)
                     (real_keys spotlight_prokeys_track.tex)
                  }
                  #else
                  {if_else {== {$player instrument} real_keys}
                     spotlight_prokeys_track.tex
                     spotlight_bass_track.tex
                  }
                  #endif
               }
            }
            
            {if {== $current_overdrive none}
               {set $this_overdrive_tex
                  #ifndef HX_WII
                  {switch {$player instrument}
                     ((guitar real_guitar) spotlight_bass_track_emissive.tex)
                     ((bass real_bass) spotlight_guitar_track_emmissive.tex)
                     ((drum real_drum) spotlight_drums_track_emissive.tex)
                     (keys spotlight_keys_track_emissive.tex)
                     (real_keys spotlight_prokeys_track_emissive.tex)
                  }
                  #else
                  spotlight_bass_track_emissive.tex
                  #endif
               }
            }
            
            {if {== $current_rails none}
               {set $this_rails_tex
                  {switch {$player instrument}
                     ((guitar bass drum real_drum keys) rails.tex)
                     ((real_guitar real_bass) rails_rg.tex)
                     (real_keys rails_keyboard.tex)
                  }
               }
               {set $this_rails_bracket_tex smasher_plate_bracket.tex}
            }
            
            {track_rails_kb.mat set diffuse_tex $this_rails_tex}
            {rails.mat set diffuse_tex $this_rails_tex}
            {switch {$player instrument}
               (bass {{{{{get_track_panel} find gem_track_resources} find smasher_plate_bass} find smasher_plate_bracket.mat} set diffuse_tex $this_rails_bracket_tex})
               (guitar {{{{{get_track_panel} find gem_track_resources} find smasher_plate_guitar} find smasher_plate_bracket.mat} set diffuse_tex $this_rails_bracket_tex})
               (keys {{{{{get_track_panel} find gem_track_resources} find smasher_plate_keys} find smasher_plate_bracket.mat} set diffuse_tex $this_rails_bracket_tex})
            }
            {smasher_plate_bracket.mat set diffuse_tex $this_rails_bracket_tex}
            
            {unless {== $current_rails none}
               {dx_custom_texture_setter rails rails_track $this_rails_tex $current_rails}
               {dx_custom_texture_setter rails rails_bracket $this_rails_bracket_tex $current_rails}
               {$this_rails_bracket_tex iterate_refs $ref {$ref set alpha_cut TRUE}}
            }

            {if_else {== {$player instrument} real_keys}
               ;set textures on pro keys
               {do
                  {surface_keys.mat set diffuse_tex $this_highway_tex}
                  {overdrive_plane_prokeys.mat set color {pack_color $dx_overdrive_r $dx_overdrive_g $dx_overdrive_b}}
                  {peakstate_plane_prokeys.mat set diffuse_tex $this_streak_tex}
                  {overdrive_plane_prokeys.mat set diffuse_tex $this_overdrive_tex}
                  {$this_overdrive_tex iterate_refs $ref {$ref set intensify TRUE}}
                  {if_else {&& $dx_song_key_var {modifier_mgr is_modifier_active mod_highlight_key}}
                     {do
                        {set $key_map $dx_song_key_var}
                        ; if minor key, set highway to relative major
                        {if {has_substr {sprint $dx_song_key_var} _minor}
                           {set $key_map
                              {switch $dx_song_key_var
                                 (a_minor c_major)
                                 (a_sharp_minor c_sharp_major)
                                 (b_minor d_major)
                                 (c_minor d_sharp_major)
                                 (c_sharp_minor e_major)
                                 (d_minor f_major)
                                 (d_sharp_minor f_sharp_major)
                                 (e_minor g_major)
                                 (f_minor g_sharp_major)
                                 (f_sharp_minor a_major)
                                 (g_minor a_sharp_major)
                                 (g_sharp_minor b_major)
                              }
                           }
                        }
                        ; revert back to default keyboard textures to match
                        {if {! {|| {== $current_highway "rock band 3"} {== $current_highway none} $dx_last_song_has_tonic}}
                           {dx_custom_texture_setter keyboard keyboard_press track_lanes_keyboard_press.tex "rock band 3"}
                           {dx_custom_texture_setter keyboard keyboard_smasher gem_smasher_sharp_diffuse_nomip.tex "rock band 3"}
                           {dx_custom_texture_setter keyboard keyboard_mash_ems gem_mash_prokeys_ems.tex "rock band 3"}
                           {dx_custom_texture_setter keyboard keyboard_mash gem_mash_prokeys.tex "rock band 3"}
                        }
                        ; sets keyboard lanes depending on key of song
                        {$this_highway_tex set_bitmap {sprint "dx/custom_textures/_additional_textures/pk_song_key/" $key_map ".png"}}
                     }
                     {do
                        {if {== $current_highway none} {set $current_highway "rock band 3"}}
                        {dx_custom_texture_setter keyboard keyboard_lanes $this_highway_tex $current_highway}
                        {dx_custom_texture_setter keyboard keyboard_press track_lanes_keyboard_press.tex $current_highway}
                        {dx_custom_texture_setter keyboard keyboard_smasher gem_smasher_sharp_diffuse_nomip.tex $current_highway}
                        {dx_custom_texture_setter keyboard keyboard_mash_ems gem_mash_prokeys_ems.tex $current_highway}
                        {dx_custom_texture_setter keyboard keyboard_mash gem_mash_prokeys.tex $current_highway}
                     }
                  }
                  {dx_custom_texture_setter FALSE streaks $this_streak_tex $current_streak}
                  {dx_custom_texture_setter FALSE overdrive $this_overdrive_tex $current_overdrive}
               }
               ;set textures on guitar/bass/keys/drum
               {do
                  {unless {== $current_highway none} {dx_custom_texture_setter FALSE highways $this_highway_tex $current_highway}}
                  ;shading fixer
                  {do
                     ($inst {$player instrument})
                     ($shad
                        {switch $inst
                           ((bass real_bass) {eval $dx_highway_bass_shading})
                           ((guitar real_guitar) {eval $dx_highway_guitar_shading})
                           ((keys real_keys) {eval $dx_highway_keys_shading})
                           ((drum real_drum) {eval $dx_highway_drum_shading})
                        }
                     )
                     ($default
                        {||
                           {== $current_highway none}
                           {== $current_highway "rock band 3"}
                           {== $current_highway "_2_rb3_guitar"}
                           {== $current_highway "_rb3_bass"}
                           {== $current_highway "_rb3_drum"}
                           {== $current_highway "_rb3_keys"}
                        }
                     )
                     ($surf "surface.mat")
                     ($white_tex {new Tex})
                     ($white_bitmap {sprint "dx/custom_textures/_additional_textures/generic_white_box.png"})
                     ($tex {if_else $default $white_tex $this_highway_tex})
                     ($mult {if_else $shad 0.4 0.8}) ;vanilla mult for shading on this mat is 0.4
                     {if $default {$white_tex set_bitmap $white_bitmap}}

                     ;blank out (white!!!) diffuse if shading is on
                     {$surf set diffuse_tex $tex}

                     #ifndef HX_WII
                     ;always set emissive map!
                     {$surf set emissive_map $this_highway_tex}
                     {$surf set normal_map $tex}
                     {$surf set emissive_multiplier $mult}
                     #endif
                  }

                  {if_else {|| {== $inst bass} {== $inst real_bass}}
                     {bassgroove_plane.mat set diffuse_tex $this_streak_tex}
                     {peakstate_plane.mat set diffuse_tex $this_streak_tex}
                  }
                  {unless {== $current_streak none} {dx_custom_texture_setter FALSE streaks $this_streak_tex $current_streak}}

                  ;overdrive shading fixer
                  {do
                     ($inst {$player instrument})
                     ($shad
                        {switch $inst
                           ((bass real_bass) {eval $dx_overdrive_bass_shading})
                           ((guitar real_guitar) {eval $dx_overdrive_guitar_shading})
                           ((keys real_keys) {eval $dx_overdrive_keys_shading})
                           ((drum real_drum) {eval $dx_overdrive_drum_shading})
                        }
                     )
                     ($default
                        {||
                           {== $current_overdrive none}
                           {== $current_overdrive "rock band 3"}
                           {== $current_overdrive "_1_rb3_guitar"}
                           {== $current_overdrive "_rb3_bass"}
                           {== $current_overdrive "_rb3_drums"}
                           {== $current_overdrive "_rb3_keys"}
                           {== $current_overdrive "_rb3_prokeys"}
                        }
                     )
                     ($intense {if_else $default TRUE {! $shad}})
                     ($surf "overdrive_plane.mat")
                     ($tex {if_else {|| $default $shad} '' $this_overdrive_tex})
                  
                     {$surf set color {pack_color $dx_overdrive_r $dx_overdrive_g $dx_overdrive_b}}
                     {$surf set diffuse_tex $this_overdrive_tex}
                     {unless {== $current_overdrive none}
                        {dx_custom_texture_setter FALSE overdrive $this_overdrive_tex $current_overdrive}
                     }
                     {$surf set diffuse_tex $this_overdrive_tex}
                     #ifndef HX_WII
                     {$surf set emissive_map $tex}
                     {$surf set normal_map $tex}
                     {$surf set intensify $intense}
                     #endif
                  }
                  
               }
            }
         }
      }
   }
}
; function to tell remote players what texture(s) the local player has
{func
   dx_sync_remote_textures
   ($instrument $slot)
   {unless {== $instrument kTrackVocals}
      {do
         {dx_log_writer info {sprint "dx_sync_remote_textures slot" $slot}}
         {set_var {sprint "dx_remote_slot" $slot "_highway"} FALSE}
         {set_var {sprint "dx_remote_slot" $slot "_streak"} FALSE}
         {set_var {sprint "dx_remote_slot" $slot "_overdrive"} FALSE}
         {set_var {sprint "dx_remote_slot" $slot "_rails"} FALSE}
         {unless {session_mgr is_local}
            {dx_log_writer info {sprint "dx_sync_remote_textures: PREPPING TO SEND TEXTURES"}}
            {switch $instrument
               ((kTrackGuitar kTrackRealGuitar) {set $instrument guitar})
               ((kTrackBass kTrackRealBass) {set $instrument bass})
               (kTrackDrum {set $instrument drum})
               (kTrackKeys {set $instrument keys})
               (kTrackRealKeys {set $instrument real_keys})
               kDataUnhandled
            }
            {session send_msg_to_all
               {'`' 
                  (
                     {do
                        {dx_log_writer info {sprint "dx_sync_remote_textures: RECEIVED SLOT " {',' $slot} " TEXTURES"}}
                        {set_var {sprint "dx_remote_slot" {',' $slot} "_highway"} {',' {eval {var {sprint "dx_highway_" $instrument}}}}}
                        {set_var {sprint "dx_remote_slot" {',' $slot} "_streak"} {',' {eval {var {sprint "dx_streak_" $instrument}}}}}
                        {set_var {sprint "dx_remote_slot" {',' $slot} "_overdrive"} {',' {eval {var {sprint "dx_overdrive_" $instrument}}}}}
                        {set_var {sprint "dx_remote_slot" {',' $slot} "_rails"} {',' $dx_rails}}
                     }
                  )
                  kNetReliable
               }
            }
         }
      }
   }
}