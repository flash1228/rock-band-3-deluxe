#define DX_TRACK_TEXTURE_HANDLES
(
   (track_texture_reset_handler
      {dx_log_writer info {sprint "Setting up textures"}}
      {unless {|| {modifier_mgr is_modifier_active mod_nohud} {modifier_mgr is_modifier_active mod_fakejuke}} ;don't run anything if performance mode is enabled
         {do ;if we havent
            {if {exists beatmatch}
               {beatmatch foreach_active_player $player
                  {dx_ring_fc_enabler $player}
               }
            }
         }
         {dx_custom_texture_setter multiplier_ring multiplier_ring_fx_stripes fx_peak_stripes.tex $dx_multiplier_ring}
         {dx_custom_texture_setter multiplier_ring multiplier_ring_glow multiplier_meter_glow.tex $dx_multiplier_ring}
         {if {== $dx_multiplier_ring none} {set $dx_multiplier_ring 'rock band 3'}} ; ew
         {dx_custom_texture_setter multiplier_ring multiplier_ring_meter multiplier_meter.tex $dx_multiplier_ring}
         {if {== $dx_multiplier_ring 'rock band 3'} {set $dx_multiplier_ring none}}
         {dx_custom_texture_setter multiplier_ring multiplier_ring_bg streak_meter_bg.tex $dx_multiplier_ring}
         {dx_custom_texture_setter multiplier_ring multiplier_ring_bg_vox streak_meter_bg_vox.tex $dx_multiplier_ring}
         {dx_custom_texture_setter multiplier_ring multiplier_ring_lens streak_meter_lens.tex $dx_multiplier_ring}
         {dx_custom_texture_setter multiplier_ring multiplier_ring_lens_vox streak_meter_lens_vox.tex $dx_multiplier_ring}
         {dx_custom_texture_setter multiplier_ring multiplier_ring_plate streak_meter_plate.tex $dx_multiplier_ring}

         {if {modifier_mgr is_modifier_active mod_calibration}
            {dx_custom_texture_setter multiplier_ring multiplier_ring_meter multiplier_meter.tex calibration}
            {set $dx_multiplier_ring_needs_reset TRUE}
         }

         {if {modifier_mgr is_modifier_active mod_brutalmode}
            {dx_custom_texture_setter multiplier_ring multiplier_ring_meter multiplier_meter.tex brutal}
            {set $dx_multiplier_ring_needs_reset TRUE}
         }

         {if {modifier_mgr is_modifier_active mod_precision}
            {dx_custom_texture_setter multiplier_ring multiplier_ring_meter multiplier_meter.tex precision}
            {set $dx_multiplier_ring_needs_reset TRUE}
         }

         {if {modifier_mgr is_modifier_active mod_fastermode}
            {dx_custom_texture_setter multiplier_ring multiplier_ring_meter multiplier_meter.tex faster_mode}
            {set $dx_multiplier_ring_needs_reset TRUE}
         }

         {if {modifier_mgr is_modifier_active mod_chmode} ;if clone hero mode is currently enabled (must run last for watermark)
            {dx_custom_texture_setter multiplier_ring multiplier_ring_meter multiplier_meter.tex clone_hero}
            {set $dx_multiplier_ring_needs_reset TRUE}
         }

         {if {modifier_mgr is_modifier_active mod_auto_play} ;check if a new texture is queued
            {dx_custom_texture_setter multiplier_ring multiplier_ring_meter multiplier_meter.tex auto_play}
            {set $dx_multiplier_ring_needs_reset TRUE}
         }
         {if $dx_gem_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter gems gems_default prism_gems.tex $dx_gem}
            #ifndef HX_WII
            {dx_custom_texture_setter gems gems_hopo prism_gems_hopo.tex $dx_gem}
            {dx_custom_texture_setter gems gems_emissive_hopo prism_gem_emissive_hopo.tex $dx_gem}
            #endif
            {dx_custom_texture_setter gems gems_emissive prism_gem_emissive.tex $dx_gem}
            {dx_custom_texture_setter gems gems_emissive_dynamic prism_gem_emissive_dynamic.tex $dx_gem}
            {dx_custom_texture_setter gems gems_keys prism_gem_keyboard_style.tex $dx_gem}
            {dx_custom_texture_setter gems gems_cymbals gem_cymbal_diffuse.tex $dx_gem}
            {dx_custom_texture_setter gems gems_cymbals_emissive gem_cymbal_ems.tex $dx_gem}
            {dx_custom_texture_setter gems gems_gliss gliss_gems.tex $dx_gem}
         }
         {if $dx_smasher_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter strikeline strikeline_guitar gem_smashers_guitar_nomip.tex $dx_smasher}
            {dx_custom_texture_setter strikeline strikeline_guitar gem_smashers_guitar.tex $dx_smasher}
            {dx_custom_texture_setter strikeline strikeline_drums gem_smashers_drum_nomip.tex $dx_smasher}
            {dx_custom_texture_setter strikeline strikeline_drums gem_smashers_drum.tex $dx_smasher}
            {dx_custom_texture_setter strikeline strikeline_green square_smasher_bright_green.tex $dx_smasher}
            {dx_custom_texture_setter strikeline strikeline_red square_smasher_bright_red.tex $dx_smasher}
            {dx_custom_texture_setter strikeline strikeline_yellow square_smasher_bright_yellow.tex $dx_smasher}
            {dx_custom_texture_setter strikeline strikeline_blue square_smasher_bright_blue.tex $dx_smasher}
            {dx_custom_texture_setter strikeline strikeline_orange square_smasher_bright_orange.tex $dx_smasher}
            {unless {== $dx_smasher none} ;check the texture is not set to default
               {if_else {|| {!= $dx_smasher rb4v2} {!= $dx_smasher rb2}}
                  {do
                     {gem_smashers_guitar_nomip.tex iterate_refs $ref {$ref set prelit TRUE}}
                     {gem_smashers_guitar.tex iterate_refs $ref {$ref set prelit TRUE}}
                     {gem_smashers_drum_nomip.tex iterate_refs $ref {$ref set prelit TRUE}}
                     {gem_smashers_drum.tex iterate_refs $ref {$ref set prelit TRUE}}
                  }
                  {do
                     {gem_smashers_guitar_nomip.tex iterate_refs $ref {$ref set prelit FALSE}}
                     {gem_smashers_guitar.tex iterate_refs $ref {$ref set prelit FALSE}}
                     {gem_smashers_drum_nomip.tex iterate_refs $ref {$ref set prelit FALSE}}
                     {gem_smashers_drum.tex iterate_refs $ref {$ref set prelit FALSE}}
                  }
               }
            }
            {gem_smashers_guitar_nomip.tex iterate_refs $ref {$ref set alpha_cut TRUE}}
            {gem_smashers_guitar.tex iterate_refs $ref {$ref set alpha_cut TRUE}}
            {gem_smashers_drum_nomip.tex iterate_refs $ref {$ref set alpha_cut TRUE}}
            {gem_smashers_drum.tex iterate_refs $ref {$ref set alpha_cut TRUE}}
         }
         {if $dx_flares_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter flares flares_guitar_inner flare_gtr_inner.tex $dx_flares}
            {dx_custom_texture_setter flares flares_guitar_outer flare_gtr_outer.tex $dx_flares}
            {dx_custom_texture_setter flares flares_guitar_style flare_gtr_style.tex $dx_flares}
            {dx_custom_texture_setter flares flares_inner flare_inner.tex $dx_flares}
            {dx_custom_texture_setter flares flares_outer flare_outer.tex $dx_flares}
            {dx_custom_texture_setter flares flares_style flare_style.tex $dx_flares}
         }

         {if $dx_particles_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter particles particles_gem_cap gem_cap.tex $dx_particles}
            {dx_custom_texture_setter particles particles_glass1 broken_glass01.tex $dx_particles}
            {dx_custom_texture_setter particles particles_glass1_neg broken_glass01_neg.tex $dx_particles}
            {dx_custom_texture_setter particles particles_glass2 broken_glass02.tex $dx_particles}
            {dx_custom_texture_setter particles particles_shockwave radial_shockwave.tex $dx_particles}
            {dx_custom_texture_setter particles particles_smoke fx_smasher_smoke.tex $dx_particles}
            {dx_custom_texture_setter particles particles_spark spark.tex $dx_particles}
            {dx_custom_texture_setter particles particles_sparks_radial sparks_radial.tex $dx_particles}
            {dx_custom_texture_setter particles particles_sparks_vertical sparks_vertical.tex $dx_particles}
         }

         {if $dx_sustain_needs_reset
            {dx_custom_texture_setter FALSE sustains gem_tails.tex $dx_sustain}
         }

         {if $dx_lanes_needs_reset
            {dx_custom_texture_setter lanes gem_mash_green_emmisive gem_mash_green_emmisive.tex $dx_lanes}
            {dx_custom_texture_setter lanes gem_mash_red_emmisive gem_mash_red_emmisive.tex $dx_lanes}
            {dx_custom_texture_setter lanes gem_mash_yellow_emmisive gem_mash_yellow_emmisive.tex $dx_lanes}
            {dx_custom_texture_setter lanes gem_mash_blue_emmisive gem_mash_blue_emmisive.tex $dx_lanes}
            {dx_custom_texture_setter lanes gem_mash_orange_emmisive gem_mash_orange_emmisive.tex $dx_lanes}
         }

         {if $dx_score_box_needs_reset
            {dx_custom_texture_setter score scoreboard_frame scoreboard_frame.tex $dx_score_box}
            {dx_custom_texture_setter score scoreboard_lens scoreboard_lens.tex $dx_score_box}
            {dx_custom_texture_setter score star_multiplier_meter_frame star_multiplier_meter_frame.tex $dx_score_box}
            {dx_custom_texture_setter score star_multiplier_meter_lens star_multiplier_meter_lens.tex $dx_score_box}
         }
         
         #ifndef HX_WII
         {if $dx_font_needs_reset
            {dx_custom_texture_setter FALSE font 'Pentatonic_Hub(5_00)4x.tex' $dx_font}
         }
         #endif

         {if $dx_solo_box_needs_reset
            {dx_custom_texture_setter FALSE solo_box vox_slider_bkgrnd.tex $dx_solo_box}
         }

         {beatmatch foreach_active_player $player
            {unless {== {$player instrument} vocals}
               {cond
                  ({has_substr {sprint $dx_solo_box} "none"} {{{{find_obj DX_GEMTRACKDIR} find player_feedback} find tamb_Background.mesh} set_local_scale 2.64 2.64 2.64})
                  ({has_substr {sprint $dx_solo_box} "rb3"} {{{{find_obj DX_GEMTRACKDIR} find player_feedback} find tamb_Background.mesh} set_local_scale 2.64 2.64 2.64})
                  ({has_substr {sprint $dx_solo_box} "circular"} {{{{find_obj DX_GEMTRACKDIR} find player_feedback} find tamb_Background.mesh} set_local_scale 2.64 2.64 2.64})
                  ({has_substr {sprint $dx_solo_box} "yarg"} {{{{find_obj DX_GEMTRACKDIR} find player_feedback} find tamb_Background.mesh} set_local_scale 2.64 2.64 2.64})
                  (else {{{{find_obj DX_GEMTRACKDIR} find player_feedback} find tamb_Background.mesh} set_local_scale 3.5 3 4})
               }
            }
         }

         {if $dx_bre_needs_reset
            {dx_custom_texture_setter bre bre_shield bre_shield.tex $dx_bre}
            {dx_custom_texture_setter bre bre_black_wing bre_black_wing.tex $dx_bre}
            {dx_custom_texture_setter bre bre_blossom blossom.tex $dx_bre}
         }

         {if $dx_crowd_meter_needs_reset
            {dx_custom_texture_setter crowd_meter crowd_meter_frame crowd_meter_frame.tex $dx_crowd_meter}
            {dx_custom_texture_setter crowd_meter crowd_meter_lens crowd_meter_lens.tex $dx_crowd_meter}
         }

         {if {! {exists dx_star_base.tex}}
            {new Tex dx_star_base.tex}
         }
         {if {! {exists dx_star_gold_flash.tex}}
            {new Tex dx_star_gold_flash.tex}
         }
         
         {if $dx_stars_needs_reset
            ;crap workaround because this always needs to run
            {if {== $dx_stars none} {set $dx_stars 'rock band 3'}}
            {dx_custom_texture_setter stars score_star_frame dx_star_base.tex $dx_stars}
            {dx_custom_texture_setter stars score_star_frame score_star_frame.tex $dx_stars}
            {{coop_track_panel find dx_star_base.tex} iterate_refs $ref {$ref set diffuse_tex dx_star_base.tex}} ;apply the fc texture to the ring material
            {{coop_track_panel find score_star_frame.tex} iterate_refs $ref {$ref set diffuse_tex dx_star_base.tex}} ;apply the fc texture to the ring material
            {dx_custom_texture_setter stars score_star_gold_flash dx_star_gold_flash.tex $dx_stars}
            {if {== $dx_stars 'rock band 3'} {set $dx_stars none}}
         
         
            {dx_custom_texture_setter stars score_meter_wipe score_meter_wipe.tex $dx_stars}
            {dx_custom_texture_setter stars score_star_frame score_star_frame.tex $dx_stars}
            {if {exists dx_star_base.tex}
               {dx_custom_texture_setter stars score_star_frame dx_star_base.tex $dx_stars}
            }
            {if_else {modifier_mgr is_modifier_active mod_brutalmode}
               {if_else {|| {== $dx_stars rb3} {== $dx_stars none} {== $dx_stars 'rock band 3'}}
                  {dx_custom_texture_setter stars score_star_crimson score_star_gold.tex 'rock band 3'}
                  {dx_custom_texture_setter stars score_star_crimson score_star_gold.tex $dx_stars}
               }
               {dx_custom_texture_setter stars score_star_gold score_star_gold.tex $dx_stars}
            }
            {dx_custom_texture_setter stars score_tour_icon tour_icon.tex $dx_stars}
         }

         {if $dx_beat_lines_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter rails beat_lines beat_marker.tex $dx_beatlines}
         }

         {if $dx_overdrive_bar_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter overdrive_bar od_bar_sun_fx fx_rising_sun.tex $dx_overdrive_bar}
            {dx_custom_texture_setter overdrive_bar od_bar_background overdrive_meter_background_fill.tex $dx_overdrive_bar}
            {dx_custom_texture_setter overdrive_bar od_bar_glass overdrive_meter_glass.tex $dx_overdrive_bar}
            {dx_custom_texture_setter overdrive_bar od_bar_lens player_meter_long_lens.tex $dx_overdrive_bar}
            {dx_custom_texture_setter overdrive_bar od_bar_long player_meter_long.tex $dx_overdrive_bar}
         }

         {if $dx_vocal_highway_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter vocal_highway vocal_highway_bg vocals_bg_combined.tex $dx_vocal_highway}
            {dx_custom_texture_setter vocal_highway vocal_highway_no_tonic vocal_bg_notonic.tex $dx_vocal_highway}
            {dx_custom_texture_setter vocal_highway vocal_highway_bg_blue lyrics_bg_blue.tex $dx_vocal_highway}
            {dx_custom_texture_setter vocal_highway vocal_highway_bg_brown lyrics_bg_brown.tex $dx_vocal_highway}
            {dx_custom_texture_setter vocal_highway vocal_highway_now_bar vocal_now_bar.tex $dx_vocal_highway}
         }
               
         {if $dx_vocal_arrow_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter vocal_arrows vocal_arrow pitch_arrow_lead_c.tex $dx_vocal_arrow}
            {dx_custom_texture_setter vocal_arrows vocal_arrow_outline arrow_lead_outline.tex $dx_vocal_arrow}
         }

         {if $dx_vocal_notes_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter vocal_note vocal_note_tube vocal_tube_matrix.tex $dx_vocal_notes}
            {dx_custom_texture_setter vocal_note vocal_note_talkie talky_mask.tex $dx_vocal_notes}
            {dx_custom_texture_setter vocal_note vocal_note_tamb_gem vocal_tambourine_gem.tex $dx_vocal_notes}
            {dx_custom_texture_setter vocal_note vocal_note_off buttonoff.tex $dx_vocal_notes}
            {dx_custom_texture_setter vocal_note vocal_note_on buttonon.tex $dx_vocal_notes}
         }

         {if $dx_vocal_overdrive_needs_reset ;check if a new texture is queued
            {dx_custom_texture_setter vocal_overdrive vocal_overdrive_sunburst sunburst.tex $dx_vocal_overdrive}
            {dx_custom_texture_setter vocal_overdrive vocal_overdrive_now_bar VOX_now_bar_od.tex $dx_vocal_overdrive}
         }

         ;after all of the queued texture updates are completed, set them to false so they do not run again until a new texture is queued via overshell
         {set $dx_crowd_meter_needs_reset FALSE}
         {set $dx_multiplier_ring_needs_reset FALSE}
         {set $dx_overdrive_bar_needs_reset FALSE}
         {set $dx_rails_needs_reset FALSE}
         {set $dx_score_box_needs_reset FALSE}
         {set $dx_stars_needs_reset FALSE}
         {set $dx_font_needs_reset FALSE}
         {set $dx_solo_box_needs_reset FALSE}
         {set $dx_bre_needs_reset FALSE}
         {set $dx_flares_needs_reset FALSE}
         {set $dx_particles_needs_reset FALSE}
         {set $dx_smasher_needs_reset FALSE}
         {set $dx_gem_needs_reset FALSE}
         {set $dx_sustain_needs_reset FALSE}
         {set $dx_lanes_needs_reset FALSE}
         {set $dx_vocal_arrow_needs_reset FALSE}
         {set $dx_vocal_highway_needs_reset FALSE}
         {set $dx_vocal_notes_needs_reset FALSE}
         {set $dx_vocal_overdrive_needs_reset FALSE}
         {set $dx_animated_gem_needs_reset FALSE}
         {set $dx_texloadonce TRUE} ;indicates textures have been loaded this session

         {dx_log_writer default {sprint "Custom Track Textures Successfully Set - Gamemode: " $dx_gamemode}}
      }
   )
)