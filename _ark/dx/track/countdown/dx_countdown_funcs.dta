{func
   dx_countdown_var_reset
      {set $current_beat FALSE}
      {set $startingbpm FALSE}
      {set $dx_bpm_counter_for_countdown FALSE}
      {foreach $entry (guitar bass drum keys vocals harm real_guitar real_bass real_drum real_keys)
         {set_var {sprint "tracked_beat_no_notes_start_" $entry} FALSE}
         {set_var {sprint "tracked_beat_no_notes_end_" $entry} FALSE}
         {set_var {sprint "first_" $entry "_gem_tracked"} FALSE}
         {set_var {sprint "current_tracked_beat_" $entry} FALSE}
         {set_var {sprint "delay_tracked_" $entry} FALSE}
         {set_var {sprint "solo_box_up_" $entry} FALSE}
      }
}
{func
   dx_midi_parser_var_reset
   {resize $guitar_note_tracker 0} ;resize the array
   {push_back $guitar_note_tracker (none none)} ;push_back a new state into the array
   
   {resize $guitar_note_tracker_2 0} ;resize the array
   {set $guitar_last_note_time -1}

   {resize $drum_note_tracker 0} ;resize the array
   {push_back $drum_note_tracker (none none)} ;push_back a new state into the array

   {resize $drum_note_tracker_2 0} ;resize the array
   {set $drum_last_note_time -1}

   {resize $real_drum_note_tracker 0} ;resize the array
   {push_back $real_drum_note_tracker (none none)} ;push_back a new state into the array

   {resize $real_drum_note_tracker_2 0} ;resize the array
   {set $real_drum_last_note_time -1}

   {resize $bass_note_tracker 0} ;resize the array
   {push_back $bass_note_tracker (none none)} ;push_back a new state into the array

   {resize $bass_note_tracker_2 0} ;resize the array
   {set $bass_last_note_time -1}

   {resize $keys_note_tracker 0} ;resize the array
   {push_back $keys_note_tracker (none none)} ;push_back a new state into the array

   {resize $keys_note_tracker_2 0} ;resize the array
   {set $keys_last_note_time -1}

   {resize $vocals_note_tracker 0} ;resize the array
   {push_back $vocals_note_tracker (none none)} ;push_back a new state into the array
   
   {resize $harm_note_tracker 0} ;resize the array
   {push_back $harm_note_tracker (none none)} ;push_back a new state into the array

   {resize $real_guitar_note_tracker 0} ;resize the array
   {push_back $real_guitar_note_tracker (none none)} ;push_back a new state into the array
   
   {resize $real_guitar_note_tracker_2 0} ;resize the array
   {set $real_guitar_last_note_time -1}

   {resize $real_bass_note_tracker 0} ;resize the array
   {push_back $real_bass_note_tracker (none none)} ;push_back a new state into the array

   {resize $real_bass_note_tracker_2 0} ;resize the array
   {set $real_bass_last_note_time -1}

   {resize $real_keys_note_tracker 0} ;resize the array
   {push_back $real_keys_note_tracker (none none)} ;push_back a new state into the array

   {resize $real_keys_note_tracker_2 0} ;resize the array
   {set $real_keys_last_note_time -1}

   {set $dx_final_note 0}


}
{func
   dx_get_current_beat
   {int {+ 0.5 {seconds_to_beat {/ {beatmatch get_song_ms} 1000}}}}
}
{func
   dx_show_solo_box
   ($player $instrument)
   {if_else {|| {== $instrument vocals} {== $instrument harm}}
      {set_this {find_obj DX_VOCALDIR player_feedback}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
   }
   {if {! {$this in_solo}}
      {solo_start.trig trigger}
      {set_var {sprint "solo_box_up_" $instrument} TRUE}
   }
}
{func
   dx_restore_solo_box
   ($player $instrument)
   {dx_clean_solo_box $player $instrument}
   {set_var {sprint "solo_box_up_" $instrument} FALSE}
   {set_var {sprint "delay_tracked_" $instrument} FALSE}
   {set_var {sprint "current_tracked_beat_" $instrument} {+ {eval {var {sprint "current_tracked_beat_" $instrument}}} 1}}
}
{func
   dx_clean_solo_box
   ($player $instrument)
   {if_else {|| {== $instrument vocals} {== $instrument harm}}
      {set_this {find_obj DX_VOCALDIR player_feedback}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
   }
   {$this set_showing TRUE}
   {points.lbl set_token_fmt dx_points}
}
{func
   dx_hide_solo_box
   ($player $instrument)
   {if_else {|| {== $instrument vocals} {== $instrument harm}}
      {set_this {find_obj DX_VOCALDIR player_feedback}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
   }
   {if {! {$this in_solo}}
      {$this set_showing TRUE}
      {$this end_solo}
      {solo_end.trig trigger}
      {solo_percent.lbl set_token_fmt solo_countdown {localize_separated_int 2}}
      {solo_rating.lbl set_token_fmt get_ready}
      {score.lbl set_token_fmt os_blnk}
      {points.lbl set_token_fmt os_blnk}
   }
}
{func
   dx_final_percent_report
   ($player $instrument)
   {if {! {|| {== $instrument vocals} {== $instrument harm}}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
      {$this set_showing FALSE}
      {$this end_solo}
      {solo_end.trig trigger}
      {solo_percent.lbl set_token_fmt os_blnk}
      {solo_rating.lbl set_token_fmt os_blnk}
      {score.lbl set_token_fmt os_blnk}
      {points.lbl set_token_fmt os_blnk}
      {set_var {sprint "solo_box_up_" $instrument} FALSE}
   }
}
{func
   dx_handle_final_note_report
   ($player $instrument $gems_passed $gems_missed)
   {if {! {|| {== $instrument vocals} {== $instrument harm}}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
      {if_else {== {+ $gems_passed $gems_missed} 0}
         {solo_percent.lbl set_token_fmt full_combo_short}
         {if_else {== $gems_passed 0}
            {solo_percent.lbl set_token_fmt overstrums {localize_separated_int {int $gems_missed}}}
            {solo_percent.lbl set_token_fmt solo_countdown {localize_separated_int {int {- 0 $gems_passed}}}}
         }
      }
   }
}
{func
   dx_final_note_report
   ($player $instrument)
   {set_var {sprint $instrument "_finalnote"}
      {dx_handle_final_note_report
         $player
         $instrument
         {eval {var {sprint "num_gems_pass_" $instrument}}}
         {eval {var {sprint "num_gems_miss_" $instrument}}}
      }
   }
}
{func
   dx_solo_set_label
   ($player $instrument)
   {if_else {|| {== $instrument vocals} {== $instrument harm}}
      {set_this {find_obj DX_VOCALDIR player_feedback}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
   }
   {if {! {$this in_solo}}
      {solo_percent.lbl set_token_fmt solo_countdown {localize_separated_int {int {/ {- {eval {var {sprint "tracked_beat_no_notes_end_" $instrument}}} {dx_get_current_beat}} 4}}}}
   }
}
{func dx_hide_everything ($player $instrument)
   {if
      {&&
         {! $dx_customizer}
         {|| {gamemode in_mode qp_coop} {gamemode in_mode tour} {gamemode in_mode audition}}
         {||
            {&& {== $dx_hide_on_countdown single} {== $dx_num_gem_tracks 1}}
            {&& {== $dx_hide_on_countdown multi} {>= $dx_num_gem_tracks 1}}
         }
      }
      {script_task kTaskSeconds
         (delay 0.75)
         (script 
            {unless {|| {== $instrument vocals} {== $instrument harm}}
               ; bring track out when countdown begins
               ; unless statements prevent track from repeatedly popping out if it's already invisible
               {set_var {sprint "track_out_" {{$player get_user} get_slot_num}} TRUE}
               {set_this {find_obj DX_GEMTRACKDIR}}
               {track_out.trig trigger}
               {script_task kTaskSeconds
                  (delay 0.5) ; begin hiding track meshes 0.5 seconds after track_out animation begins while solo box is still visible
                  (script
                     ; bring track back in to keep solo box visible
                     {track_in.trig trigger}
                     ;turn on autoplay while track is hidden to block user inputs
                     {if {{$player get_user} is_local}
                        {if {! {modifier_mgr is_modifier_active mod_auto_play}}
                           {$player set_auto_play TRUE}
                        }
                     }
                     ; hide track meshes
                     {switch $instrument
                        ((guitar bass keys) {guitar_draw.grp set_showing FALSE})
                        ((drum real_drum) {drum_draw.grp set_showing FALSE})
                        (real_keys {keyboard_draw.grp set_showing FALSE})
                        kDataUnhandled
                     }
                     {{{$this get star_power_meter} find power_meter.grp} set_showing FALSE}
                     {{{$this get streak_meter} find draw.grp} set_showing FALSE}
                     {{{$this get streak_meter} find streak_meter.grp} set_showing FALSE}
                     {overdrive_plane.mesh set_showing FALSE}
                     {rig.grp set_local_pos 99 99 99}
                  )
               }
            }
         )
      }
   }
}
{func dx_restore_everything ($player $instrument)
   {if
      {&&
         {! $dx_customizer}
         {|| {gamemode in_mode qp_coop} {gamemode in_mode tour} {gamemode in_mode audition}}
         {||
            {&& {== $dx_hide_on_countdown single} {== $dx_num_gem_tracks 1}}
            {&& {== $dx_hide_on_countdown multi} {>= $dx_num_gem_tracks 1}}
         }
      }
      {unless {|| {== $instrument vocals} {== $instrument harm}}
         {set_var {sprint "track_out_" {{$player get_user} get_slot_num}} FALSE}
         {set_this {find_obj DX_GEMTRACKDIR}}
         ; remove "invisible" track from view while meshes are still hidden
         {track_out.trig trigger}
         {script_task kTaskSeconds
            ; begin restoring track meshes 0.5 seconds after track_out animation begins while solo box is still visible
            (delay 0.5)
            (script
               {track_in.trig trigger}
               ;disable autoplay to restore user inputs
               {if {{$player get_user} is_local}
                  {if {! {modifier_mgr is_modifier_active mod_auto_play}}
                     {$player set_auto_play FALSE}
                  }
               }
               {switch $instrument
                  ((guitar bass keys) {guitar_draw.grp set_showing TRUE})
                  (drum {drum_draw.grp set_showing TRUE})
                  (real_keys {keyboard_draw.grp set_showing TRUE})
                  kDataUnhandled
               }
               {{{$this get star_power_meter} find power_meter.grp} set_showing TRUE}
               {{{$this get streak_meter} find draw.grp} set_showing TRUE}
               {{{$this get streak_meter} find streak_meter.grp} set_showing TRUE}
               {overdrive_plane.mesh set_showing TRUE}
               {rig.grp set_local_pos 0 0 0}
            )
         }
      }
   }
}

#define ON_LEGACY_BEAT_FUNCS
(
   {dx_show_solo_box $player $instrument}
   {dx_solo_set_label $player $instrument}
   {dx_hide_everything $player $instrument}
)

{func dx_check_beat ($player $instrument $input) ; input = beats until player has to play again
   {if {>= $input 0}
      {if_else {|| {== $instrument vocals} {== $instrument harm}}
         {set_this {find_obj DX_VOCALDIR}}
         {set_this {find_obj DX_GEMTRACKDIR}}
      }
      ; Not a switch statement because I want to use the order of execution.
      {if {== {countdown.grp countdown_state} hidden}
         {countdown.grp set_countdown_state showing}
         {{countdown.grp get_fade_anim} animate (range 0 1) (period 0.4) (units kTaskUISeconds)}
         {{countdown.grp get_wipe_anim} animate (range 0 1) (period {- $input 8}) (units kTaskBeats)}
         {dx_hide_everything $player $instrument}
      }
      {if {== {countdown.grp countdown_state} showing}
         {countdown.grp set_timer_count {int {ceil {/ $input 4}}}}
         {if {<= $input 8}
            {countdown.grp set_countdown_state getready}
            {dx_restore_everything $player $instrument}
         }
      }
      {if {== {countdown.grp countdown_state} getready}
         {if {<= $input 6}
            {countdown.grp set_countdown_state fading}
            {{countdown.grp get_fade_anim} animate (range 1 0) (period 2) (units kTaskBeats)}
         }
      }
      {if {<= $input 0}
         {set_var {sprint "delay_tracked_" $instrument} FALSE}
         {set_var {sprint "current_tracked_beat_" $instrument} {+ {eval {var {sprint "current_tracked_beat_" $instrument}}} 1}}
         {countdown.grp set_countdown_state hidden}
      }
   }
}
