{func
   dx_track_bre_reset
   ;{dx_log_writer info {sprint "func: dx_track_bre_reset"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_track_bre_reset - time: %.4fms"
         {time
            {if {&& {modifier_mgr is_modifier_active mod_nobre} $imabigboy} ;check if we have no bre active, and we havent restarted already on this song
               {if {! $dx_already_restarted} ;cheap attempt to fix the "notes too quick bug" by restarting once automatically on initial song start, this will at least work in black bg
                  {do ;do
                     {set $imabigboy FALSE} ;tell the logic we have restarted once to switch to expert
                     {set $dx_already_restarted TRUE} ;also tell the logic we
                     {{{beatmatch active_player 0} get_user} set_difficulty kDifficultyExpert} ;since we have entered the track on easy, set the player to expert to enable no bre behavior
                     {game_restart} ;quick restart the song
                  }
               }
            }
         }
   ;   }
   ;}
}
; whether not to darken the highway of remote players
{func
   dx_dim_remote_players
   {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
      {unless {== {$player instrument} vocals}
         {set_this {find_obj DX_GEMTRACKDIR}}
         {if_else {{$player get_user} is_local}
            {network_local.trig trigger}
            {if_else $dx_dim_remote_players
               {network_remote.trig trigger}
               {network_local.trig trigger}
            }
         }
      }
   }
}
; each local player of a session will send their current instrument's track speed to online players
{func
   dx_apply_remote_track_speeds
   {unless {session_mgr is_local}
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {if {{$player get_user} is_local}
            {switch {$player instrument}
               (guitar
                  {set $remote_trackspeed_guitar FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_guitar {',' $trackspeed_guitar}}) kNetReliable}}
               )
               (bass
                  {set $remote_trackspeed_bass FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_bass {',' $trackspeed_bass}}) kNetReliable}}
               )
               (real_guitar
                  {set $remote_trackspeed_real_guitar FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_guitar {',' $trackspeed_real_guitar}}) kNetReliable}}
               )
               (real_bass
                  {set $remote_trackspeed_real_bass FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_bass {',' $trackspeed_real_bass}}) kNetReliable}}
               )
               ((drum real_drum)
                  {set $remote_trackspeed_drum FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_drum {',' $trackspeed_drum}}) kNetReliable}}
               )
               (keys
                  {set $remote_trackspeed_keys FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_keys {',' $trackspeed_keys}}) kNetReliable}}
               )
               (real_keys
                  {set $remote_trackspeed_real_keys FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_keys {',' $trackspeed_real_keys}}) kNetReliable}}
               )
               (vocals kDataUnhandled) ;lol vox
            }
         }
      }
   }
}
{func
   dx_track_configurer
   {if {&& {session is_in_game} $dx_track_config_changed}
      {beatmatch foreach_active_player $player
         {unless {== {$player instrument} vocals}
            {set_this {find_obj DX_GEMTRACKDIR}}
            {$this set_pitch $dx_pitch}
            {$this set_fov $dx_fov}
            {$this set_cam_pos $dx_x_pos $dx_y_pos $dx_z_pos}
         }
      }
   }
}
; used to unhide tracks incase the user quit the last song mid-countdown
{func
   dx_reset_track_meshes
   {set $track_out_0 FALSE}
   {set $track_out_1 FALSE}
   {set $track_out_2 FALSE}
   {set $track_out_3 FALSE}
   {beatmatch foreach_active_player $player
      {unless {== {$player instrument} vocals}
         ;make sure to show the correct rails if the same slot was on a different instrument last song
         {{{find_obj DX_GEMTRACKDIR} find guitar_draw.grp} set showing {|| {== {$player instrument} guitar} {== {$player instrument} bass} {== {$player instrument} keys}}}
         {{{find_obj DX_GEMTRACKDIR} find drum_draw.grp} set showing {|| {== {$player instrument} drum} {== {$player instrument} real_drum}}}
         {{{find_obj DX_GEMTRACKDIR} find keyboard_draw.grp} set showing {== {$player instrument} real_keys}}
         {{{{find_obj DX_GEMTRACKDIR} get star_power_meter} find power_meter.grp} set showing TRUE}
         {{{{find_obj DX_GEMTRACKDIR} get streak_meter} find draw.grp} set showing TRUE}
         {{{{find_obj DX_GEMTRACKDIR} get streak_meter} find streak_meter.grp} set showing TRUE}
         {{{{find_obj DX_GEMTRACKDIR} get streak_meter} find peak_state_sm_mesh.mesh} set showing TRUE}
         {{{{find_obj DX_GEMTRACKDIR} get streak_meter} find peak_state_sm_mesh_counter.mesh} set showing TRUE}
         {{{find_obj DX_GEMTRACKDIR} find overdrive_plane.mesh} set showing TRUE}
         {{{find_obj DX_GEMTRACKDIR} find rig.grp} set_local_pos 0 0 0}
      }
   }
}
{func dx_check_for_high_score
   ($enabled)
   {if $enabled
      {cond
         ($dx_reported_highscore kDataUnhandled) ;do nothing if highscore has been seen or no highscore
         ({|| {> $dx_num_active_instruments 1} {< $current_solo_highscore 10}} kDataUnhandled) ;do nothing if multiplayer or a low highscore
         ({gamemode in_mode qp_coop} ;only run in single player quickplay
            {beatmatch foreach_active_player $player
               {if {&& {{$player get_user} is_local} {> {$player score} $current_solo_highscore}}
                  {set $dx_reported_highscore TRUE}
                  {set_this {coop_track_panel find tracker_broadcast_display}}
                  {$this set_showing TRUE}
                  {band_message.lbl set_showing TRUE}
                  {band_message.lbl set markdown TRUE}
                  {band_message.lbl set alt_style_enabled TRUE}
                  {band_message.lbl set alt_font_resource_name instrument_icons_small}
                  {band_message.lbl set alt_z_offset 0.08}
                  {set $pickadisplay {random_int 0 4}}
                  {switch $pickadisplay
                     (1 {set $picked_display kTrackerChallengeType_Streak})
                     (2 {set $picked_display kTrackerChallengeType_Accuracy})
                     (3 {set $picked_display kTrackerChallengeType_Overdrive})
                     {set $picked_display kTrackerChallengeType_Streak}
                  }
                  {$this set_challenge_type $picked_display}
                  {$this set_display_type kBroadcastTrackerDisplay_BandMessage}
                  {$this show_brief_band_message {sprint {localize {sprint "inst_icon_" {$player instrument}}} {localize dx_highscore_best}}}
               }
            }
         )
         kDataUnhandled
      }
   }
}

{func dx_kick_callback
   {if {modifier_mgr is_modifier_active mod_kick_bounce}
      {beatmatch foreach_active_player $player
         {set_this {find_obj DX_GEMTRACKDIR}}
         {switch {$player instrument}
            ((drum real_drum)
               {kick_drummer.trig trigger}
            )
         }
      }
   }
}
{func dx_fix_kick_anim
   {beatmatch foreach_active_player $player
      {set_this {find_obj DX_GEMTRACKDIR}}
      {kick_success.tnm set_trans cameras_top.grp} ; Do this for everyone because the trackdir could be used for drums sooner or later
   }
}

{func dx_track_update_lengths
   {beatmatch foreach_active_player $player
      {set_this {find_obj DX_GEMTRACKDIR}}
      {switch {$player instrument}
         (guitar 
            {dx_track_set_length_mult $this {if_else {modifier_mgr is_modifier_active mod_brutalmode} 1 $tracklength_guitar}}
         )
         (bass 
            {dx_track_set_length_mult $this {if_else {modifier_mgr is_modifier_active mod_brutalmode} 1 $tracklength_bass}}
         )
         ((drum real_drum) 
            {dx_track_set_length_mult $this {if_else {modifier_mgr is_modifier_active mod_brutalmode} 1 $tracklength_drum}}
         )
         (keys
            {dx_track_set_length_mult $this {if_else {modifier_mgr is_modifier_active mod_brutalmode} 1 $tracklength_keys}}
         )
         (real_guitar
            {dx_track_set_length_mult $this {if_else {modifier_mgr is_modifier_active mod_brutalmode} 1 $tracklength_real_guitar}}
         )
         (real_bass 
            {dx_track_set_length_mult $this {if_else {modifier_mgr is_modifier_active mod_brutalmode} 1 $tracklength_real_bass}}
         )
         (real_keys
            {dx_track_set_length_mult $this {if_else {modifier_mgr is_modifier_active mod_brutalmode} 1 $tracklength_real_keys}}
         )
         (vocals kDataUnhandled)
      }
   }
}

{func dx_track_set_length_mult ($trackdir $mult)
   {set_this $trackdir}

   ; Delay the first set to avoid the track freaking out on first load
   {if_else {exists track_length_updated}
      {do
         {dx_log_writer insane {sprint "Updating track length for " $trackdir}}
         {set $sizeframe {track_size.anim frame}}

         ; Setting track length is a destructive operation so we backup the old track_size animation here
         {if_else {exists track_size_backup.anim}
            ; Restore vanilla parameters before making changes
            {do
               {dx_log_writer insane {sprint "Restoring anim object"}}
               {track_size.anim copy track_size_backup.anim kCopyDeep}
            }
            ; This is the first time this track has been altered, so parameters are vanilla; back them up
            {do
               {dx_log_writer insane {sprint "Making new anim object"}}
               {set $copied {new PropAnim track_size_backup.anim}}
               {$copied set_name "track_size_backup.anim" $this}
               {$copied copy track_size.anim kCopyDeep}
            }
         }

         ; It's easier to delete/recreate the extension meshes than to keep them updated
         ; Also means this function doesn't need to set instrument highway textures correctly, just copy the up to date mat
         {if {exists flat_curve_extended.mesh}
            {delete flat_curve_extended.mesh}
         }
         {if {exists overdrive_plane_extended.mesh}
            {overdrive.anim remove_keys overdrive_plane_extended.mesh}
            {delete overdrive_plane_extended.mesh}
         }
         {if {exists peakstate_plane_extended.mesh}
            {overdrive.amim remove_keys peakstate_plane_extended.mesh}
            {delete peakstate_plane_extended.mesh}
         }
         
         {if {!= $mult 1}

            ; Set a "fade anchor" at the strikeline, since the environ fade parameters are based off of distance from camera
            {dx_multiply_keyframes_anchor_track track_size.anim track.env (fade_start) $mult game.cam (position)}
            {dx_multiply_keyframes_anchor_track track_size.anim track.env (fade_end) $mult game.cam (position)}
            {dx_multiply_keyframes_anchor_track track_size.anim track_gems.env (fade_start) $mult game.cam (position)}
            {dx_multiply_keyframes_anchor_track track_size.anim track_gems.env (fade_end) $mult game.cam (position)}

            {if {> $mult 1}
               {dx_multiply_keyframes track_size.anim game.cam (far_plane) $mult}

               ; When using higher track lengths, the track meshes aren't long enough
               ; Duplicate the meshes and shift
               {if {> $mult 2}
                  {set $copied {new Mesh flat_curve_extended.mesh}}
                  {$copied set_name "flat_curve_extended.mesh" $this}
                  {$copied copy flat_curve.mesh kCopyShallow}
                  {stationary_back.grp add_object flat_curve_extended.mesh}
                  {flat_curve_extended.mesh set_local_pos 0 319.7348 0}

                  {set $copied {new Mesh peakstate_plane_extended.mesh}}
                  {$copied set_name "peakstate_plane_extended.mesh" $this}
                  {$copied copy peakstate_plane.mesh kCopyShallow}
                  {stationary_back.grp add_object peakstate_plane_extended.mesh}
                  {peakstate_plane_extended.mesh set showing TRUE}
                  {peakstate_plane_extended.mesh set_local_pos 0 319.7348 0.01}

                  {dx_transplant_keyframes overdrive.anim peakstate_plane.mesh peakstate_plane_extended.mesh}
                  {dx_transplant_keyframes peakstate_fade.anim peakstate_plane.mesh peakstate_plane_extended.mesh}
                  {dx_transplant_keyframes bassgroove.anim peakstate_plane.mesh peakstate_plane_extended.mesh}

                  {set $copied {new Mesh overdrive_plane_extended.mesh}}
                  {$copied set_name "overdrive_plane_extended.mesh" $this}
                  {$copied copy overdrive_plane.mesh kCopyShallow}
                  {stationary_back.grp add_object overdrive_plane_extended.mesh}
                  {overdrive_plane_extended.mesh set showing TRUE}
                  {overdrive_plane_extended.mesh set_local_pos 0 319.7348 0.02}

                  {dx_transplant_keyframes overdrive.anim overdrive_plane.mesh overdrive_plane_extended.mesh}
               }
            }
            {dx_multiply_keyframes track_size.anim $trackdir (top_y) $mult}

            ; Move the solo box/popups
            {track_size.anim foreach_keyframe player_feedback (position)
               $frame
               $value
               {set $z {elem $value 2}}
               ; Some simple math since the height doesn't change linearly (this is still inaccurate but it's good enough)
               {*= $z {/ {sqrt {* 1.5 {+ $mult 0.5}}} 1.5}}
               {set_elem $value 2 $z}
               {track_size.anim set_key_val player_feedback (position) $frame $value}
            }
         }
         {track_rails_guitar.mesh set_local_scale 1 $mult 1}
         {track_rails_drum.mesh set_local_scale 1 $mult 1}
         {track_rails_keyboard.mesh set_local_scale 1 $mult 1}
         {track_rails_proguitar.mesh set_local_scale 1 $mult 1}
         {guitar_rails_style_FX.mesh set_local_scale 1 {* $mult 1.35} 1} ; hmx didn't place this one at 0,0,0 for some ungodly reason
         {drum_slots_style_FX.mesh set_local_scale 1 $mult 1}
         {prokeys_rails_style_FX.mesh set_local_scale 1 $mult 1}

         ; Set the frame of the animation to force an update
         {track_size.anim set_frame $sizeframe}
      }
      {do
         {new Object track_length_updated}
         {script_task kTaskSeconds (delay 0.5)
            (script
               {dx_track_set_length_mult $trackdir $mult}
               {$trackdir set y_per_second {* {$trackdir get y_per_second} $mult}}
            )
         }
      }
   }
}

; Multiplies all of the keyframes in a PropAnim
{func dx_multiply_keyframes ($anim $target $prop $mult)
   {$anim foreach_keyframe $target
      $prop
      $frame
      $value
      {$anim replace_keyframe {* $value $mult}}
   }
}

; Multiplies keyframes, anchoring based off of an object's position
; Only used for track length fade multiplier
{func dx_multiply_keyframes_anchor_track ($anim $target $prop $mult $anchortarget $anchorprop)
   {$anim foreach_keyframe $target
      $prop
      $frame
      $value
      {set $anchor {$anim value_from_frame $anchortarget $anchorprop $frame}}
      {set $anchor {elem $anchor 1}}
      {*= $anchor -1}
      {$anim replace_keyframe {+ $anchor {* {- $value $anchor} $mult}}}
   }
}

; Duplicates all of the keyframes in a PropAnim targeting $basetarget as new keyframes targeting $newtarget
{func dx_transplant_keyframes ($anim $basetarget $newtarget)
   {$anim forall_keyframes $kf_target $kf_prop $kf_frame $kf_value
      {if {== $kf_target $basetarget}
         {dx_log_writer insane {sprint "Transplanting key (" $kf_prop ": " $kf_value ") into " $newtarget}}
         {$anim set_key_val $newtarget $kf_prop $kf_frame $kf_value}
      }
   }
}