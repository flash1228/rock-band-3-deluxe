; displays the streak of each individual instrument at the bottom of each track
{func
   dx_indv_note_streak
   ($enabled $player $slot $combo $passed $missed)
   {if {! {gamemode in_mode trainer}}
      {do
         ($label {sprint "dx_track_label_streak" $slot ".lbl"})
         ($color {sprint "dx_track_label_streak" $slot ".color"})
         ($counter {if_else $dx_track_streak_gh3_delay 24 0}) ;mimic's gh3 starting at 25 note streak
         {set_this {find_obj DX_GEMTRACKDIR band_power_meter}}
         {if_else {== {+ $missed $passed} 0} ;if on an fc
            {$color set color {pack_color $dx_gold_ui_r $dx_gold_ui_g $dx_gold_ui_b}} ;gold when FC
            {$color set color {pack_color $dx_track_streak_r $dx_track_streak_g $dx_track_streak_b}} ;user color when broken
         }
         {if_else {&& $enabled {> $combo $counter}} ;dynamic start show streak
            {$label set_token_fmt dx_indv_combo $combo} ;the note streak
            {$label set_token_fmt os_blnk} ;hide until threshold
         }
         {if {! $enabled} {$label set_token_fmt os_blnk}}
      }
   }
}

; counts total perfects next to perfect indicator
{func
   dx_perfect_hit_ctr
   ($enabled $player $slot $diag $count)
   {do
      ($label {sprint "dx_track_label_perfect_ctr" $slot ".lbl"})
      ($color {sprint "dx_track_label_perfect_ctr" $slot ".color"})
      {set_this {find_obj DX_GEMTRACKDIR band_power_meter}}
      {$label set italics 0.03} ;this one is special with italics, ooooooohhhhh
      {if_else $enabled ;we check enabled here to always store the count in the player object
         {$label set_token_fmt dx_indv_combo $count} ;reusing locale since it's just %i and I need just %i
         {$label set_token_fmt os_blnk} ;hide if disabled
      }
      {if_else $dx_detailed_hit_timing ;if we add on the extra timing char, we need to move the label slightly to account
         {$label set_local_pos_index 0 {- $dx_track_perfect_ctr_x 0.3}} ;move slightly to the left
         {$label set_local_pos_index 0 $dx_track_perfect_ctr_x} ;no timing, its fine
      }
      {$color set color
         {if_else $diag ;adjust color of counter to match perfect text in detailed hit mode
            {pack_color 0.42 1 1} ;cyan
            {pack_color $dx_gold_ui_r $dx_gold_ui_g $dx_gold_ui_b} ;gold
         }
      }
   }
}
; player note hit judgments
{func
   dx_perfect_hit
   ($enabled $instrument $player $slot $diag $timing $level)
   {if $enabled
      {do
         ($label dx_track_label_perfect.lbl)
         ($color dx_track_label_perfect.color)
         ($perfanim dx_track_label_perfect_perfect.anim)
         ($alphaanim dx_track_label_perfect_alpha.anim)
         {set_this {find_obj DX_GEMTRACKDIR band_power_meter}}
         {$label set italics 0.03} ;this one is special with italics, ooooooohhhhh
         {cond
            ({== $level hide} {$label set_token_fmt os_blnk}) ;force hide the perfect text if requested
            ({|| $diag {&& {! $diag} {== $level perfect}}} ;if all levels are showing or only perfect hits for perfect
               {switch $timing ;prep string for timing window
                  (early {set $this_time_str '-'}) ;if you arrive somewhere at a negative time, you are early right?
                  (late {set $this_time_str '+'})
               }
               {if_else $dx_detailed_hit_timing ;print strings
                  {$label set_token_fmt stringify {sprint $this_time_str {localize {sprint "judge_" $level}}}} ;add timing string
                  {$label set_token_fmt {sprint "judge_" $level}} ;only print level
               }
               ;set the color based off precision and mode
               {$color set color
                  {cond
                     ({== $level invalid} {pack_color 0.94 0.28 0.28}) ;red
                     ({! $diag} {pack_color $dx_gold_ui_r $dx_gold_ui_g $dx_gold_ui_b}) ;gold
                     ({== $level perfect} {pack_color 0.42 1 1}) ;cyan
                     ({== $level great} {pack_color 0.27 1 0.42}) ;green
                     ({== $level good} {pack_color 0.98 0.96 0.22}) ;yellow
                     ({== $level bad} {pack_color 0.94 0.28 0.28}) ;red
                  }
               }
               ;We no longer reset everything here and intead have the anim do it
               ;{$label set text_size $dx_track_perfect_size}
               ;{$label set alpha 1.0}
               ;{$label set_local_pos $dx_track_perfect_x -5 $dx_track_perfect_y}
               ;animate the label
               {dx_animate_perfect $player {== $level perfect} $level}
            )
         }
      }
   }
}

;gh style note streak text popups above the track
{func
   dx_note_streak_popup
   ($enabled $player $combo)
   {if {&& $enabled {! {gamemode in_mode trainer}}}
      {if {== {mod $combo {if_else {> $combo 50} 100 50}} 0} ;dynamically adjust streak interval
         {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
         {bass_super_streak.lbl set_token_fmt dx_note_streak $combo} ;prep label with combo
         {super_streak_start.trig trigger} ;show label (fancy anim)
         {dx_remove_groove_label $player} ;remove text popup trigger
      }
   }
}

;this is terrible but whatever
;it looks nice
{func
   dx_animate_perfect
   ($player $perfect $level)
   {set_this {find_obj DX_GEMTRACKDIR band_power_meter}}
   {do
      ($label dx_track_label_perfect.lbl)
      ($perfanim dx_track_label_perfect_perfect.anim)
      ($alphaanim dx_track_label_perfect_alpha.anim)
      ($time {if_else $perfect 0.29 0.28})
      {$perfanim set_frame 0}
      {if $perfect
         {$perfanim animate (range 0 1) (period $time) (units kTaskSeconds)}
      }
      {$alphaanim set_frame 0}
      {$alphaanim animate (range 0 1) (period $time) (units kTaskSeconds)}
   }
}

{func dx_perfect_label
   ($size $font $alignment $kerning $slot $x $y $r $g $b $reset)
   {do
      ($label dx_track_label_perfect.lbl)
      ($color dx_track_label_perfect.color)
      ($perfanim dx_track_label_perfect_perfect.anim)
      ($alphaanim dx_track_label_perfect_alpha.anim)
      {set_this {find_obj {{get_track_panel} loaded_dir} {sprint "track_" $slot} band_power_meter}} ;change context to the current checked player overdrive meter dir
      {if $reset ;if we need to destroy and rebuild this label
         {if {exists $label}
            {delete $label} {delete $perfanim} {delete $alphaanim} {delete $color}
         }
         {new BandLabel $label}
         {new PropAnim $perfanim}
         {new PropAnim $alphaanim}
         {new UIColor $color}
         {$perfanim add_keys $label (position) kPropVector3}
         {$perfanim add_keys $label (scale) kPropVector3}
         {$alphaanim add_keys $label (alpha) kPropFloat}
         ;set up default properties
         {$label set resource_name $font}
         {$label set color_override $color}
         {$label set_showing TRUE}
         {$label set_local_scale 1 1 1}
         {$label set_local_rot 0 0 0}
         {$label set width 500}
         {$label set height 500}
         {$label set_token_fmt os_blnk}
         {meters.grp add_object $label} ;tie it into the overdrive meter group
      }
      ;these properties are user controllable via overshell
      ;when configured in-game they do not destroy the label
      ;so we should run these when the func is called always
      {$label set alignment $alignment}
      {$label set text_size $size}
      {$label set kerning $kerning}
      {$label set color {pack_color $r $g $b}}
      {$label set_local_pos $x -5 $y} ;don't allow user configuration of Z space because it sucks
      ;force hide/show on selection
      {$label set_showing TRUE}

      {$perfanim set_key_val $label (position) 0 ($x -5 $y)}
      {$perfanim set_key_val $label (position) 1 ({- $x 0.27} -5 $y)}
      {$perfanim set_interp_type $label (position) kEaseOut}

      {$perfanim set_key_val $label (scale) 0 (1 1 1)}
      {$perfanim set_key_val $label (scale) 1 (1.1 1.1 1.1)}
      {$perfanim set_interp_type $label (scale) kEaseOut}

      {$alphaanim set_key_val $label (alpha) 0 1}
      {$alphaanim set_key_val $label (alpha) 1 0}
      {$alphaanim set_interp_type $label (alpha) kLinear}

   }
}

{func dx_track_label_streak
   ($name $size $font $alignment $kerning $slot $x $y $r $g $b $reset)
   {do
      ($label {sprint $name $slot ".lbl"})
      ($color {sprint $name $slot ".color"})
      {set_this {find_obj {{get_track_panel} loaded_dir} {sprint "track_" $slot} band_power_meter}} ;change context to the current checked player overdrive meter dir
      {if $reset ;if we need to destroy and rebuild this label
         {if {exists $label}
            {delete $label} {delete $color} ;destroy label
         }
         {new BandLabel $label} {new UIColor $color} ;rebuild label
         ;set up default properties
         {$label set resource_name $font}
         {$label set color_override $color}
         {$label set_showing TRUE}
         {$label set_local_scale 1 1 1}
         {$label set_local_rot 0 0 0}
         {$label set width 500}
         {$label set height 500}
         {$label set_token_fmt os_blnk}
         {meters.grp add_object $label} ;tie it into the overdrive meter group
      }
      ;these properties are user controllable via overshell
      ;when configured in-game they do not destroy the label
      ;so we should run these when the func is called always
      {$label set alignment $alignment}
      {$label set text_size $size}
      {$label set kerning $kerning}
      {$label set color {pack_color $r $g $b}}
      {$label set_local_pos $x -5 $y} ;don't allow user configuration of Z space because it sucks
      ;force hide/show on selection
      {$label set_showing $dx_track_streak}
   }
}