(Object
   (description
      "The Object class is the root of the class hierarchy. Every

        class has Object as a superclass."
   )
   (types
      (ParticleUI
         (editor
            (part_type
               symbol
               (list (Basic Fancy))
               (refresh basics)
            )
            (basics
               (indent
                  (mat
                     object
                     (class Mat)
                     (help "material for particle system")
                  )
                  (max_parts float (help "maximum number of particles"))
                  (emit_rate
                     (vector
                        (min float)
                        (max float)
                     )
                  )
                  (life
                     (vector
                        (min float)
                        (max float)
                     )
                  )
                  (speed
                     (vector
                        (min float)
                        (max float)
                     )
                  )
                  (start_size
                     (vector
                        (min float)
                        (max float)
                     )
                  )
                  (grow_ratio float (hide {!= [part_type] Fancy}))
                  (shrink_ratio float (hide {!= [part_type] Fancy}))
                  (delta_size
                     (vector
                        (min float)
                        (max float)
                     )
                  )
                  (force_dir
                     (vector
                        (x float)
                        (y float)
                        (z float)
                     )
                  )
                  (speed_drag float (hide {!= [part_type] Fancy}))
                  (bounce object (class Trans))
                  (start_color_1 color)
                  (start_color_1_alpha float)
                  (start_color_2 color)
                  (start_color_2_alpha float)
                  (mid_color_1 color (hide {!= [part_type] Fancy}))
                  (mid_color_1_alpha float (hide {!= [part_type] Fancy}))
                  (mid_color_2 color (hide {!= [part_type] Fancy}))
                  (mid_color_2_alpha float (hide {!= [part_type] Fancy}))
                  (end_color_1 color)
                  (end_color_1_alpha float)
                  (end_color_2 color)
                  (end_color_2_alpha float)
                  (mid_color_ratio float (hide {!= [part_type] Fancy}))
                  (preserve_parts bool)
                  (align
                     (indent
                        (with_velocity bool)
                        (stretch_with_speed bool)
                        (stretch_speed float)
                        (constant_area bool)
                        (perspective bool)
                     )
                     (hide {!= [part_type] Fancy})
                  )
                  (bursts
                     (indent
                        (burst_max int)
                        (time_between
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                        (peak_rate
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                        (duration
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                     )
                     (hide {!= [part_type] Fancy})
                  )
                  (do_spin
                     bool
                     (hide {!= [part_type] Fancy})
                     (refresh basics)
                  )
                  (spin
                     (indent
                        (rpm
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                        (rpm_drag float)
                        (start_offset
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                        (end_offset
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                     )
                     (hide {! [do_spin]})
                  )
                  (do_bubble
                     bool
                     (hide {!= [part_type] Fancy})
                     (refresh basics)
                  )
                  (bubble
                     (indent
                        (bubble_period
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                        (bubble_size
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                     )
                     (hide {! [do_bubble]})
                  )
               )
            )
            (emit
               (indent
                  (box_emitter
                     (indent
                        (mesh_emitter object (class RndMesh))
                        (extent_1
                           (vector
                              (x float)
                              (y float)
                              (z float)
                           )
                        )
                        (extend_2
                           (vector
                              (x float)
                              (y float)
                              (z float)
                           )
                        )
                        (pitch
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                        (yaw
                           (vector
                              (min float)
                              (max float)
                           )
                        )
                     )
                  )
                  (relative_parent object (class trans))
                  (relative_motion float)
                  (subsamples int)
                  (frame_drive bool)
                  (pre_spawn bool)
               )
            )
         )
         (part_type Basic)
         (mat)
         (max_parts 0)
         (emit_rate 0)
         (life 0)
         (speed 0)
         (start_size 0)
         (delta_size 0)
         (do_bubble 0)
         (bubble_period 0)
         (bubble_size 0)
         (force_dir 0)
         (bounce)
         (start_color_1 0)
         (start_color_2 0)
         (end_color_1 0)
         (end_color_2 0)
         (preserve_parts 0)
         (grow_ratio 0)
         (shrink_ratio 0)
         (mid_color_ratio 0)
         (mid_color_1 0)
         (mid_color_2 0)
         (do_spin 0)
         (rpm vector 0)
         (rpm_drag 0)
         (start_offset 0)
         (end_offset 0)
         (with_velocity 0)
         (stretch_with_speed 0)
         (stretch_speed 0)
         (constant_area 0)
         (perspective 0)
         (burst_max 0)
         (time_between 0)
         (peak_rate 0)
         (duration 0)
         (speed_drag 0)
         (mesh_emitter)
         (extent_1 0)
         (extend_2 0)
         (pitch 0)
         (yaw 0)
         (relative_parent)
         (relative_motion 0)
         (subsamples 0)
         (frame_drive 0)
         (pre_spawn 0)
         (start_color_1_alpha 0)
         (mid_color_1_alpha 0)
         (end_color_1_alpha 0)
         (start_color_2_alpha 0)
         (mid_color_2_alpha 0)
         (end_color_2_alpha 0)
      )
      (timeline
         (editor
            (events
               (array symbol (list {{$this dir} supported_events}))
               (post_sync {$this restart})
               (refresh current)
            )
            (current symbol (read_only 1))
            (fire
               script
               (script {$this fire})
               (refresh current)
            )
            (skip
               script
               (script {$this skip})
               (refresh current)
            )
            (reset
               script
               (script {$this reset})
               (refresh current)
            )
         )
         (current
            {if_else {size [events]}
               {elem [events] [current_index]}
               ''
            }
         )
         (current_index 0)
         (events ())
         (fire
            {handle
               ({$this dir}
                  {elem [events] [current_index]}
               )
            }
            {$this skip}
         )
         (skip
            {++ [current_index]}
            {if {>= [current_index] {size [events]}}
               {set [current_index] 0}
            }
         )
         (reset {set [current_index] 0})
      )
      (eye_dart_ruleset
         (editor
            (min_radius
               float
               (help "Dart locations will be at least this distance from target")
               (range 0.00 1000.00)
            )
            (max_radius
               float
               (help "Dart locations will be at most this distance from target")
               (range 0.00 1000.00)
            )
            (min_darts_per_sequence
               int
               (help
                  "Each sequence of darts will have at least this many locations before returning to target"
               )
               (range 0 50)
            )
            (max_darts_per_sequence
               int
               (help
                  "Each sequence of darts will have at most this many locations before returning to target"
               )
               (range 0 50)
            )
            (min_time_between_darts
               float
               (help
                  "In seconds, the minimum time between each dart in a sequence.  should be very small"
               )
               (range 0 2.00)
            )
            (max_time_between_darts
               float
               (help
                  "In seconds, the maximum time between each dart in a sequence.  should be very small"
               )
               (range 0 2.00)
            )
            (min_time_between_sequences
               float
               (help
                  "In seconds, the minimum time to wait to start another dart sequence after the previous one finishes"
               )
               (range 0 100.00)
            )
            (max_time_between_sequences
               float
               (help
                  "In seconds, the maximum time to wait to start another dart sequence after the previous one finishes"
               )
               (range 0 100.00)
            )
            (scale_with_distance
               bool
               (help
                  "Sets whether the dart radius scales with the distance to the character - meaning this dart sequence looks the same regardless of distance"
               )
            )
            (reference_distance
               float
               (help
                  "When scale_with_distance is true, this distance is used as a reference to scale up the radius."
               )
            )
         )
         (min_radius 0.50)
         (max_radius 3.00)
         (min_darts_per_sequence 2)
         (max_darts_per_sequence 5)
         (min_time_between_darts 0.25)
         (max_time_between_darts 0.65)
         (min_time_between_sequences 1.00)
         (max_time_between_sequences 2.00)
         (scale_with_distance 0)
         (reference_distance 70.00)
      )
      (vignette_hints
         (player0_hint)
         (player1_hint)
         (player2_hint)
         (player3_hint)
         (no_cleanup 1)
         (editor
            (player0_hint
               symbol
               (list
                  (
                     ("no particular importance or instrument, acts like importance")
                     (importance1 "most important or visible")
                     (importance2 "medium-high important or visible")
                     (importance3 "medium-high important or visible")
                     (importance4 "least important or visible")
                     (bass "playing the bass")
                     (drum "playing the drum")
                     (guitar "playing the guitar")
                     (keyboard "playing the keyboard")
                     (mic "playing the mic")
                     (customize "the player that selected going to the rock shop")
                     (slot "just match the slot, is low priority")
                  )
               )
               (help
                  "player0 hint, if player0 taps the mic, you set it to 'mic' to make player0 be the human (or ai) on mic.  importance1 is most important, and will get the human, in decreasing order to importance4, who will be the ai, if any"
               )
            )
            (player1_hint
               symbol
               (list
                  (
                     ("no particular importance or instrument, acts like importance")
                     (importance1 "most important or visible")
                     (importance2 "medium-high important or visible")
                     (importance3 "medium-high important or visible")
                     (importance4 "least important or visible")
                     (bass "playing the bass")
                     (drum "playing the drum")
                     (guitar "playing the guitar")
                     (keyboard "playing the keyboard")
                     (mic "playing the mic")
                     (customize "the player that selected going to the rock shop")
                     (slot "just match the slot, is low priority")
                  )
               )
               (help
                  "player1 hint, if player1 taps the mic, you set it to 'mic' to make player1 be the human (or ai) on mic.  importance1 is most important, and will get the human, in decreasing order to importance4, who will be the ai, if any"
               )
            )
            (player2_hint
               symbol
               (list
                  (
                     ("no particular importance or instrument, acts like importance")
                     (importance1 "most important or visible")
                     (importance2 "medium-high important or visible")
                     (importance3 "medium-high important or visible")
                     (importance4 "least important or visible")
                     (bass "playing the bass")
                     (drum "playing the drum")
                     (guitar "playing the guitar")
                     (keyboard "playing the keyboard")
                     (mic "playing the mic")
                     (customize "the player that selected going to the rock shop")
                     (slot "just match the slot, is low priority")
                  )
               )
               (help
                  "player2 hint, if player2 taps the mic, you set it to 'mic' to make player2 be the human (or ai) on mic.  importance1 is most important, and will get the human, in decreasing order to importance4, who will be the ai, if any"
               )
            )
            (player3_hint
               symbol
               (list
                  (
                     ("no particular importance or instrument, acts like importance")
                     (importance1 "most important or visible")
                     (importance2 "medium-high important or visible")
                     (importance3 "medium-high important or visible")
                     (importance4 "least important or visible")
                     (bass "playing the bass")
                     (drum "playing the drum")
                     (guitar "playing the guitar")
                     (keyboard "playing the keyboard")
                     (mic "playing the mic")
                     (customize "the player that selected going to the rock shop")
                     (slot "just match the slot, is low priority")
                  )
               )
               (help
                  "player3 hint, if player3 taps the mic, you set it to 'mic' to make player3 be the human (or ai) on mic.  importance1 is most important, and will get the human, in decreasing order to importance4, who will be the ai, if any"
               )
            )
         )
      )
      (track_configuration
         (editor
            (apply
               script
               (script {$this milo_apply})
               (help "apply this configuration")
            )
            (aspect symbol (list (regular widescreen)))
            (num_gem_tracks
               int
               (range 0 4)
               (help "the number of gem tracks in this configuration")
            )
            (track_positions
               (indent
                  (track_0_shift_frame
                     float
                     (post_sync {$this update 1})
                     (help "track 0's horizontal shift animation target frame")
                  )
                  (track_0_cam_rect_frame
                     float
                     (post_sync {$this update 1})
                     (help "track 0's horizontal camera rect animation target frame")
                  )
                  (track_1_shift_frame
                     float
                     (post_sync {$this update 1})
                     (help "track 1's horizontal shift animation target frame")
                  )
                  (track_1_cam_rect_frame
                     float
                     (post_sync {$this update 1})
                     (help "track 1's horizontal camera rect animation target frame")
                  )
                  (track_2_shift_frame
                     float
                     (post_sync {$this update 1})
                     (help "track 2's horizontal shift animation target frame")
                  )
                  (track_2_cam_rect_frame
                     float
                     (post_sync {$this update 1})
                     (help "track 2's horizontal camera rect animation target frame")
                  )
                  (track_3_shift_frame
                     float
                     (post_sync {$this update 1})
                     (help "track 3's horizontal shift animation target frame")
                  )
                  (track_3_cam_rect_frame
                     float
                     (post_sync {$this update 1})
                     (help "track 3's horizontal camera rect animation target frame")
                  )
               )
               (help
                  "target frames for the position animations of each track in this configuration"
               )
            )
            (save_objects
               script
               (script
                  {$this save_objects}
                  {milo update_open_editor $this}
               )
               (help "Saves the current object configuration")
            )
            (object_configuration
               (indent
                  (objects
                     (array
                        object
                        (class Trans)
                        (list {{$this dir} get configurable_objects})
                     )
                  )
                  (visibles (array bool))
                  (xfms (array float))
               )
               (read_only 1)
            )
         )
         (aspect regular)
         (num_gem_tracks 1)
         (track_0_shift_frame 0.00)
         (track_0_cam_rect_frame 0.00)
         (track_1_shift_frame 0.00)
         (track_1_cam_rect_frame 0.00)
         (track_2_shift_frame 0.00)
         (track_2_cam_rect_frame 0.00)
         (track_3_shift_frame 0.00)
         (track_3_cam_rect_frame 0.00)
         (objects ())
         (visibles ())
         (xfms ())
         (is_active {== {{$this dir} get configuration} $this})
         (calculate_track_screen_position_animation_frames
            ($track_slot)
            {switch [aspect]
               (regular {set $aspect_frame_offset 0})
               (widescreen {set $aspect_frame_offset 10})
            }
            {set $size_frame {+ $aspect_frame_offset [num_gem_tracks]}}
            {switch $track_slot
               (0
                  {set $shift_frame [track_0_shift_frame]}
                  {set $cam_rect_frame [track_0_cam_rect_frame]}
               )
               (1
                  {set $shift_frame [track_1_shift_frame]}
                  {set $cam_rect_frame [track_1_cam_rect_frame]}
               )
               (2
                  {set $shift_frame [track_2_shift_frame]}
                  {set $cam_rect_frame [track_2_cam_rect_frame]}
               )
               (3
                  {set $shift_frame [track_3_shift_frame]}
                  {set $cam_rect_frame [track_3_cam_rect_frame]}
               )
            }
            {set $shift_frame {+ $shift_frame $aspect_frame_offset}}
            {set $cam_rect_frame {+ $cam_rect_frame $aspect_frame_offset}}
            ($size_frame $shift_frame $cam_rect_frame)
         )
         (update
            ($animate)
            {if {$this is_active}
               {set $track_slot 0}
               {foreach_int $idx 0 {{$this dir} gem_tracks_size}
                  {set $obj {{$this dir} get_gem_track $idx}}
                  {if_else {$obj get in_use}
                     {do
                        ($play_anim {&& $animate {== [aspect] {$obj get screen_aspect}}})
                        {$obj set screen_aspect [aspect]}
                        {if
                           {&&
                              {! {$obj get track_extended}}
                              {< {$obj get total_slots} [num_gem_tracks]}
                           }
                           {set $play_anim 0}
                        }
                        {$obj set total_slots [num_gem_tracks]}
                        {$obj set track_slot $track_slot}
                        {if_else {== $delay 0}
                           {$this update_track_position $obj $play_anim}
                           {script_task
                              2
                              (delay $delay)
                              (script {$this update_track_position $obj $play_anim})
                           }
                        }
                        {++ $track_slot}
                     }
                     {do
                        {$obj set_used 0}
                        {$obj set total_slots [num_gem_tracks]}
                     }
                  }
               }
               {do
                  ($index 0)
                  {foreach $obj [objects]
                     {if {!= $obj}
                        {do
                           {$obj set_showing {elem [visibles] $index}}
                           {do
                              ($e {* $index 9})
                              {$obj set_local_pos
                                 {elem [xfms] {+ $e 0}}
                                 {elem [xfms] {+ $e 1}}
                                 {elem [xfms] {+ $e 2}}
                              }
                              {$obj set_local_rot
                                 {elem [xfms] {+ $e 3}}
                                 {elem [xfms] {+ $e 4}}
                                 {elem [xfms] {+ $e 5}}
                              }
                              {$obj set_local_scale
                                 {elem [xfms] {+ $e 6}}
                                 {elem [xfms] {+ $e 7}}
                                 {elem [xfms] {+ $e 8}}
                              }
                           }
                        }
                     }
                     {++ $index}
                  }
               }
            }
         )
         (update_track_position
            ($obj $play_anim)
            {do
               ($animate_params
                  {$this calculate_track_screen_position_animation_frames
                     {$obj get track_slot}
                  }
               )
               ($size_frame {eval {elem $animate_params 0}})
               ($shift_frame {eval {elem $animate_params 1}})
               ($cam_rect_frame {eval {elem $animate_params 2}})
               {$obj update_screen_position
                  $play_anim
                  $size_frame
                  $shift_frame
                  $cam_rect_frame
               }
               {if {exists overshell}
                  {do
                     ($overshell_slot
                        {overshell get_panel_from_slot_num {$obj get gem_track_dir_id}}
                     )
                     {if $overshell_slot
                        {if_else {$overshell_slot is_in_track_mode}
                           {$overshell_slot animate_with_track
                              $play_anim
                              $size_frame
                              $shift_frame
                              $cam_rect_frame
                           }
                           {$overshell_slot reset_slot_cam}
                        }
                     }
                  }
               }
            }
         )
         (save_objects
            {set [objects] {array 0}}
            {set [visibles] {array 0}}
            {set [xfms] {array 0}}
            {{$this dir} foreach_configurable_object $obj
               {if_else {!= $obj}
                  {do
                     ($index {size [objects]})
                     ($x)
                     ($y)
                     ($z)
                     {insert_elem [objects] $index $obj}
                     {insert_elem [visibles] $index {$obj showing}}
                     {$obj get_local_pos $x $y $z}
                     {insert_elem [xfms] {size [xfms]} $x}
                     {insert_elem [xfms] {size [xfms]} $y}
                     {insert_elem [xfms] {size [xfms]} $z}
                     {$obj get_local_rot $x $y $z}
                     {insert_elem [xfms] {size [xfms]} $x}
                     {insert_elem [xfms] {size [xfms]} $y}
                     {insert_elem [xfms] {size [xfms]} $z}
                     {$obj get_local_scale $x $y $z}
                     {insert_elem [xfms] {size [xfms]} $x}
                     {insert_elem [xfms] {size [xfms]} $y}
                     {insert_elem [xfms] {size [xfms]} $z}
                  }
                  {print "A configurable object was apparently deleted.
"}
               }
            }
         )
         (apply
            ($animate)
            {$this update $animate}
         )
         (milo_apply
            {do
               ($dir {$this dir})
               {$dir set bass 0}
               {$dir set drum 0}
               {$dir set guitar 0}
               {if {|| {== {$this name} 1_player_regular} {== {$this name} 1_player_wide}}
                  {$dir set bass 1}
               }
               {if {|| {== {$this name} 2_player_regular} {== {$this name} 2_player_wide}}
                  {$dir set bass 1}
                  {$dir set drum 1}
               }
               {if {|| {== {$this name} 3_player_regular} {== {$this name} 3_player_wide}}
                  {$dir set bass 1}
                  {$dir set drum 1}
                  {$dir set guitar 1}
               }
               {$dir configure_tracks}
               {$dir set_configuration $this}
            }
         )
      )
      (vocals_configuration
         (editor
            (apply
               script
               (script {$this milo_apply})
               (help "apply this configuration")
            )
            (cleanup
               script
               (script {$this cleanup})
               (help "remove missing objects from configurable objs array")
               (refresh objects visibles xfms)
            )
            (save_objects
               script
               (script
                  {$this save_objects}
                  {milo update_open_editor $this}
               )
               (help "Saves the current object configuration")
            )
            (object_configuration
               (indent
                  (objects
                     (array
                        object
                        (class Trans)
                        (list {{$this dir} get configurable_objects})
                     )
                  )
                  (visibles (array bool))
                  (xfms (array float))
               )
               (read_only 1)
            )
            (remote bool)
            (align
               symbol
               (list (top bottom))
               (help "align relative to top or bottom of track panel")
            )
            (left
               float
               (help "the x value for the left boundary for the track")
               (post_sync {{{$this dir} find track_left.trans} set_local_pos [left] 0 0})
            )
            (right
               float
               (help "the x value for the right boundary for the track")
               (post_sync
                  {{{$this dir} find track_right.trans} set_local_pos [right] 0 0}
               )
            )
            (now
               float
               (help "the x value for the position of the now bar")
               (post_sync {{{$this dir} find now_bar.trans} set_local_pos [now] 0 0})
            )
         )
         (objects ())
         (visibles ())
         (xfms ())
         (remote 0)
         (align top)
         (left -12)
         (right 12)
         (top 3.50)
         (bottom 0)
         (now -7)
         (is_active {== {{$this dir} get vox_configuration} $this})
         (update
            {if {$this is_active}
               {do
                  ($index 0)
                  {foreach $obj [objects]
                     {if {!= $obj ""}
                        {$obj set_showing {elem [visibles] $index}}
                        {do
                           ($e {* $index 9})
                           {$obj set_local_pos
                              {elem [xfms] {+ $e 0}}
                              {elem [xfms] {+ $e 1}}
                              {elem [xfms] {+ $e 2}}
                           }
                           {$obj set_local_rot
                              {elem [xfms] {+ $e 3}}
                              {elem [xfms] {+ $e 4}}
                              {elem [xfms] {+ $e 5}}
                           }
                           {$obj set_local_scale
                              {elem [xfms] {+ $e 6}}
                              {elem [xfms] {+ $e 7}}
                              {elem [xfms] {+ $e 8}}
                           }
                        }
                     }
                     {++ $index}
                  }
                  {set $vocal_track_dir {$this dir}}
               }
            }
         )
         (cleanup
            {do
               ($new_objects {array 0})
               ($new_visibles {array 0})
               ($new_xfms {array 0})
               {do
                  ($index 0)
                  {foreach $obj [objects]
                     {if {!= $obj ""}
                        {insert_elem $new_objects {size $new_objects} $obj}
                        {insert_elem $new_visibles {size $new_visibles} {elem [visibles] $index}}
                        {do
                           ($e {* $index 9})
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] $e}}
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] {+ $e 1}}}
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] {+ $e 2}}}
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] {+ $e 3}}}
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] {+ $e 4}}}
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] {+ $e 5}}}
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] {+ $e 6}}}
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] {+ $e 7}}}
                           {insert_elem $new_xfms {size $new_xfms} {elem [xfms] {+ $e 8}}}
                        }
                     }
                     {++ $index}
                  }
                  {set [objects] $new_objects}
                  {set [visibles] $new_visibles}
                  {set [xfms] $new_xfms}
               }
            }
         )
         (save_objects
            {set [objects] {array 0}}
            {set [visibles] {array 0}}
            {set [xfms] {array 0}}
            {{$this dir} foreach_configurable_object $obj
               {do
                  ($index {size [objects]})
                  ($x)
                  ($y)
                  ($z)
                  {insert_elem [objects] $index $obj}
                  {insert_elem [visibles] $index {$obj showing}}
                  {$obj get_local_pos $x $y $z}
                  {insert_elem [xfms] {size [xfms]} $x}
                  {insert_elem [xfms] {size [xfms]} $y}
                  {insert_elem [xfms] {size [xfms]} $z}
                  {$obj get_local_rot $x $y $z}
                  {insert_elem [xfms] {size [xfms]} $x}
                  {insert_elem [xfms] {size [xfms]} $y}
                  {insert_elem [xfms] {size [xfms]} $z}
                  {$obj get_local_scale $x $y $z}
                  {insert_elem [xfms] {size [xfms]} $x}
                  {insert_elem [xfms] {size [xfms]} $y}
                  {insert_elem [xfms] {size [xfms]} $z}
               }
            }
            {{{$this dir} find track_left.trans} get_local_pos $val $ignore $ignore}
            {set [left] $val}
            {{{$this dir} find track_right.trans} get_local_pos $val $ignore $ignore}
            {set [right] $val}
            {{{$this dir} find track_top.trans} get_local_pos $ignore $ignore $val}
            {set [top] $val}
            {{{$this dir} find track_bottom.trans} get_local_pos $ignore $ignore $val}
            {set [bottom] $val}
            {{{$this dir} find now_bar.trans} get_local_pos $val $ignore $ignore}
            {set [now] $val}
         )
         (apply
            {{{$this dir} find track_left.trans} set_local_pos [left] 0 0}
            {{{$this dir} find track_right.trans} set_local_pos [right] 0 0}
            {{{$this dir} find track_top.trans} set_local_pos 0 0 [top]}
            {{{$this dir} find track_bottom.trans} set_local_pos 0 0 [bottom]}
            {{{$this dir} find now_bar.trans} set_local_pos [now] 0 0}
            {{{$this dir} find pitch_now.trans} set_local_pos [now] 0 0}
            {$this update}
         )
         (milo_apply
            {{$this dir} set_vox_configuration $this}
            {{$this dir} reset}
         )
      )
      (tube_style
         (editor
            (apply script (script {$this apply}))
            (lead
               (indent
                  (lead_back
                     object
                     (class Mat)
                     (help "the background mat for the lead vocal tube, if any")
                  )
                  (lead_front
                     object
                     (class Mat)
                     (help "the foreground mat for the lead vocal tube, if any")
                  )
                  (lead_glow
                     object
                     (class Mat)
                     (help "the glow mat for the lead vocal tube, if any")
                  )
                  (lead_phoneme
                     object
                     (class Mat)
                     (help "the phoneme mat for lead vocals")
                  )
                  (lead_color symbol (list (green yellow orange brown purple blue white)))
               )
            )
            (harmony_1
               (indent
                  (harmony_1_back
                     object
                     (class Mat)
                     (help "the background mat for the harmony 1 vocal tube, if any")
                  )
                  (harmony_1_front
                     object
                     (class Mat)
                     (help "the foreground mat for the harmony 1 vocal tube, if any")
                  )
                  (harmony_1_glow
                     object
                     (class Mat)
                     (help "the glow mat for the harmony 1 vocal tube, if any")
                  )
                  (harmony_1_phoneme
                     object
                     (class Mat)
                     (help "the phoneme mat for harmony 1 vocals")
                  )
                  (harmony_1_color
                     symbol
                     (list (green yellow orange brown purple blue white))
                  )
               )
            )
            (harmony_2
               (indent
                  (same_as_harmony_1
                     bool
                     (help "if true, these are overridden by harmony_1")
                  )
                  (harmony_2_back
                     object
                     (class Mat)
                     (hide [same_as_harmony_1])
                     (help "the background mat for the harmony 2 vocal tube, if any")
                  )
                  (harmony_2_front
                     object
                     (class Mat)
                     (hide [same_as_harmony_1])
                     (help "the foreground mat for the harmony 2 vocal tube, if any")
                  )
                  (harmony_2_glow
                     object
                     (class Mat)
                     (hide [same_as_harmony_1])
                     (help "the glow mat for the harmony 2 vocal tube, if any")
                  )
                  (harmony_2_phoneme
                     object
                     (class Mat)
                     (help "the phoneme mat for harmony 2 vocals")
                  )
                  (harmony_2_color
                     symbol
                     (list (green yellow orange brown purple blue white))
                     (hide [same_as_harmony_1])
                  )
               )
            )
            (test_size float (help "controls the sample tube width in milo"))
            (glow_alpha
               float
               (range 0 1)
               (help
                  "default alpha value for tube glow material.  Note that this will not affect spotlight glow, as this driven by a separate pulse anim."
               )
            )
            (glow_size
               float
               (help "the fixed size of the tube glow in terms of x and z")
            )
         )
         (lead_back "")
         (lead_front "")
         (lead_glow "")
         (lead_phoneme "")
         (lead_color white)
         (harmony_1_back "")
         (harmony_1_front "")
         (harmony_1_glow "")
         (harmony_1_phoneme "")
         (harmony_1_color white)
         (harmony_2_back "")
         (harmony_2_front "")
         (harmony_2_glow "")
         (harmony_2_phoneme "")
         (harmony_2_color white)
         (same_as_harmony_1 0)
         (test_size 0.15)
         (glow_size 0.15)
         (glow_alpha 0.30)
         (apply
            {{$this dir} set tube_style $this}
            {if {exists milo}
               {tubes_milo.grp set_showing 1}
               {tube_lead_front_1.line set mat [lead_front]}
               {tube_lead_front_2.line set mat [lead_front]}
               {tube_lead_back_1.line set mat [lead_back]}
               {tube_lead_back_2.line set mat [lead_back]}
               {tube_lead_glow_1.line set mat [lead_glow]}
               {tube_lead_glow_2.line set mat [lead_glow]}
               {tube_harm1_front_1.line set mat [harmony_1_front]}
               {tube_harm1_front_2.line set mat [harmony_1_front]}
               {tube_harm1_back_1.line set mat [harmony_1_back]}
               {tube_harm1_back_2.line set mat [harmony_1_back]}
               {tube_harm1_glow_1.line set mat [harmony_1_glow]}
               {tube_harm1_glow_2.line set mat [harmony_1_glow]}
               {if_else [same_as_harmony_1]
                  {do
                     {tube_harm2_front_1.line set mat [harmony_1_front]}
                     {tube_harm2_front_2.line set mat [harmony_1_front]}
                     {tube_harm2_back_1.line set mat [harmony_1_back]}
                     {tube_harm2_back_2.line set mat [harmony_1_back]}
                     {tube_harm2_glow_1.line set mat [harmony_1_glow]}
                     {tube_harm2_glow_2.line set mat [harmony_1_glow]}
                  }
                  {do
                     {tube_harm2_front_1.line set mat [harmony_2_front]}
                     {tube_harm2_front_2.line set mat [harmony_2_front]}
                     {tube_harm2_back_1.line set mat [harmony_2_back]}
                     {tube_harm2_back_2.line set mat [harmony_2_back]}
                     {tube_harm2_glow_1.line set mat [harmony_2_glow]}
                     {tube_harm2_glow_2.line set mat [harmony_2_glow]}
                  }
               }
               {set $tube {* [test_size] 2.00}}
               {set $glow {* [glow_size] 2.00}}
               {tube_lead_front_1.line set width $tube}
               {tube_lead_front_2.line set width $tube}
               {tube_lead_back_1.line set width $tube}
               {tube_lead_back_2.line set width $tube}
               {tube_lead_glow_1.line set width $glow}
               {tube_lead_glow_2.line set width $glow}
               {tube_harm1_front_1.line set width $tube}
               {tube_harm1_front_2.line set width $tube}
               {tube_harm1_back_1.line set width $tube}
               {tube_harm1_back_2.line set width $tube}
               {tube_harm1_glow_1.line set width $glow}
               {tube_harm1_glow_2.line set width $glow}
               {tube_harm2_front_1.line set width $tube}
               {tube_harm2_front_2.line set width $tube}
               {tube_harm2_back_1.line set width $tube}
               {tube_harm2_back_2.line set width $tube}
               {tube_harm2_glow_1.line set width $glow}
               {tube_harm2_glow_2.line set width $glow}
               {tube_lead_spotlight.line set width $glow}
               {tube_harm1_spotlight.line set width $glow}
               {tube_harm2_spotlight.line set width $glow}
               {tube_harm1_glow_1.line set_showing 0}
               {tube_harm2_glow_2.line set_showing 0}
               {tube_lead_glow_2.line set_showing 0}
               {if {!= [lead_glow] ""}
                  {[lead_glow] set alpha [glow_alpha]}
               }
               {if {!= [harmony_1_glow] ""}
                  {[harmony_1_glow] set alpha [glow_alpha]}
               }
               {if {!= [harmony_2_glow] ""}
                  {[harmony_2_glow] set alpha [glow_alpha]}
               }
               {beat_anims.grp animate (loop 0 480)}
            }
         )
      )
      (arrow_style
         (editor
            (apply script (script {{$this dir} apply_arrow_style $this}))
            (arrow_A
               file
               (help "proxy file for arrow A in this style")
               (ext "Milo files" milo)
            )
            (arrow_B
               file
               (help "proxy file for arrow B in this style")
               (ext "Milo files" milo)
            )
            (arrow_C
               file
               (help "proxy file for arrow C in this style")
               (ext "Milo files" milo)
            )
         )
         (arrow_A "")
         (arrow_B "")
         (arrow_C "")
      )
      (font_style
         (editor
            (apply script (script {{$this dir} apply_font_style $this}))
            (lead_text object (class Text))
            (lead_phoneme_text object (class Text))
            (harmony_text object (class Text))
            (harmony_phoneme_text object (class Text))
         )
         (lead_text "")
         (harmony_text "")
         (lead_phoneme_text "")
         (harmony_phoneme_text "")
      )
      (guitar_chord
         (editor
            (string_high_E symbol (list (unused open fret_1 fret_2 fret_3 fret_4)))
            (string_B symbol (list (unused open fret_1 fret_2 fret_3 fret_4)))
            (string_G symbol (list (unused open fret_1 fret_2 fret_3 fret_4)))
            (string_D symbol (list (unused open fret_1 fret_2 fret_3 fret_4)))
            (string_A symbol (list (unused open fret_1 fret_2 fret_3 fret_4)))
            (string_low_E symbol (list (unused open fret_1 fret_2 fret_3 fret_4)))
            (fret_num int (range 0 24))
            (apply script (script {$this apply}))
         )
         (string_high_E unused)
         (string_B unused)
         (string_G unused)
         (string_D unused)
         (string_A unused)
         (string_low_E unused)
         (fret_num 0)
         (apply
            {if {== {{$this dir} get_type} chord_shape_generator}
               {{$this dir} set string_high_E [string_high_E]}
               {{$this dir} set string_B [string_B]}
               {{$this dir} set string_G [string_G]}
               {{$this dir} set string_D [string_D]}
               {{$this dir} set string_A [string_A]}
               {{$this dir} set string_low_E [string_low_E]}
               {{$this dir} set fret_num [fret_num]}
               {{$this dir} set preset_chord $this}
               {{$this dir} apply}
            }
         )
      )
   )
   (views
      ('Object View'
         (orphan
            {do
               ($orphan true)
               {$this iterate_refs $r {set $orphan false}}
               $orphan
            }
         )
         (note
            {$this note}
            {$this set_note $milo_value}
         )
      )
   )
)
(ObjectDir
   (description
      "An ObjectDir keeps track of a set of Objects.  

      It can subdir or proxy in other ObjectDirs.  

      To rename subdir or proxy files search for remap_objectdirs in system/run/config/objects.dta"
   )
   (types
      (song
         (change_subdir
            ($file)
            {if_else {has_substr $file ":"}
               {cond
                  ({has_substr
                        $file
                        "/world/shared/director.milo"
                     }
                     "world/shared/director.milo"
                  )
                  "stream_cache"
               }
               kDataUnhandled
            }
         )
      )
   )
   (editor
      (subdirs
         (array file)
         (help "Subdirectories of objects")
         (post_sync
            {handle ($this enter)}
            {milo update_objects}
         )
         (hide {$this is_proxy})
      )
      (proxy_file
         file
         (hide {! {$this is_proxy}})
         (post_sync {handle ($this enter)})
      )
      (inline_proxy
         bool
         (hide {! {$this is_proxy}})
         (help "Can this proxy be inlined?")
      )
      (inline_subdir
         symbol
         (list (kInlineNever kInlineCached kInlineAlways kInlineCachedShared))
         (hide {$this is_proxy})
         (help
            "How is this inlined as a subdir?  Note that when you change this, you must resave everything subdiring this file for it to take effect"
         )
      )
      (path_name
         string
         (help "where this came from")
         (read_only 1)
      )
   )
   (anim_props
      (event
         object
         (class EventTrigger)
         (dir $this)
      )
   )
)
(MidiParser
   (description
      "Parses midi files into messages to send to other objects or itself"
   )
   (init)
   (types)
)
(MsgSource
   (description "Exports messages to other objects called sinks")
   (editor
      (sinks
         (array
            (struct
               (obj
                  object
                  (class Object)
                  (help "Object to sink to")
               )
               (mode
                  int
                  (help "the mode")
                  (list
                     (
                        (
                           "kSinkModeHandle"
                           "does a Handle to the sink, this gets all c handlers, type handling, and exporting."
                        )
                        ("kSinkModeExport" "just Exports to the sink, so no c or type handling")
                        (
                           "kSinkModeType"
                           "just calls HandleType, good if know that particular thing is only ever type handled."
                        )
                        (
                           "kSinkModeExportType"
                           "do type handling and exporting using Export, no C handling"
                        )
                     )
                  )
               )
            )
         )
         (help "Global sinks, all messages sent to these guys")
         (read_only 1)
         (no_test)
      )
      (event_sinks
         (array
            (struct
               (event symbol (help "the event to send down"))
               (sinks
                  (array
                     (struct
                        (obj
                           object
                           (class Object)
                           (help "Object to sink to")
                        )
                        (mode
                           int
                           (help "the mode")
                           (list
                              (
                                 (
                                    "kSinkModeHandle"
                                    "does a Handle to the sink, this gets all c handlers, type handling, and exporting."
                                 )
                                 ("kSinkModeExport" "just Exports to the sink, so no c or type handling")
                                 (
                                    "kSinkModeType"
                                    "just calls HandleType, good if know that particular thing is only ever type handled."
                                 )
                                 (
                                    "kSinkModeExportType"
                                    "do type handling and exporting using Export, no C handling"
                                 )
                              )
                           )
                        )
                        (handler symbol (help "Name of the handler to use"))
                     )
                  )
                  (help "the objects, with modes and handlers to send this event to")
               )
            )
            (header
               {do
                  ($arr {array $milo_prop_path})
                  {push_back $arr event}
                  {$this get $arr}
               }
            )
         )
         (help "Event specific sinks, each particular event is sent to these guys")
         (read_only 1)
         (no_test)
      )
   )
   (types)
)
(Anim
   (description
      "Base class for animatable objects. Anim objects change

        their state or other objects."
   )
   (allowed_dirs)
   (editor
      (rate
         int
         (list ("k30_fps" "k480_fpb" "k30_fps_ui" "k1_fpb" "k30_fps_tutorial"))
         (help "Rate to animate")
      )
      (frame
         float
         (help "Frame of animation")
         (range 0 {$this end_frame})
         (no_test)
      )
   )
   (views
      (animating
         {$this is_animating}
         ("current frame" {$this frame})
      )
   )
)
(Poll
   (description "Abstract base class for pollable RND objects")
   (allowed_dirs)
   (editor
      (enter script (script {$this enter}))
      (exit script (script {$this exit}))
   )
   (types)
)
(PollAnim
   (description "Class that drives Anims with time based on their rate.")
   (superclasses Anim Poll)
   (ext pa)
   (editor
      (anims
         (array object (class Anim))
         (help
            "List of anims that will have SetFrame called on them according to their rate and the TheTaskMgr.Seconds or Beat"
         )
      )
   )
   (types)
)
(PropAnim
   (description "Animate any properties on target object")
   (ext anim)
   (superclasses Anim)
   (editor (loop bool (help "Do I self loop on SetFrame")))
   (types
      (song_anim (song 1))
      (vignette_lipsync
         (editor
            (clip
               object
               (class CharClip)
               (help "The clip that this propanim goes along with")
            )
            (lip_sync
               object
               (class CharLipSync)
               (help "The lipsync object to set from this propanim")
            )
            (setup_from_clip script (script {$this setup_from_clip}))
         )
         (clip)
         (lip_sync)
         (setup_from_clip
            {do
               {set $target [lip_sync]}
               {set $num_frames {* {[clip] get length_seconds} 30}}
               {foreach $viseme {$target get viseme_list}
                  {set $temp {array 0}}
                  {push_back $temp $viseme}
                  {if
                     {!
                        {$this has_keys $target $temp}
                     }
                     {$this add_keys $target $temp 0}
                     {$this set_key_val $target $temp 0 0.00}
                     {$this set_key_val $target $temp $num_frames 0.00}
                  }
               }
            }
         )
      )
      (song_facial_exp
         (song 1)
         (editor
            (lip_sync
               object
               (class CharLipSync)
               (help "The lipsync object to set from this propanim")
            )
         )
         (lip_sync)
         (setup
            {if_else {$tool_song song_name}
               {do
                  {set $target [lip_sync]}
                  {set $num_frames {* {$tool_song get song_end_frame} 30}}
                  {foreach $viseme {$target get viseme_list}
                     {set $temp {array 0}}
                     {push_back $temp $viseme}
                     {if
                        {!
                           {$this has_keys $target $temp}
                        }
                        {$this add_keys $target $temp 0}
                        {$this set_key_val $target $temp 0 0.00}
                        {$this set_key_val $target $temp $num_frames 0.00}
                     }
                  }
               }
               {notify
                  "No song selected in anim bar- can't set up lip sync.  Please select the song and try again."
               }
            }
         )
      )
   )
)
(AnimFilter
   (description
      "An AnimFilter object modifies the playing of another animatable object"
   )
   (superclasses Anim)
   (ext filt)
   (types)
   (editor
      (anim
         object
         (post_sync {milo update_open_editor $this})
         (list
            {$this safe_anims
               {if_else {exists milo}
                  {milo cur_dir}
                  {$this dir}
               }
            }
         )
         (help "Animatable object that receives filtered frame")
      )
      (start float (help "Overriden start frame of animation"))
      (end float (help "Overriden end frame of animation"))
      (offset float (help "Amount to offset frame for animation"))
      (scale
         float
         (read_only {!= [period] 0.00})
         (help "Multiplier to speed of animation")
      )
      (period
         float
         (refresh scale)
         (help "Alternative to scale, overriden period of animation")
      )
      (snap float (help "Snap frame to nearest multiple"))
      (jitter float (help "Jitter frame randomly up to this amount"))
      (type
         int
         (list ("kAnimRange" "kAnimLoop" "kAnimShuttle"))
         (help "How to treat the frame outside of start and end")
      )
   )
)
(Cam
   (description
      "A Camera object is drawable and transformable. When drawn

                 it sets up projection and clipping parameters for

                 subsequent draw siblings."
   )
   (superclasses Trans)
   (ext cam)
   (types)
   (editor
      (near_plane
         float
         (help
            "The distance in world coordinates to the near clipping

            plane. The near/far ratio is limited to 1:1000 to preserve

            Z-buffer resolution."
         )
      )
      (far_plane
         float
         (help
            "The distance in world coordinates to the far clipping

            plane. The near/far ratio is limited to 1:1000 to preserve

            Z-buffer resolution. Note that on the PS2, object polys are

            culled rather than clipped to the far plane."
         )
      )
      (y_fov float)
      (z_range
         (vector
            (x float)
            (y float)
         )
         (help
            "The part of the Z-buffer to use, in normalized

            coordinates. It can be useful to draw a scene where the near

            and far planes must exceed the 1:1000 ratio (so multiple

            cameras are used to draw farthest to nearest objects, each

            using a closer range of the z-buffer) or to leave some

            z-buffer for HUD overlay objects."
         )
      )
      (screen_rect
         (struct
            (x float)
            (y float)
            (w float)
            (h float)
         )
         (help
            "The area of the screen in normalized coordinates

            (0 to 1) to draw into."
         )
      )
      (set_tool_cam
         script
         (script
            {milo set tool_cam $this}
            {milo update_objects 1}
         )
         (hide {== {milo get tool_cam} $this})
         (help "Applies this cam as the tool view.")
      )
      (reset_tool_cam
         script
         (script
            {milo set tool_cam ""}
            {milo update_objects 1}
         )
         (hide {== {milo get tool_cam} ""})
         (help "Resets the tool view to be same as Milo's view.")
      )
   )
)
(CamAnim
   (description "A CamAnim object animates Camera properties.")
   (superclasses Anim)
   (ext cnm)
   (types)
)
(SoftParticles
   (description "Renders the specified particles with soft edges.")
   (superclasses Draw)
   (ext soft)
   (types)
   (editor
      (particles
         (array object (class Draw))
         (help "The list of particle objects to draw")
      )
      (blend_mode
         int
         (list
            (
               (
                  "kBlendDest"
                  "Don't show this material at all; just show the frame buffer"
               )
               ("kBlendSrc" "Don't blend this material at all")
               ("kBlendAdd" "Output is material + frame buffer")
               (
                  "kBlendSrcAlpha"
                  "Output is (material x mat alpha) + (frame buffer x (1 - mat alpha))"
               )
               ("kBlendSrcAlphaAdd" "Output is (material x mat alpha) + frame buffer")
               ("kBlendSubtract" "Output is frame buffer - material")
               ("kBlendMultiply" "Output is frame buffer x material")
               ("kPreMultAlpha" "Output is material + (frame buffer x (1 - mat alpha)")
            )
         )
         (read_only 1)
         (help "Blending to use for the particle system")
      )
   )
)
(TexRenderer
   (description "TexRender renders a draw and cam into a texture.")
   (superclasses Anim Draw)
   (ext rndtex)
   (types
      (portrait
         (editor
            (old_dir
               object
               (class RndDir)
               (help "the old object dir, to restore")
               (read_only 1)
            )
            (slot
               int
               (help "the old character slot")
               (read_only 1)
            )
         )
         (old_dir)
         (slot 0)
         (pre_render
            {set [slot]
               {if_else {exists closet_mgr}
                  {closet_mgr get_user_slot}
                  0
               }
            }
            {set [old_dir] {$bandwardrobe get dir}}
            {{$bandwardrobe get_character [slot]} portrait_begin}
            {[draw] enter}
            {[draw] force_shot {[draw] find portrait.shot}}
            {[draw] poll}
         )
         (post_render
            {[draw] enter}
            {{$bandwardrobe get_character [slot]} portrait_end}
            {$bandwardrobe set dir [old_dir]}
         )
      )
   )
   (editor
      (draw
         object
         (class Draw)
         (help "Draw Object to render to texture")
         (hide {$this is_a PatchRenderer})
      )
      (cam
         object
         (class Cam)
         (help
            "Camera to use, if you want specific one, defaults to proxy cam, if none and draw is proxy"
         )
      )
      (mirror_cam
         object
         (class Cam)
         (help
            "We will mirror this cam about whatever mesh is associated with our output texture to automatically position the render-2-tex cam for mirroring"
         )
      )
      (output_texture
         object
         (class Tex)
         (help "Texture to write to")
         (list {$this get_render_textures})
         (pre_sync
            {if [output_texture]
               {milo record [output_texture] reset_tex_render}
            }
         )
         (post_sync
            {if [output_texture]
               {milo record [output_texture] set_tex_render}
               {[output_texture] set_rendered}
            }
         )
      )
      (draw_world_only
         bool
         (help
            "Renders the texture only on 'world' frames, while skipping rendering on post processing frames"
         )
      )
      (draw_pre_clear
         bool
         (help
            "Renders the texture before the rest of the scene is rendered. Useful for rendering large textures"
         )
      )
      (force bool (help "Force rendering every frame"))
      (imposter_height
         float
         (help "Height for imposter rendering with current camera")
      )
      (draw_responsible
         bool
         (help
            "If true, exclusively draws the draw, if false the scene will draw it too, use with caution!"
         )
      )
      (no_poll
         bool
         (help
            "If [draw] will not get enter, exit, or poll automatically, it will be up to script hooks to do any of that"
         )
      )
      (prime_draw
         bool
         (help
            "Check this if rendering multiple characters to a texture.  Will draw 2x if checked."
         )
      )
      (force_mips bool (help "Generate mip maps for the texture."))
   )
)
(TexBlendController
   (description
      "Defines the two objects that will be used to determine the distance for the texture blend."
   )
   (types)
   (ext texblendctl)
   (editor
      (mesh
         object
         (class Mesh)
         (help
            "The mesh object to render to the texture. This should be an unskinned mesh with UV coordinates that match the source mesh"
         )
      )
      (reference_object_1
         object
         (class Trans)
         (help "The first object to use as a distance reference")
         (refresh base_distance min_distance max_distance)
         (read_only [override_map])
      )
      (reference_object_2
         object
         (class Trans)
         (help "The second object to use as a distance reference")
         (refresh base_distance min_distance max_distance)
         (read_only [override_map])
      )
      (base_distance
         float
         (help "The base distance used to compute which blending to use")
         (read_only 1)
      )
      (min_distance
         float
         (help "The distance where the 'near' texture map will be fully visible")
         (read_only [override_map])
      )
      (max_distance
         float
         (help "The distance where the 'far' texture map will be fully visible")
         (read_only [override_map])
      )
      (set_base_distance
         script
         (help "Sets the reference distance value from the current positions.")
         (script {$this set_base_distance})
         (refresh base_distance min_distance max_distance)
         (read_only [override_map])
      )
      (set_min_distance
         script
         (help "Sets the min distance value from the current positions.")
         (script {$this set_min_distance})
         (refresh min_distance)
         (read_only [override_map])
      )
      (set_max_distance
         script
         (help "Sets the max distance value from the current positions.")
         (script {$this set_max_distance})
         (refresh max_distance)
         (read_only [override_map])
      )
      (set_all_distances
         script
         (help "Sets ALL distance values from the current positions.")
         (script {$this set_all_distances})
         (refresh base_distance min_distance max_distance)
         (read_only [override_map])
      )
      (override_map
         object
         (class Tex)
         (help "If set, ignores all other fields and forces 100% blend to it")
         (refresh)
      )
   )
)
(TexBlender
   (description
      "Renderable texture used to composite pieces of texture maps based on the distance between bones or other animatiable objects"
   )
   (superclasses Draw)
   (types)
   (ext texblend)
   (editor
      (owner
         object
         (class Draw)
         (help
            "The owner of this texture blend. This is used to determine if the texture blend is visible. For example, if this texture blend is used in the head object of a character, set the owner to be the head object."
         )
      )
      (base_map
         object
         (class Tex)
         (help "The base texture map")
      )
      (near_map
         object
         (class Tex)
         (help
            "The texture map to use when the constraints are closer than the default distance"
         )
      )
      (far_map
         object
         (class Tex)
         (help
            "The texture map to use when the constraints are further than the default distance"
         )
      )
      (output_texture
         object
         (class Tex)
         (help "The final result output texture")
         (list {$this get_render_textures})
         (pre_sync
            {if [output_texture]
               {milo record [output_texture] reset_tex_render}
            }
         )
         (post_sync
            {if [output_texture]
               {milo record [output_texture] set_tex_render}
               {[output_texture] set_rendered}
            }
         )
      )
      (controller_list
         (array object (class TexBlendController))
         (help
            "The list of controller objects used to render pieces of a mesh to the output texture"
         )
      )
      (controller_influence
         float
         (help "Global strength of the blending effect for each controller")
         (range 0.00 1.00)
      )
   )
)
(MotionBlur
   (description
      "Contains a list of objects to apply object based motion blur"
   )
   (superclasses Draw)
   (types)
   (ext blur)
   (editor
      (draw_list
         (array object (list {$this allowed_drawable}))
         (help "The list of objects to render motion blur")
      )
   )
)
(AmbientOcclusion
   (description
      "Computes ambient occlusion and automatic tessellation. Also stores AO configuration options."
   )
   (types)
   (ext ao)
   (editor
      (dont_cast_ao
         (array object (list {$this get_valid_objects}))
         (help "These objects will NOT cast shadows.")
      )
      (dont_receive_ao
         (array object (list {$this get_valid_objects}))
         (help "These objects will NOT receive shadows.")
      )
      (tessellate
         (array object (list {$this get_valid_objects}))
         (help "These objects will be automatically tessellated.")
      )
      (ignore_transparent
         bool
         (help "Ignore transparent objects when casting shadows.")
      )
      (ignore_prelit
         bool
         (help "Ignore prelit materials when receiving shadows.")
      )
      (ignore_hidden
         bool
         (help "Ignore hidden objects when casting or receiving shadows.")
      )
      (intersect_back_faces
         bool
         (help
            "If true, this will cause back faces of triangles to be added. This will more than double the calculation time."
         )
      )
      (use_mesh_normals
         bool
         (read_only 1)
         (help
            "Use the mesh normals when calculating. Otherwise, smoothed normals will be re-generated for each mesh."
         )
      )
      (tesselation_settings
         (indent
            (tessellate_tri_limit
               int
               (range 2 32)
               (help
                  "The maximum number of polys tessellation will generate. This is a multiplier of the current poly count. A value of 2 will generate a maximum of 2x the polys."
               )
            )
            (tessellate_tri_error
               float
               (range 0.10 15.00)
               (help
                  "The error threshold for the ambient occlusion calculation. Error larger than this value will result in a triangle being split."
               )
            )
            (tessellate_tri_large
               float
               (range 9.00 500.00)
               (help "Triangles larger than this size will always be split.")
            )
            (tessellate_tri_small
               float
               (range 1.00 500.00)
               (help "Triangles smaller than this size will not be split any further.")
            )
         )
      )
      (calculate
         script
         (help "Perform ambient occlusion and auto tessellation.")
         (script {$this calculate})
      )
   )
)
(Draw
   (description
      "Base class for drawable objects. Draw objects either

        render polys or determine rendering state."
   )
   (allowed_dirs)
   (editor
      (showing
         bool
         (help
            "Whether the object and its Draw children are drawn or collided with."
         )
         (post_sync {milo invalidate_listers_and_trees})
      )
      (draw_order
         float
         (help
            "Draw order within proxies, lower numbers are drawn first, so assign numbers from the outside-in (unless translucent), to minimize overdraw.  In groups, draw_order will be ignored unless you explicitly click the sort button."
         )
      )
      (sphere
         (struct
            (x float)
            (y float)
            (z float)
            (radius float)
         )
         (help "bounding sphere")
      )
      (update_sphere
         script
         (help "Calculates the bounding sphere for the object.")
         (script
            {milo record $this update_sphere}
            {$this update_sphere}
         )
         (refresh sphere)
      )
   )
   (views
      (showing
         ("Showing" [showing])
         ("Draw Order" [draw_order])
      )
   )
)
(Environ
   (description
      "An environment object is drawable. When drawn it sets up

        dynamic lighting and fogging for subsequently drawn siblings."
   )
   (ext env)
   (types)
   (editor
      (lights_real
         (array object (list {$this allowable_lights_real}))
         (help "Real dynamic lights for this environment")
      )
      (lights_approx
         (array object (list {$this allowable_lights_approx}))
         (help "Approximated dynamic lights for this environment")
      )
      (ambient_color color (help "Ambient color for this environment"))
      (ambient_alpha
         float
         (help "Ambient color alpha for this environment")
         (range 0.00 1.00)
      )
      (fog_enable
         bool
         (help "Whether fog is enabled for this environment")
         (refresh fog_color fog_start fog_end)
      )
      (fog_color
         color
         (read_only {! {$this get fog_enable}})
         (help "Fog color")
      )
      (fog_start
         float
         (read_only {! {$this get fog_enable}})
         (help "Fog start distance")
      )
      (fog_end
         float
         (read_only {! {$this get fog_enable}})
         (help "Fog end distance")
      )
      (ambient_fog_owner
         object
         (class Environ)
         (help "Share ambient and fog parameters with this environ")
         (obj_flags no_null)
         (no_test)
      )
      (animate_from_preset
         bool
         (help "Whether this environment should be animated by light presets")
      )
      (ng
         (indent
            (fade_settings
               (indent
                  (fade_out bool (help "Fade out the scene over distance"))
                  (fade_start
                     float
                     (help "World space distance from camera to start fading")
                  )
                  (fade_end float (help "World space distance fade out completely"))
                  (fade_max
                     float
                     (help "Maximum opacity of faded objects")
                     (range 0 1)
                  )
                  (fade_ref
                     object
                     (class Trans)
                     (help "reference object to left/right fade along x-axis")
                  )
                  (left_out float (help "distance along negative x to start fading in"))
                  (left_opaque
                     float
                     (help "distance along negative x to become fully opaque")
                  )
                  (right_opaque
                     float
                     (help "distance along positive x to become fully opaque")
                  )
                  (right_out float (help "distance along positive x to start fading in"))
               )
               (alias "fade settings")
               (help "Settings for environment fade")
            )
            (color_adjust
               (indent
                  (use_color_adjust
                     bool
                     (help "Enable color adjust")
                     (refresh color_adjust_properties)
                  )
                  (color_adjust_properties
                     (indent
                        (hue
                           float
                           (help "Hue: -180 to 180, 0.0 is neutral")
                           (range -180 180)
                        )
                        (saturation
                           float
                           (help "Saturation: -100 to 100, 0.0 is neutral")
                           (range -100 100)
                        )
                        (lightness
                           float
                           (help "Lightness: -100 to 100, 0.0 is neutral")
                           (range -100 100)
                        )
                        (contrast
                           float
                           (help "Contrast: -100 to 100, 0.0 is neutral")
                           (range -100 100)
                        )
                        (brightness
                           float
                           (help "Brightness: -100 to 100, 0.0 is neutral")
                           (range -100 100)
                        )
                        (levels
                           (indent
                              (in_lo color (help "Input low end"))
                              (in_hi color (help "Input high end"))
                              (out_lo color (help "Output low end"))
                              (out_hi color (help "Output high end"))
                           )
                        )
                     )
                     (read_only {! [use_color_adjust]})
                  )
               )
            )
            (ambient_occlusion_settings
               (indent
                  (ao_strength
                     float
                     (range 0 4)
                     (help "Strength of the ambient occlusion effect")
                  )
                  (toggle_ao
                     script
                     (help "Toggle ambient occlusion for testing purposes ONLY.")
                     (script {$this toggle_ao})
                  )
               )
               (alias "ambient occlusion settings")
               (help
                  "Settings for manipulating the ambient occlusion properties of the environment"
               )
            )
            (tonemapping
               (indent
                  (tone_map
                     bool
                     (help "Enable color adjust")
                     (alias "use tone mapping")
                     (refresh tonemapping_properties)
                  )
                  (tonemapping_properties
                     (indent
                        (intensity_rate
                           float
                           (range 0 1)
                           (help
                              "The rate the eye adjusts to scene lighting changes over time. The higher the value, the longer it takes the retina to adapt"
                           )
                           (alias "eye adjust")
                        )
                        (exposure
                           float
                           (range 0 5)
                           (help
                              "The exposure value to use when tone-mapping. Adjusts the overall exposure level of the scene"
                           )
                        )
                        (white_point
                           float
                           (range 0 10)
                           (help
                              "The white point value to use when tone-mapping. Pixels brighter than this value will be clamped to white and bloom out"
                           )
                           (alias "white point")
                        )
                     )
                     (read_only {! [tone_map]})
                  )
               )
               (alias "tone mapping")
               (help "Settings for changing the lighting exposure properties")
            )
         )
         (help "Next-generation graphics settings")
      )
   )
)
(EnvAnim
   (description "An EnvAnim object animates Environ properties.")
   (superclasses Anim)
   (ext enm)
   (types)
)
(Flare
   (description
      "Flare objects are particles that are rendered based on

        the visibility of their center.<br />

        Use them to implement sun flare peeking through tree leaves and

        around buildings, flares on lamps and stage lights that get

        occluded by characters, etc.  Flares should be drawn last in a

        frame, and since they depend on the z-buffer for visibility

        testing, previously drawn translucent or cutout objects must

        properly use translucent or SrcAlphaCutout materials."
   )
   (superclasses Draw Trans)
   (ext flare)
   (types)
   (editor
      (mat
         object
         (class Mat)
         (help "Material for flare")
      )
      (sizes
         (vector
            (x float)
            (y float)
         )
         (help
            "Size range of the flare.  If the sizes are unequal, the size will change depending on how much the camera faces the flare's Y axis."
         )
      )
      (steps int (help "Number of steps for the flare to fade in and out."))
      (range
         (vector
            (x float)
            (y float)
         )
         (help
            "Fade range of the flare.  The flare will fade within this distance from the camera.  Past the max range, it will fade to 0."
         )
      )
      (offset
         float
         (help "Offsets position of rendered flare towards the camera.")
      )
      (point_test
         bool
         (help
            "Controls whether or not a point test is performed for the flare.  The test takes one world frame to take effect."
         )
      )
   )
)
(Font
   (description "Font objects determine the appearance for Text objects.")
   (ext font)
   (editor
      (mat
         object
         (class Mat)
         (help "Material for font")
         (pre_sync {milo update_text $this})
         (post_sync {milo update_text $this})
      )
      (texture_owner
         object
         (class Font)
         (help "Font owner of the texture to use")
         (obj_flags no_null)
         (no_test)
         (pre_sync {milo update_text $this})
         (post_sync {milo update_text $this})
      )
      (monospace
         bool
         (help "Font is monospaced.")
         (pre_sync {milo update_text $this})
         (post_sync {milo update_text $this})
      )
      (base_kerning
         float
         (help "Base kerning of the font.")
         (pre_sync {milo update_text $this})
         (post_sync {milo update_text $this})
      )
      (packed
         bool
         (help "Font texture is packed")
         (read_only 1)
      )
      (cell_width
         int
         (help "Texel width of character (if un-packed)")
         (read_only [packed])
         (pre_sync {milo update_text $this})
         (post_sync {milo update_text $this})
      )
      (cell_height
         int
         (help "Texel height of character (if un-packed)")
         (read_only [packed])
         (pre_sync {milo update_text $this})
         (post_sync {milo update_text $this})
      )
      (chars_in_map
         string
         (help "List of characters this font uses")
         (read_only [packed])
         (pre_sync {milo update_text $this})
         (post_sync {milo update_text $this})
      )
      (bleed_test
         script
         (script {$this bleed_test})
         (help "Tests the font for bleeding over edges.")
      )
   )
   (types
      (imported_font
         (editor
            (font_name
               string
               (help "Font name used to import this font.")
               (read_only 1)
            )
            (font_size
               int
               (help "Size of the font used to import this font.")
               (read_only 1)
            )
            (bold
               bool
               (help "Bold state of the font used to import this font.")
               (read_only 1)
            )
            (italics
               bool
               (help "Italics stat of the font used to import this font.")
               (read_only 1)
            )
            (padding
               (indent
                  (left int)
                  (right int)
                  (top int)
                  (bottom int)
               )
               (read_only 1)
            )
         )
         (font_name "")
         (font_size 12)
         (bold 0)
         (italics 0)
         (left 0)
         (right 0)
         (top 0)
         (bottom 0)
      )
   )
)
(Generator
   (description "A Generator object flies out object instances along a path.")
   (superclasses Anim Draw Trans)
   (ext gen)
   (types)
)
(Group
   (description
      "Represents a group of objects to which to propogate

        animation and messages."
   )
   (superclasses Anim Draw Trans)
   (ext grp)
   (types)
   (editor
      (environ object (class Environ))
      (draw_only
         object
         (class Draw)
         (list {$this get_draws})
         (help "if set, only draws this member of the group")
      )
      (sort_draws
         script
         (script {$this sort_draws})
         (help "Sort objects by draw_order and material")
         (post_sync {milo update_objects})
      )
      (lod
         object
         (class Draw)
         (obj_flags no_this)
         (help "Object to draw instead below lod_screen_size")
      )
      (lod_screen_size float (help "Ratio of screen height for lod"))
      (sort_in_world
         bool
         (help
            "Sort by distance to current camera per frame.


                              This has a CPU cost if there are many objects."
         )
      )
   )
)
(Light
   (description "Light objects are added to environments for drawing.")
   (superclasses Trans)
   (ext lit)
   (types)
   (editor
      (type
         int
         (list
            (
               ("kLightPoint" "A positional light with fall-off")
               ("kLightDirectional" "A directional light")
               ("kLightProjected" "A projected light")
               (
                  "kLightShadowRef"
                  "A shadow reference light to indicate self-shadow direction"
               )
            )
         )
         (help "Type of dynamic lighting")
         (refresh projection)
      )
      (range float (help "Falloff distance for point lights"))
      (falloff_start
         float
         (help "Distance at which falloff starts for point lights")
      )
      (color
         color
         (help "Color of light")
         (refresh intensity)
         (no_test)
      )
      (intensity
         float
         (help "Intensity of light color")
         (refresh color)
         (no_test)
      )
      (color_owner
         object
         (class Light)
         (help "Master for light color and intensity")
         (obj_flags no_null)
         (no_test)
      )
      (projection
         (indent
            (shadow_objects
               (array object (class Draw))
               (help "These objects will cast shadows for the projected light")
               (hide {!= [type] 2})
            )
            (projected_blend
               int
               (list
                  (
                     ("kLightAdd" "Projected light will add light to the scene")
                     ("kLightMultiply" "Projected light will multiply shadows with the scene")
                  )
               )
               (alias "blend")
               (help "Specifies blending for the projected light")
               (refresh texture texture_xfm)
            )
            (topradius
               float
               (help "Fake cone small radius at the source")
               (hide {!= [type] 2})
            )
            (botradius
               float
               (help "Fake cone big radius at the far end")
               (hide {!= [type] 2})
            )
            (texture
               object
               (class Tex)
               (help "Projected texture")
               (read_only {!= [projected_blend] 0})
               (hide {!= [type] 2})
            )
            (cube_texture
               object
               (class CubeTex)
               (help "Projected cube map texture")
               (hide {!= [type] 0})
            )
            (texture_xfm
               (struct
                  (pitch float)
                  (roll float)
                  (yaw float)
                  (x_scale float)
                  (y_scale float)
                  (z_scale float)
                  (x float)
                  (y float)
                  (z float)
               )
               (read_only {!= [projected_blend] 0})
               (hide {!= [type] 2})
            )
         )
         (hide {&& {!= [type] 0} {!= [type] 2}})
         (help "Projection parameters")
      )
      (animate_color_from_preset
         bool
         (help "Animation authority for LightPreset")
      )
      (animate_position_from_preset
         bool
         (help "Animation authority for LightPreset")
      )
      (animate_range_from_preset
         bool
         (help "Animate light's range from a LightPreset")
      )
   )
)
(LightAnim
   (description
      "LightAnim objects animate light object properties using keyframe interpolation."
   )
   (superclasses Anim)
   (ext lnm)
   (types)
)
(Line
   (description
      "Line objects represent 3D lines with thickness, perspective, and optional end caps."
   )
   (superclasses Draw Trans)
   (ext line)
   (types)
)
(Mat
   (description
      "Material objects determine texturing, blending, and the

        effect of lighting on drawn polys."
   )
   (ext mat)
   (types
      (dreamscape_switch
         (dreamscape_diffuse)
         (dreamscape_norm)
         (dreamscape_specular)
         (saved_diffuse)
         (saved_norm)
         (saved_specular)
         (in_dreamscape 0)
         (editor
            (dreamscape_diffuse
               object
               (class Tex)
               (help "Switch to this diffuse texture on entering dreamscape")
            )
            (dreamscape_norm
               object
               (class Tex)
               (help "Switch to this normal map on entering dreamscape")
            )
            (dreamscape_specular
               object
               (class Tex)
               (help "Switch to this specular texture on entering dreamscape")
            )
         )
      )
   )
   (editor
      (color color (help "Base material color"))
      (alpha float (help "Base material alpha"))
      (use_environ bool (help "Modulate with environment ambient and lights"))
      (prelit bool (help "Use vertex color and alpha for base or ambient"))
      (diffuse_tex
         object
         (class Tex)
         (help "Base texture map, modulated with color and alpha")
         (refresh intensify)
      )
      (intensify
         bool
         (help "Double the intensity of base map")
         (read_only {! [diffuse_tex]})
      )
      (tex_wrap
         int
         (list
            (
               ("kTexWrapClamp" "UVs outside the range [0,1] are clamped")
               ("kTexWrapRepeat" "The image repeats itself across the surface")
               ("kTexBorderBlack" "texels outside the UV range [0,1] are black")
               ("kTexBorderWhite" "texels outside the UV range [0,1] are white")
               (
                  "kTexWrapMirror"
                  "The image repeats itself, but is flipped every other repetition"
               )
            )
         )
         (help "Texture mapping mode")
      )
      (tex_gen
         int
         (list
            (
               ("kTexGenNone" "use vertex UV unchanged")
               ("kTexGenXfm" "transform vertex UV about center with stage xfm")
               (
                  "kTexGenSphere"
                  "sphere map that rotates around object with camera, xfm is direction of map, fast on gs slow on cpu, flips at poles"
               )
               ("kTexGenProjected" "project from direction of stage xfm in world coords")
               ("kTexGenXfmOrigin" "like Xfm but about origin rather than center")
               (
                  "kTexGenEnviron"
                  "reflection map, like sphere map but perspective correct and does not flip, fast on cpu but slow on gs"
               )
            )
         )
         (help "How to generate texture coordinates")
      )
      (tex_xfm
         (struct
            (pitch float)
            (roll float)
            (yaw float)
            (x_scale float)
            (y_scale float)
            (z_scale float)
            (x float)
            (y float)
            (z float)
         )
         (help "Transform for coordinate generation")
      )
      (blend
         int
         (list
            (
               (
                  "kBlendDest"
                  "Don't show this material at all; just show the frame buffer"
               )
               ("kBlendSrc" "Don't blend this material at all")
               ("kBlendAdd" "Output is material + frame buffer")
               (
                  "kBlendSrcAlpha"
                  "Output is (material x mat alpha) + (frame buffer x (1 - mat alpha))"
               )
               ("kBlendSrcAlphaAdd" "Output is (material x mat alpha) + frame buffer")
               ("kBlendSubtract" "Output is frame buffer - material")
               ("kBlendMultiply" "Output is frame buffer x material")
               ("kPreMultAlpha" "Output is material + (frame buffer x (1 - mat alpha)")
            )
         )
         (help "How to blend poly into screen")
      )
      (z_mode
         int
         (list
            (
               ("kZModeDisable" "always draw but don't update z-buffer")
               ("kZModeNormal" "draw and update z-buffer if closer than z-buffer")
               (
                  "kZModeTransparent"
                  "draw if closer than or equal z-buffer but don't update z-buffer. Often used with SrcAlpha or Add blending so those objects don't occlude other similar objects"
               )
               ("kZModeForce" "always draw and update z-buffer")
               (
                  "kZModeDecal"
                  "draw and update z-buffer if closer than or equal to z-buffer"
               )
            )
         )
         (help "How to read and write z-buffer")
      )
      (alpha_cut
         bool
         (help "Cut zero alpha pixels from z-buffer")
         (refresh alpha_threshold)
      )
      (alpha_threshold
         int
         (help "Alpha level below which gets cut")
         (range 0 255)
         (read_only {! [alpha_cut]})
      )
      (alpha_write bool (help "Write pixel alpha to screen"))
      (next_pass
         object
         (class Mat)
         (list {$this allowed_next_pass})
         (help "Next material for object")
      )
      (ng
         (indent
            (shader_capabilities
               (indent
                  (point_lights bool (help "Is the Mat lit with point lights?"))
                  (fog bool (help "Is the Mat affected by fog?"))
                  (fade_out bool (help "Is the Mat affected its Environment's fade_out?"))
                  (color_adjust
                     bool
                     (help "Is the Mat affected its Environment's color adjust?")
                  )
               )
               (alias "shader capabilities")
               (help
                  "Defines the capabilities of the shader generated using this material"
               )
            )
            (performance
               (indent
                  (recv_proj_lights
                     bool
                     (alias "receive projected lights")
                     (help
                        "Check this option to allow the material to receive projected lighting"
                     )
                  )
                  (recv_point_cube_tex
                     bool
                     (alias "receive point light cube maps")
                     (help
                        "Check this option to allow the material to receive projected cube maps from a point light"
                     )
                  )
                  (ps3_force_trilinear
                     bool
                     (alias "force trilinear (PS3 only)")
                     (help "Force trilinear filtering of diffuse map (PS3 only)")
                  )
               )
               (help "Performance options for this material")
            )
            (per_pixel_lit
               bool
               (help "Use per-pixel lighting")
               (refresh)
            )
            (emissive_settings
               (indent
                  (emissive_multiplier float (help "Multiplier to apply to emission"))
                  (emissive_map
                     object
                     (class Tex)
                     (help "Map for self illumination")
                  )
               )
               (alias "emissive settings")
               (help "Settings for manipulating the emissive properties of the material")
            )
            (normal_map_settings
               (indent
                  (normal_map
                     object
                     (class Tex)
                     (list {$this allowed_normal_map})
                     (help
                        "Texture map to define lighting normals.
Requires per-pixel lighting."
                     )
                  )
                  (de_normal
                     float
                     (help
                        "Amount to diminish normal map bumpiness, 0 is neutral, 1 is no bumps, -1 exaggerates"
                     )
                     (range -3 1)
                  )
                  (norm_detail_map
                     object
                     (class Tex)
                     (list {$this allowed_normal_map})
                     (help "Detail map texture")
                  )
                  (norm_detail_strength float (help "Strength of the detail map bumpiness"))
                  (norm_detail_tiling float (help "Texture tiling scale for the detail map"))
               )
               (alias "normal map settings")
               (read_only {! [per_pixel_lit]})
               (help
                  "Settings for manipulating the normals of the material.
Requires per-pixel lighting."
               )
            )
            (specular_settings
               (indent
                  (specular_rgb
                     color
                     (alias "specular color")
                     (help
                        "Specular color. If a specular texture is present, this color is multiplied by the specular texture RGB color."
                     )
                  )
                  (specular_power
                     float
                     (alias "specular gloss")
                     (help
                        "This is the maximum level of 'shininess' of the surface; higher numbers represent a shinier surface. If a specular texture is present, this value is multiplied by the specular texture alpha channel."
                     )
                  )
                  (specular_map
                     object
                     (class Tex)
                     (alias "specular map")
                     (refresh specular_rgb)
                     (help
                        "Texture map for specular color (RGB channels) and glossiness (Alpha channel). Requires per-pixel lighting."
                     )
                     (read_only {! [per_pixel_lit]})
                  )
                  (anisotropy
                     float
                     (help "Specular power in downward (strand) direction, 0 to disable")
                     (range 0.00 100.00)
                  )
               )
               (alias "specular settings")
               (help "Settings for manipulating the specular properties of the material")
            )
            (rim_light_settings
               (indent
                  (rim_rgb
                     color
                     (alias "rim color")
                     (help
                        "Rim lighting color. If a rim texture is present, this color is multiplied by the rim texture RGB color."
                     )
                  )
                  (rim_power
                     float
                     (alias "rim power")
                     (help
                        "Rim lighting power. This is the sharpness of the wrap-around effect; higher numbers result in a sharper rim lighting effect. If a rim texture is present, this value is multiplied by the rim texture alpha channel."
                     )
                     (range 0 64)
                  )
                  (rim_map
                     object
                     (class Tex)
                     (alias "rim map")
                     (refresh rim_rgb)
                     (help
                        "Texture map that defines the rim lighting color (in the RGB channels) and power (in the Alpha channel)."
                     )
                  )
                  (rim_light_under
                     bool
                     (alias "rim light under")
                     (help
                        "When enabled, this causes the rim effect to highlight the undersides of meshes"
                     )
                  )
               )
               (alias "rim light settings")
               (read_only {! [per_pixel_lit]})
               (help
                  "Settings for manipulating the rim lighting properties of the material"
               )
            )
            (environ_map_settings
               (indent
                  (environ_map
                     object
                     (class CubeTex)
                     (alias "environ map")
                     (help "Cube texture for reflections")
                  )
                  (environ_map_falloff
                     bool
                     (alias "environ map falloff")
                     (help
                        "Causes the relfection to increase at glancing angles and fade when viewed directly"
                     )
                  )
                  (environ_map_specmask
                     bool
                     (alias "environ map specular mask")
                     (help "Masks the reflection by the specular map alpha channel")
                  )
               )
               (alias "environ map settings")
               (help
                  "Settings for manipulating the environment map properties of the material"
               )
            )
            (refraction_settings
               (indent
                  (refract_enabled
                     bool
                     (alias "refraction enabled")
                     (help
                        "When enabled, this material will refract the screen under the material"
                     )
                     (refresh refract_strength refract_normal_map)
                  )
                  (refract_strength
                     float
                     (alias "refraction strength")
                     (help "The scale of the refraction of the screen under the material.")
                     (range 0 100)
                     (read_only {! [refract_enabled]})
                  )
                  (refract_normal_map
                     object
                     (class Tex)
                     (list {$this allowed_normal_map})
                     (alias "refract normal map")
                     (help
                        "This is a normal map used to distort the screen under the material. If none is specified, the regular normal map will be used."
                     )
                     (read_only {! [refract_enabled]})
                  )
               )
               (alias "refraction settings")
               (help "Settings for applying refraction to the material")
            )
            (custom_shader_settings
               (indent
                  (shader_variation
                     int
                     (list
                        ("kShaderVariationNone" "kShaderVariationSkin" "kShaderVariationHair")
                     )
                     (alias "shader variation")
                     (help
                        "Select a variation on the shader to enable a new range of rendering features."
                     )
                     (refresh specular2_rgb specular2_power)
                  )
                  (specular2_rgb
                     color
                     (read_only {!= [shader_variation] 2})
                     (alias "secondary specular color")
                     (help
                        "Secondary specular color.  Only valid for certain shader variations."
                     )
                  )
                  (specular2_power
                     float
                     (read_only {!= [shader_variation] 2})
                     (alias "secondary specular power")
                     (help
                        "Secondary specular power.  Only valid for certain shader variations."
                     )
                  )
                  (fur
                     object
                     (class Fur)
                     (help "Use fur shader")
                  )
               )
               (alias "custom shader settings")
               (help "Settings for using a custom shader effect.")
            )
            (misc_settings
               (indent
                  (screen_aligned bool (help "Projected material from camera's POV"))
                  (cull bool (help "Cull backface polygons"))
                  (stencil_mode
                     int
                     (list ("kStencilIgnore" "kStencilWrite" "kStencilTest"))
                     (help "How to read and write the stencil buffer")
                  )
               )
               (alias "misc settings")
               (help "Miscellaneous settings.")
            )
         )
         (help "Next-generation graphics settings
Does not apply to particles")
      )
   )
   (views
      (alpha_write (alpha_write {$this get alpha_write}))
      (Diffuse_tex
         (diffuse_tex [diffuse_tex])
         (tex_size_kb
            {if_else [diffuse_tex]
               {[diffuse_tex] size_kb}
               0
            }
         )
      )
      (shader_flags
         (point_lights
            {$this get point_lights}
            {$this set point_lights $milo_value}
         )
         (fog
            {$this get fog}
            {$this set fog $milo_value}
         )
         (fade_out
            {$this get fade_out}
            {$this set fade_out $milo_value}
         )
         (color_adjust
            {$this get color_adjust}
            {$this set color_adjust $milo_value}
         )
      )
      (per_pixel_lit (per_pixel_lit {$this get per_pixel_lit}))
   )
)
(Fur
   (description "Parameters for fur shading, to be set on a material")
   (ext fur)
   (types)
   (editor
      (layers int (help "Number of passes"))
      (thickness float (help "Length of fur"))
      (curvature
         float
         (help "Curvature exponent")
         (range 0 3)
      )
      (shell_out
         float
         (help "Bunch shells towards surface")
         (range 0 1)
      )
      (alpha_falloff
         float
         (help "Bunch opacity towards surface")
         (range 0 1)
      )
      (stretch float (help "Maximum stretch"))
      (slide float (help "Maximum lateral motion"))
      (gravity
         float
         (help "Strength of gravity")
         (range 0 1)
      )
      (fluidity
         float
         (help "Langor of motion")
         (range 0 1)
      )
      (roots_tint color (help "Tint at hair roots"))
      (ends_tint color (help "Tint at hair ends"))
      (fur_detail
         object
         (class Tex)
         (help "Detail map for finer fur.  Only the alpha channel is used.")
      )
      (fur_tiling
         float
         (help
            "Tiling for fur detail map.
UVs of fur_detail are multiplied by this value."
         )
         (range 0.02 100.00)
      )
      (wind
         object
         (class Wind)
         (help "Wind Object, if set, blows on the fur.")
      )
   )
   (init
      {do
         ($ww {find_obj {$this dir} world.wind})
         {if $ww
            {set [wind] $ww}
         }
      }
   )
)
(MatAnim
   (description "MatAnim objects animate material properties.")
   (superclasses Anim)
   (ext mnm)
   (types)
)
(Mesh
   (description "A Mesh object is composed of triangle faces.")
   (superclasses Draw Trans)
   (ext mesh)
   (types
      (configurable_mesh
         (editor
            (left
               float
               (help "left x value")
               (read_only 1)
            )
            (right
               float
               (help "right x value")
               (read_only 1)
            )
            (height
               float
               (help "height z value")
               (read_only 1)
            )
         )
         (left -1)
         (right 1)
         (height 1)
      )
   )
   (editor
      (mat
         object
         (class Mat)
         (help "Material used for rendering the Mesh")
      )
      (geom_owner
         object
         (class Mesh)
         (help "Geometry owner for the mesh")
         (obj_flags no_null)
         (no_test)
         (refresh mutable keep_mesh_data num_verts num_faces volume)
      )
      (mutable
         (struct
            (BIT_kMutableVerts
               bool
               (help "Verts are mutable for this mesh")
               (alias verts)
            )
            (BIT_kMutableFaces
               bool
               (help "Faces are mutable for thie mesh")
               (alias faces)
            )
         )
         (read_only {!= [geom_owner] $this})
         (refresh keep_mesh_data)
      )
      (keep_mesh_data
         bool
         (read_only {|| {> [mutable] 0} {!= [geom_owner] $this}})
         (help
            "Whether or not to keep mesh vertices and faces.  Mutable meshes will always keep this data."
         )
      )
      (num_verts
         int
         (range 0 10000)
         (help "Number of verts in the mesh")
         (read_only {!= [geom_owner] $this})
         (no_test)
      )
      (num_faces
         int
         (range 0 10000)
         (help "Number of faces in the mesh")
         (read_only {!= [geom_owner] $this})
         (no_test)
      )
      (volume
         int
         (list ("kVolumeEmpty" "kVolumeTriangles" "kVolumeBSP" "kVolumeBox"))
         (read_only {!= [geom_owner] $this})
         (help "Volume of the Mesh")
      )
      (has_ao_calculation
         bool
         (read_only 1)
         (help
            "Whether or not this mesh has had ambient occlusion calculated on it."
         )
      )
      (bones
         (array
            (struct
               (bone
                  object
                  (class Trans)
                  (help "Trans of the bone")
               )
            )
         )
         (read_only 1)
      )
      (utilities
         (indent
            (burn_xfm
               script
               (script {$this burn_xfm})
               (help "Burns the verts and resets the transform")
            )
            (build_from_bsp
               script
               (script {$this build_from_bsp})
               (help "Build from BSP")
            )
            (reset_normals
               script
               (script
                  {milo record $this reset_normals}
                  {$this reset_normals}
               )
               (help "Resets the normals for this mesh")
            )
            (tessellate
               script
               (refresh num_faces num_verts)
               (read_only {!= [geom_owner] $this})
               (script
                  {milo record $this tessellate}
                  {$this tessellate}
               )
               (help "Tessellates every face of this mesh")
            )
            (clear_ao
               script
               (refresh has_ao_calculation)
               (read_only {!= [geom_owner] $this})
               (script
                  {milo record $this clear_ao}
                  {$this clear_ao}
               )
               (help "Clears the AO calculation on this mesh")
            )
            (copy_geom_from_owner
               script
               (read_only {== [geom_owner] $this})
               (script {$this copy_geom_from_owner})
               (help "Copies the geometry owner's geometry into this mesh")
            )
         )
      )
   )
   (views
      (size
         ("faces" [num_faces])
         ("verts" [num_verts])
         ("mutable" [mutable BIT_kMutableVerts])
      )
   )
)
(MeshAnim
   (description
      "A MeshAnim object animates Mesh vertices. This should be

        done only when an effect can't be achieved with material

        animation, because animating vertices directly is less efficient."
   )
   (superclasses Anim)
   (ext msnm)
   (types)
)
(Morph
   (description
      "A Morph object animates between multiple Mesh poses using

        weight keyframes. This is an expensive technique, equivalent to a

        MeshAnim for each active pose, so use only when skinning or a

        single MeshAnim isn't enough. For example, we use it for

        viseme-driven facial animation."
   )
   (superclasses Anim)
   (ext morph)
   (types)
   (editor
      (target
         object
         (class Mesh)
         (help "Mesh for the morph to occur")
      )
      (num_poses
         int
         (range 0 100)
         (help "Number of mesh keyframes to blend")
      )
      (intensity float (help "Modifier for weight interpolation"))
      (normals
         bool
         (help
            "Interpolates the normals if set to true, otherwise normals are not affected."
         )
      )
      (spline bool (help "Smooths the interpolation of the morphing."))
   )
)
(Movie
   (description
      "A Movie object animates a compressed video through a

        texture. It works on Xbox and PS2 now, soon GC."
   )
   (superclasses Anim)
   (ext mov)
   (types)
   (editor
      (movie_file
         file
         (help "File - extension is automatically converted to platform")
      )
      (stream bool (help "Stream the file for this movie?"))
      (loop bool (help "Loop this movie?"))
      (tex
         object
         (class Tex)
         (help "Texture to animate.")
      )
   )
)
(MultiMesh
   (description
      "A MultiMesh object draws a simple Mesh in many places

        quickly. Create a multimesh by instancing the base mesh lots of

        times in Max, then using the multiobject wizard."
   )
   (superclasses Draw)
   (ext mm)
   (types)
)
(ParticleSys
   (description
      "A ParticleSys object generates, animates, and draws large

        numbers of similar sprites. Currently particles are rendered only

        as points on the PC."
   )
   (superclasses Poll Anim Draw Trans)
   (ext part)
   (types)
   (views (size ("max_particles" {$this max_particles})))
   (editor
      (mat
         object
         (class Mat)
         (help "material for particle system")
      )
      (max_parts
         int
         (range 0 3072)
         (help "maximum number of particles")
      )
      (screen_aspect float (help "Ratio of screen height to width"))
      (emit_rate
         (vector
            (x float)
            (y float)
         )
         (help "Frame range to generate particles.")
      )
      (life
         (vector
            (x float)
            (y float)
         )
         (help "Frame range of particle life.")
      )
      (speed
         (vector
            (x float)
            (y float)
         )
         (help "Speed range, in world units per frame, of particles.")
      )
      (drag
         float
         (range 0 1)
         (read_only {! [fancy]})
      )
      (start_size
         (vector
            (x float)
            (y float)
         )
         (help "Size range, in world units, of particles.")
      )
      (delta_size
         (vector
            (x float)
            (y float)
         )
         (help "Change in size of particles, in world units.")
      )
      (grow_ratio
         float
         (range 0 1)
         (read_only {! [fancy]})
      )
      (shrink_ratio
         float
         (range 0 1)
         (read_only {! [fancy]})
      )
      (force_dir
         (vector
            (x float)
            (y float)
            (z float)
         )
         (help
            "Force direction in world coordinates, in units per frame added to each particle's velocity. Can be used for gravity."
         )
      )
      (bounce
         object
         (class Trans)
         (help
            "Specify a collide plane to reflect particles. Used to bounce particles off surfaces."
         )
      )
      (start_color_low
         color
         (help "Random color ranges for start and end color of particles.")
      )
      (start_alpha_low
         float
         (range 0 1)
         (help "Random color ranges for start and end color of particles.")
      )
      (start_color_high
         color
         (help "Random color ranges for start and end color of particles.")
      )
      (start_alpha_high
         float
         (range 0 1)
         (help "Random color ranges for start and end color of particles.")
      )
      (mid_color_ratio
         float
         (range 0 1)
         (read_only {! [fancy]})
      )
      (mid_color_low color (read_only {! [fancy]}))
      (mid_alpha_low
         float
         (range 0 1)
         (read_only {! [fancy]})
      )
      (mid_color_high color (read_only {! [fancy]}))
      (mid_alpha_high
         float
         (range 0 1)
         (read_only {! [fancy]})
      )
      (end_color_low
         color
         (help "Random color ranges for start and end color of particles.")
      )
      (end_alpha_low
         float
         (range 0 1)
         (help "Random color ranges for start and end color of particles.")
      )
      (end_color_high
         color
         (help "Random color ranges for start and end color of particles.")
      )
      (end_alpha_high
         float
         (range 0 1)
         (help "Random color ranges for start and end color of particles.")
      )
      (preserve bool)
      (emitter
         (indent
            (mesh_emitter
               object
               (class Mesh)
               (refresh box_extent_1 box_extent_2 pitch yaw)
            )
            (box_extent_1
               (vector
                  (x float)
                  (y float)
                  (z float)
               )
               (read_only {!= [mesh_emitter] ""})
               (help
                  "Min point and max point, in object coordinates, of box region that particles are emitted from."
               )
            )
            (box_extent_2
               (vector
                  (x float)
                  (y float)
                  (z float)
               )
               (read_only {!= [mesh_emitter] ""})
               (help
                  "Min point and max point, in object coordinates, of box region that particles are emitted from."
               )
            )
            (pitch
               (vector
                  (x float)
                  (y float)
               )
               (read_only {!= [mesh_emitter] ""})
            )
            (yaw
               (vector
                  (x float)
                  (y float)
               )
               (read_only {!= [mesh_emitter] ""})
            )
            (relative_parent object (class Trans))
            (relative_motion float)
            (subsamples int)
            (frame_drive bool)
            (pre_spawn bool)
            (pause_offscreen bool)
         )
      )
      (max_burst
         int
         (range 0 10000)
         (refresh burst_parameters)
      )
      (burst_parameters
         (indent
            (time_between
               (vector
                  (x float)
                  (y float)
               )
            )
            (peak_rate
               (vector
                  (x float)
                  (y float)
               )
            )
            (duration
               (vector
                  (x float)
                  (y float)
               )
            )
         )
         (read_only {<= [max_burst] 0})
      )
      (fancy
         bool
         (refresh
            grow_ratio
            shrink_ratio
            drag
            mid_color_ratio
            mid_color_low
            mid_alpha_low
            mid_color_high
            mid_alpha_high
            bubble
            bubble_parameters
            spin
            spin_parameters
            velocity_align
            velocity_align_parameters
         )
      )
      (bubble
         bool
         (refresh bubble_parameters)
         (read_only {! [fancy]})
      )
      (bubble_parameters
         (indent
            (bubble_period
               (vector
                  (x float)
                  (y float)
               )
            )
            (bubble_size
               (vector
                  (x float)
                  (y float)
               )
            )
         )
         (read_only {|| {! [bubble]} {! [fancy]}})
      )
      (spin
         bool
         (refresh spin_parameters velocity_align)
         (read_only {|| [velocity_align] {! [fancy]}})
      )
      (spin_parameters
         (indent
            (rpm
               (vector
                  (x float)
                  (y float)
               )
            )
            (rpm_drag float (range 0 1))
            (random_direction bool)
            (start_offset
               (vector
                  (x float)
                  (y float)
               )
            )
            (end_offset
               (vector
                  (x float)
                  (y float)
               )
            )
         )
         (read_only {|| {! [spin]} {! [fancy]}})
      )
      (velocity_align
         bool
         (refresh velocity_align_parameters spin)
         (read_only {|| {! [fancy]} [spin]})
      )
      (velocity_align_parameters
         (indent
            (stretch_with_velocity
               bool
               (refresh stretch_scale constant_area perspective)
            )
            (stretch_scale
               float
               (read_only
                  {|| {! [velocity_align]} {|| {! [stretch_with_velocity]} {! [fancy]}}}
               )
            )
            (constant_area
               bool
               (read_only
                  {|| {! [velocity_align]} {|| {! [stretch_with_velocity]} {! [fancy]}}}
               )
            )
            (perspective
               bool
               (read_only
                  {|| {! [velocity_align]} {|| {! [stretch_with_velocity]} {! [fancy]}}}
               )
            )
         )
         (read_only {|| {! [velocity_align]} {! [fancy]}})
      )
   )
)
(ParticleSysAnim
   (description "Object that animates Particle System properties.")
   (superclasses Anim)
   (ext panim)
   (types)
)
(ScreenMask
   (description "Draws full screen quad with material and color.")
   (superclasses Draw)
   (ext mask)
   (types)
   (editor
      (mat
         object
         (class Mat)
         (help "Material to draw on full screen quad")
      )
      (color color (help "Color of full screen quad"))
      (alpha float (help "Translucency of full screen quad"))
      (screen_rect
         (struct
            (x float)
            (y float)
            (w float)
            (h float)
         )
         (help
            "The area of the screen in normalized coordinates (0 to 1) to draw into."
         )
      )
      (use_cam_rect
         bool
         (help "Use current camera screen_rect instead of the full screen")
      )
   )
)
(TexMovie
   (description "Renders bink movie to a texture.")
   (superclasses Draw Poll)
   (ext tmov)
   (types
      (shell
         (change_file
            {if_else {exists game}
               {random_elem ("videos/shell1.bik" "videos/shell2.bik" "videos/shell3.bik")}
               kDataUnhandled
            }
         )
      )
   )
   (editor
      (output_texture
         object
         (class Tex)
         (help "Texture to write to")
         (list {$this get_render_textures})
         (pre_sync
            {if [output_texture]
               {milo record [output_texture] reset_tex_movie}
            }
         )
         (post_sync
            {if [output_texture]
               {milo record [output_texture] set_tex_movie}
               {[output_texture] set_rendered}
            }
         )
      )
      (bink_movie_file
         file
         (ext "Bink Files" bik)
         (help "Bink File")
      )
      (loop bool (help "Loop this movie?"))
   )
)
(RndDir
   (description "A RndDir specially tracks drawable and animatable objects.")
   (editor
      (environ object (class Environ))
      (polls
         (array object (class Poll))
         (help "List of all the polls")
         (read_only 1)
         (no_test)
      )
      (draws
         (array object (class Draw))
         (help "List of all the draws")
         (read_only 1)
         (no_test)
      )
      (test_event
         symbol
         (list {$this supported_events})
         (help "Test event")
         (no_test)
         (no_cdb)
      )
      (fire_test
         script
         (script {handle ($this [test_event])})
         (help "Fire test event")
      )
   )
   (superclasses ObjectDir Anim Draw Trans Poll MsgSource)
   (types
      (world_fx
         (editor
            (start
               script
               (script {$this start})
               (help "Start animation")
            )
            (stop
               script
               (script {$this stop})
               (help "Stop animation")
            )
         )
         (enter {$this stop})
         (exit {$this stop})
         (start
            {$this iterate ParticleSys $parts {$parts exit}}
            {$this animate (range 0 1000000015047466200000000000000.00)}
            {$this set_showing 1}
         )
         (stop
            {$this iterate ParticleSys $parts {$parts exit}}
            {$this stop_animation}
            {$this set_showing 0}
         )
      )
      (trigger_on_enter
         (editor
            (trig
               object
               (class EventTrigger)
               (help "the trigger to fire when this dir enters")
            )
         )
         (enter
            {if [trig]
               {[trig] trigger}
            }
         )
         (trig)
      )
      (makeup_meshes
         (editor
            (import_makeup
               script
               (script
                  {do
                     ($frac {/ 1.00 10.00})
                     ($pad 4)
                     {milo pack_textures
                        makeup.mat
                        "char/main/shared/*male_makeup*.bmp"
                        $pad
                        $frac
                     }
                     {milo update_objects}
                     {if {exists makeup.mat}
                        {milo edit {makeup.mat get diffuse_tex}}
                     }
                  }
               )
               (help
                  "Imports the makeup textures into makeup.tex (char/main/shared/output_makeup.bmp).  Don't forget to check it in afterwards"
               )
            )
         )
         (on_milo_loaded {milo edit $this})
      )
      (skin_proxy
         (editor
            (color color)
            (tattoo_overlay_color color)
            (mat object (class Mat))
            (tattoo_overlay_mat object (class Mat))
            (tattoo_overlay_mat2 object (class Mat))
            (tattoo_overlay_mat3 object (class Mat))
            (update script (script {$this update}))
         )
         (mat)
         (tattoo_overlay_mat)
         (tattoo_overlay_mat2)
         (tattoo_overlay_mat3)
         (color {pack_color 1 1 1})
         (tattoo_overlay_color {pack_color 1 1 1})
         (set_color
            ($color $overlay)
            {if_else [mat]
               {[mat] set color $color}
               {notify {path_name $this} " has no mat property set on it"}
            }
            {if [tattoo_overlay_mat]
               {[tattoo_overlay_mat] set color $overlay}
            }
            {if [tattoo_overlay_mat2]
               {[tattoo_overlay_mat2] set color $overlay}
            }
            {if [tattoo_overlay_mat3]
               {[tattoo_overlay_mat3] set color $overlay}
            }
         )
         (update {$this set_color [color] [tattoo_overlay_color]})
      )
      (chars VENUE_SETUP_CHARACTERS (enter VENUE_SETUP_CHARACTERS_ENTER))
      (lighting VENUE_SETUP_CHARACTERS (enter VENUE_SETUP_CHARACTERS_ENTER))
      (band_name_label
         (enter
            {if {exists game}
               {$this iterate
                  BandLabel
                  $lbl
                  {if {has_substr {$lbl name} "bandname"}
                     {if {&& {exists tour} {tour band}}
                        {$lbl set_localized {gamemode get band_name}}
                     }
                  }
               }
               {if {&& {exists tour} {tour band}}
                  {set $logopatch {gamemode get band_logo}}
                  {unless $logopatch
                     {if {&& {exists bandlogo_default.tex} {exists bandlogo_target.tex}}
                        {bandlogo_target.tex iterate_refs
                           $ref
                           {$ref set diffuse_tex bandlogo_default.tex}
                        }
                     }
                  }
               }
            }
         )
      )
      (color_passthrough
         (editor
            (color1 color)
            (color2 color)
            (color3 color)
            (update script (script {$this update}))
         )
         (color1 {pack_color 1 1 1} proxy_save)
         (color2 {pack_color 1 1 1} proxy_save)
         (color3 {pack_color 1 1 1} proxy_save)
         (enter {$this update})
         (update
            {if {exists mat01.mat}
               {mat01.mat set color [color1]}
            }
            {if {exists mat02.mat}
               {mat02.mat set color [color2]}
            }
            {if {exists mat03.mat}
               {mat03.mat set color [color3]}
            }
            {if {exists part_mat02.mat}
               {part_mat02.mat set color [color2]}
            }
            {if {exists part_mat03.mat}
               {part_mat03.mat set color [color3]}
            }
         )
         (trigger
            ($event)
            {handle ($event trigger)}
         )
      )
      (failed_feedback
         (editor
            (reset script (script {$this reset}))
            (failed script (script {$this failed 2}))
            (saved script (script {$this saved}))
            (disconnected script (script {$this disconnected}))
            (no_saving bool (help "failed player can't be saved"))
         )
         (reset
            {reset.trig trigger}
            {strike1.mesh set showing 0}
            {strike2.mesh set showing 0}
            {strike3.mesh set showing 0}
            {strikes_bg.grp set showing 0}
            {strikes.grp set showing 0}
         )
         (no_saving 0)
         (failed
            ($strikes)
            {reset.trig trigger}
            {if_else [no_saving]
               {do
                  {strikes.grp set_showing 0}
                  {strikes_bg.grp set_showing 0}
               }
               {do
                  {if {> $strikes 3}
                     {set $strikes 3}
                  }
                  {foreach_int $i 1 {+ $strikes 1}
                     {{object
                           {sprint
                              "strike"
                              $i
                              ".mesh"
                           }
                        } set_showing
                        1
                     }
                  }
                  {strikes_bg.grp set_showing 1}
               }
            }
            {failed.lbl set text_token failed_feedback_failed}
            {bfb_failed.trig trigger}
         )
         (disconnected
            {reset.trig trigger}
            {bfb_failed.trig trigger}
            {strikes_bg.grp set_showing 0}
            {strikes.grp set_showing 0}
            {failed.lbl set text_token failed_feedback_disconnected}
         )
         (saved
            {bfb_failed_end.trig trigger}
            {script_task 0 (delay 0.40) (script {bfb_saved.trig trigger})}
         )
      )
      (gem_smasher
         (editor
            (reset script (script {$this reset}))
            (color
               symbol
               (list (green red yellow blue orange purple))
               (post_sync {$this set_color [color]})
            )
            (glow bool (post_sync {$this set_glow [glow]}))
            (in_danger bool (post_sync {$this set_danger [in_danger]}))
            (label string (post_sync {$this set_label [label]}))
            (do_hit
               script
               (script {$this hit})
               (read_only {! {exists hit.trig}})
            )
            (do_hit_bonus
               script
               (script {$this hit_bonus})
               (read_only {! {exists hit_bonus.trig}})
            )
            (do_big_rock_hit
               script
               (script {$this coda_hit})
               (read_only {! {exists big_rock_hit.trig}})
            )
            (do_hit_fill script (script {$this hit_fill_vel [test_velocity]}))
            (do_hit_drum
               script
               (script {$this hit_drum})
               (read_only {! {exists hit_drums.trig}})
            )
            (do_hit_cymbal
               script
               (script {$this hit_cymbal})
               (read_only {! {exists hit_cymbals.trig}})
            )
            (do_hit_drum_bonus
               script
               (script {$this hit_drum_bonus})
               (read_only {! {exists hit_drums_bonus.trig}})
            )
            (do_hit_cymbal_bonus
               script
               (script {$this hit_cymbal_bonus})
               (read_only {! {exists hit_cymbals_bonus.trig}})
            )
            (do_drumfill_complete_hit
               script
               (script {$this drum_fill_complete})
               (read_only {! {exists hit_drums.trig}})
            )
            (do_hit_chord
               script
               (script {$this hit_chord})
               (read_only {! {exists hit_chord.trig}})
            )
            (do_miss script (script {$this miss}))
            (burn script (script {$this burn}))
            (burn_chord
               script
               (script {$this burn_chord})
               (read_only {! {exists burn_chord.trig}})
            )
            (big_rock_burn script (script {$this coda_burn}))
            (burn_bonus script (script {$this burn_bonus}))
            (stop_burn script (script {$this stop_burn}))
            (test_velocity
               int
               (range 0 10)
               (help "velocity of fill hit from soft to loud")
            )
            (velocity_fill_triggers
               (array object (class EventTrigger))
               (help "fill hits by velocity from lightest to hardest")
            )
            (colored_particle_launchers
               (array object (class PartLauncher particle_launcher))
               (help
                  "list of all particle launchers whose color should change depending on the color of the smasher"
               )
            )
         )
         (glow 0)
         (in_danger 0)
         (label "")
         (color green proxy_save)
         (burning 0)
         (test_velocity 0)
         (velocity_fill_triggers ())
         (colored_particle_launchers ())
         (last_set_color)
         (reset
            {$this set_color [color]}
            {$this reset_triggers}
            {if {exists stop_burn.trig}
               {set [burning] 1}
               {$this stop_burn}
            }
            {reset.trig trigger}
            {if {exists LOD.anim}
               {LOD.anim set_frame $track_LOD}
            }
         )
         (reset_triggers
            {do
               ($trigs
                  (big_rock_burn.trig
                     big_rock_burn_chord.trig
                     big_rock_hit.trig
                     big_rock_hit_chord.trig
                     burn.trig
                     burn_bonus.trig
                     burn_chord.trig
                     hit.trig
                     hit_bonus.trig
                     hit_chord.trig
                     hit_cymbals.trig
                     hit_cymbals_bonus.trig
                     hit_drums.trig
                     hit_drums_bonus.trig
                     hit_fill.trig
                     hit_fill_hard.trig
                     hit_fill_light.trig
                     hit_fill_medium.trig
                     miss.trig
                     stop_burn.trig
                     strum.trig
                  )
               )
               {foreach $trig $trigs
                  {if {exists $trig}
                     {$trig basic_cleanup}
                  }
               }
            }
         )
         (reset_particles
            {$this iterate_self
               (Object particle_launcher)
               $launcher
               {do
                  ($part {$launcher get part})
                  {if $part
                     {$part clear_all_particles}
                  }
               }
            }
         )
         (set_color
            ($in_color)
            {if {!= [last_set_color] $in_color}
               {do
                  ($slot)
                  ($frame)
                  {set [color] $in_color}
                  {switch $in_color
                     (green {set $slot 0})
                     (red {set $slot 1})
                     (yellow {set $slot 2})
                     (blue {set $slot 3})
                     (orange {set $slot 4})
                     (purple {set $slot 5})
                  }
                  {set $frame $slot}
                  {if {exists particle_slot_colors.anim}
                     {particle_slot_colors.anim set_frame $frame}
                  }
                  {foreach $launcher [colored_particle_launchers]
                     {$this set_launcher_color $launcher}
                  }
               }
               {set [last_set_color] $in_color}
            }
         )
         (set_lefty
            ($in_val)
            {if_else $in_val
               {if {exists toggle_lefty.trig}
                  {toggle_lefty.trig trigger}
               }
               {if {exists toggle_righty.trig}
                  {toggle_righty.trig trigger}
               }
            }
            {$this reset_particles}
         )
         (set_launcher_color
            ($launcher)
            {do
               ($part {$launcher get part})
               {set $part {$this find {$part name}}}
               {$launcher set override_start_color 1}
               {$launcher set start_color {$part get start_color_high}}
               {$launcher set start_alpha {$part get start_alpha_high}}
               {$launcher set override_mid_color 1}
               {$launcher set mid_color {$part get mid_color_high}}
               {$launcher set mid_alpha {$part get mid_alpha_high}}
               {$launcher set override_end_color 1}
               {$launcher set end_color {$part get end_color_high}}
               {$launcher set end_alpha {$part get end_alpha_high}}
            }
         )
         (set_glow
            ($in_state)
            {set [glow] $in_state}
            {if {exists gem_smasher_glow.mesh}
               {gem_smasher_glow.mesh set_showing [glow]}
            }
         )
         (set_label ($in_val))
         (hit {hit.trig trigger})
         (hit_cymbal {hit_cymbals.trig trigger})
         (hit_drum {hit_drums.trig trigger})
         (hit_drum_bonus {hit_drums_bonus.trig trigger})
         (hit_cymbal_bonus {hit_cymbals_bonus.trig trigger})
         (hit_chord {hit_chord.trig trigger})
         (coda_hit {big_rock_hit.trig trigger})
         (coda_hit_chord {big_rock_hit_chord.trig trigger})
         (hit_bonus {hit_bonus.trig trigger})
         (hit_fill_vel
            ($velocity)
            {if {== $velocity 0}
               {set $velocity 6}
            }
            {if_else {< $velocity {size [velocity_fill_triggers]}}
               {do
                  ($trig {elem [velocity_fill_triggers] $velocity})
                  {if_else {!= $trig}
                     {$trig trigger}
                     {hit_fill.trig trigger}
                  }
               }
               {hit_fill.trig trigger}
            }
         )
         (rg_strum {strum.trig trigger})
         (miss
            {miss.trig trigger}
            {$this stop_burn}
         )
         (burn
            {burn.trig trigger}
            {set [burning] 1}
         )
         (burn_chord
            {burn_chord.trig trigger}
            {set [burning] 1}
         )
         (coda_burn
            {big_rock_burn.trig trigger}
            {set [burning] 1}
         )
         (coda_burn_chord
            {big_rock_burn_chord.trig trigger}
            {set [burning] 1}
         )
         (burn_bonus
            {burn_bonus.trig trigger}
            {set [burning] 1}
         )
         (stop_burn
            {if [burning]
               {stop_burn.trig trigger}
               {set [burning] 0}
            }
         )
         (drum_fill_complete {hit_drums.trig trigger})
         (set_danger ($in_state))
      )
      (mtv_overlay
         (editor
            (show
               script
               (script
                  {if {exists fade.anim}
                     {fade.anim set_frame 50}
                  }
               )
            )
            (hide
               script
               (script
                  {if {exists fade.anim}
                     {fade.anim set_frame 0}
                  }
               )
            )
            (play
               script
               (script
                  {if {exists fade.anim}
                     {fade.anim animate}
                  }
               )
            )
         )
         (enter
            {if {exists game}
               {game add_sink $this (intro_end)}
               {$this setup_text}
               {if {exists fade.anim}
                  {fade.anim set_frame 0}
               }
            }
         )
         (exit
            {if {exists game}
               {game remove_sink $this}
            }
         )
         (intro_end
            {if {&& {exists game} {gamemode get show_mtv_overlay} {exists fade.anim}}
               {$this setup_text}
               {if_else {gamemode is_tour}
                  {script_task 0 (delay 7.00) (script {fade.anim animate})}
                  {fade.anim animate}
               }
            }
         )
         (setup_text
            {do
               ($short_name {meta_performer song})
               {if {exists song.lbl}
                  {song.lbl set_song_name $short_name}
               }
               {if {exists artist.lbl}
                  {artist.lbl set_artist_name_from_shortname $short_name}
               }
            }
         )
      )
      (phrase_meter
         (editor
            (reset script (script {$this reset}))
            (test_value float (post_sync {$this set_value [test_value]}))
            (flare script (script {$this flare}))
         )
         (test_value 0)
         (reset {reset.trig trigger})
         (flare {flare.trig trigger})
         (set_value
            ($in_val)
            {meter_anim.grp set_frame $in_val}
         )
         (set_percent
            ($in_val)
            {meter_color_anim.grp set_frame $in_val}
         )
         (set_cap
            ($in_val)
            {meter_cap_anim.grp set_frame $in_val}
         )
      )
      (player_feedback
         (editor
            (reset script (script {$this reset}))
            (start_solo script (script {$this start_solo}))
            (end_solo script (script {$this end_solo}))
            (test_val int (post_sync {$this set_percent [test_val]}))
            (test_result
               symbol
               (list
                  (failed_solo
                     bad_solo
                     okay_solo
                     solid_solo
                     great_solo
                     awesome_solo
                     perfect_solo
                     vox_lousy
                     vox_poor
                     vox_ok
                     vox_good
                     vox_great
                  )
               )
               (post_sync {$this set_result [test_result]})
            )
            (start_super_streak script (script {$this start_super_streak}))
            (end_super_streak script (script {$this end_super_streak}))
            (show_feedback script (script {$this feedback_on}))
            (hide_feedback script (script {$this feedback_off}))
         )
         (test_val 0)
         (test_result vox_lousy)
         (in_solo 0)
         (hide_feedback 0)
         (feedback_on
            {if [in_solo]
               {solo_start.trig trigger}
            }
            {set [hide_feedback] 0}
         )
         (feedback_off
            {reset.trig trigger}
            {set [hide_feedback] 1}
         )
         (start_solo
            {if {! [hide_feedback]}
               {solo_start.trig trigger}
            }
            {$this set_percent 0}
            {set [in_solo] 1}
         )
         (end_solo
            {if {! [hide_feedback]}
               {if [in_solo]
                  {solo_end.trig trigger}
               }
            }
            {set [in_solo] 0}
         )
         (start_super_streak
            {if {! [hide_feedback]}
               {super_streak_start.trig trigger}
               {script_task 0 (delay 4.00) (script {$this end_super_streak})}
            }
         )
         (end_super_streak
            {if {! [hide_feedback]}
               {super_streak_end.trig trigger}
            }
         )
         (reset
            {reset.trig trigger}
            {set [in_solo] 0}
            {set [hide_feedback] 0}
         )
         (set_result
            ($sym)
            {solo_rating.lbl set text_token $sym}
         )
         (set_award
            ($in_val)
            {score.lbl set_int $in_val 1}
         )
         (solo_end
            ($sym $in_val)
            {$this set_result $sym}
            {$this set_award $in_val}
            {$this end_solo}
         )
         (set_percent
            ($in_val)
            {do
               ($val {int $in_val})
               {solo_percent.lbl set_token_fmt solo_percent_fmt $val}
            }
         )
         (set_fade
            ($fade)
            {environ.env set fade_max $fade}
            {bass_super_streak.lbl set alpha $fade}
         )
      )
      (endgame_feedback
         (editor
            (end_game_start
               script
               (script {$this end_game_start_inst [test_instrument]})
            )
            (end_game_end script (script {$this end_game_end}))
            (test_instrument symbol (list (guitar bass drum vocals)) no_test)
         )
         (test_instrument guitar)
         (end_game_start_inst
            ($instrument)
            {switch $instrument
               (guitar {end_game_start_guitar.trig trigger})
               (bass {end_game_start_guitar.trig trigger})
               (drum {end_game_start_drum.trig trigger})
               (vocals {end_game_start_vox.trig trigger})
            }
         )
         (end_game_end {end_game_end.trig trigger})
      )
      (player_intro
         (editor
            (reset script (script {$this reset}))
            (bass_intro
               script
               (script
                  {$this set_icon "B"}
                  {$this intro}
               )
            )
            (drum_intro
               script
               (script
                  {$this set_icon "D"}
                  {$this intro}
               )
            )
            (guitar_intro
               script
               (script
                  {$this set_icon "G"}
                  {$this intro}
               )
            )
            (vocals_intro
               script
               (script
                  {$this set_icon "V"}
                  {$this intro}
               )
            )
            (talk script (script {$this talk}))
            (talk_stop script (script {$this talk_stop}))
            (show script (script {$this icon_show}))
            (hide script (script {$this icon_hide}))
            (player_name string (post_sync {$this setup_player "B" [player_name]}))
         )
         (player_name "")
         (enabled 1)
         (reset {reset.trig trigger})
         (intro {$this icon_trigger intro.trig})
         (intro_remote {$this icon_trigger intro_remote.trig})
         (icon_show {$this icon_trigger icon_show.trig})
         (icon_hide {$this icon_trigger icon_hide.trig})
         (icon_trigger
            ($trig)
            {if
               {&&
                  [enabled]
                  {! {&& {exists gamemode} {gamemode get disable_player_intro}}}
               }
               {script_task 2 (delay 0.01) (script {$trig trigger})}
            }
         )
         (set_icon
            ($icon)
            {icon.lbl set icon $icon}
         )
         (set_talking
            ($talking)
            {if_else $talking
               {$this talk}
               {$this talk_stop}
            }
         )
         (set_enabled
            ($enabled)
            {set [enabled] $enabled}
         )
         (talk {talk.trig trigger})
         (talk_stop {talk_stop.trig trigger})
         (hide {hide.trig trigger})
      )
      (popup_help
         (editor
            (reset script (script {$this reset}))
            (hide script (script {$this help [last_key] 0 hide guitar}))
            (kick script (script {$this help kick 1 drum drum}))
            (deploy_guitar script (script {$this help deploy 1 guitar guitar}))
            (deploy_bass script (script {$this help deploy 1 bass bass}))
            (deploy_vocals script (script {$this help deploy 1 vocals vocals}))
            (drum_fill script (script {$this help drum_fill 1 drum drum}))
            (bre_guitar script (script {$this help rock_ending 1 guitar guitar}))
            (bre_drum script (script {$this help rock_ending 1 drum drum}))
            (tambourine script (script {$this help tambourine 1 vocal vocals}))
            (tamb_note script (script {$this tambourine_note}))
            (dts_guitar script (script {$this help deploy_to_save 1 guitar guitar}))
            (dts_bass script (script {$this help deploy_to_save 1 bass bass}))
            (dts_drum script (script {$this help deploy_to_save 1 drum drum}))
            (dts_vocals script (script {$this help deploy_to_save 1 vocals vocals}))
            (dts_real_guitar
               script
               (script {$this help deploy_to_save 1 real_guitar real_guitar})
            )
            (intro_five_lane_keys script (script {$this help intro 1 keys keys}))
         )
         (last_key none)
         (active 0 no_save)
         (swing_active 0 no_save)
         (popup_help_disabled 0)
         (is_popup_help_disabled
            {||
               [popup_help_disabled]
               {&&
                  {exists modifier_mgr}
                  {! {modifier_mgr is_modifier_active enable_popup_help}}
               }
            }
         )
         (help
            ($key $state $instrument $controller_type)
            {if_else $state
               {do
                  ($has_help 1)
                  {switch $key
                     (kick
                        {if {! {$this is_popup_help_disabled}}
                           {set [last_key] kick}
                           {$this kick}
                        }
                     )
                     (deploy
                        {if {! {$this is_popup_help_disabled}}
                           {$this deploy_to_save_impl 0 controller_type}
                        }
                     )
                     (drum_fill
                        {if {! {$this is_popup_help_disabled}}
                           {set [last_key] fill}
                           {$this drum_fill}
                        }
                     )
                     (fret_strum
                        {if {! {$this is_popup_help_disabled}}
                           {set [last_key] fret_strum}
                           {$this fret_strum}
                        }
                     )
                     (hold_note
                        {if {! {$this is_popup_help_disabled}}
                           {set [last_key] hold_note}
                           {$this hold_note}
                        }
                     )
                     (rock_ending
                        {if {! {$this is_popup_help_disabled}}
                           {set [last_key] rock_ending}
                           {if_else {== $instrument drum}
                              {$this bre_drums}
                              {$this bre_guitar}
                           }
                        }
                     )
                     (tambourine
                        {if {! {$this is_popup_help_disabled}}
                           {set [last_key] tambourine}
                           {$this tambourine}
                        }
                     )
                     (deploy_to_save {$this deploy_to_save_impl 0 $controller_type})
                     (deploy_to_save_lefty {$this deploy_to_save_impl 1 $controller_type})
                     (intro
                        {if_else {&& {== $instrument keys} {== $controller_type keys}}
                           {do
                              {set [last_key] intro}
                              {$this intro_five_lane_keys}
                           }
                           {set $has_help 0}
                        }
                     )
                     (swing_at_gems {$this swing_at_gems_impl})
                  }
                  {&& $has_help {! {$this is_popup_help_disabled}}}
               }
               {do
                  {if {|| {== $key deploy_to_save} {== $key deploy_to_save_lefty}}
                     {set [active] 0}
                     {set $key deploy_to_save}
                  }
                  {if {== $key swing_at_gems}
                     {set [swing_active] 0}
                  }
                  {if {== $key [last_key]}
                     {do
                        ($task_name)
                        {set $task_name {sprint $instrument "_deploy_help"}}
                        {if {exists $task_name}
                           {delete $task_name}
                        }
                     }
                     {set [last_key] "none"}
                     {$this hide}
                  }
               }
            }
         )
         (deploy_to_save_impl
            ($lefty $controller_type)
            {if {! {$this is_popup_help_disabled}}
               {if {! [active]}
                  {set [last_key] deploy_to_save}
                  {if_else $lefty
                     {switch $controller_type
                        (guitar {lefty_deploy_guitar.trig trigger})
                        (bass {lefty_deploy_bass.trig trigger})
                        (drum {lefty_deploy_drum.trig trigger})
                        (vocals {deploy_vocals.trig trigger})
                        (keys {lefty_deploy_keys.trig trigger})
                        (real_guitar {lefty_deploy_guitar.trig trigger})
                        (real_bass {lefty_deploy_bass.trig trigger})
                     }
                     {switch $controller_type
                        (guitar {deploy_guitar.trig trigger})
                        (bass {deploy_bass.trig trigger})
                        (drum {deploy_drum.trig trigger})
                        (vocals {deploy_vocals.trig trigger})
                        (keys {deploy_keys.trig trigger})
                        (real_guitar {deploy_guitar.trig trigger})
                        (real_bass {deploy_bass.trig trigger})
                     }
                  }
                  {deploy_to_save.trig trigger}
                  {set [active] 1}
               }
            }
         )
         (swing_at_gems_impl
            {if {! {$this is_popup_help_disabled}}
               {if {! [swing_active]}
                  {do
                     ($trig)
                     {switch $instrument
                        (real_guitar {set $trig proguitar_strum.trig})
                        (real_bass {set $trig proguitar_strum.trig})
                        (keys {set $trig keys_swing.trig})
                     }
                     {if {!= $trig}
                        {set [last_key] swing_at_gems}
                        {$trig trigger}
                        {show.trig trigger}
                        {set [swing_active] 1}
                     }
                  }
               }
            }
         )
         (reset
            {$this help [last_key] 0 drum drum}
            {$this help [last_key] 0 guitar guitar}
            {$this help [last_key] 0 vocals vocals}
            {$this help [last_key] 0 bass bass}
            {$this help [last_key] 0 keys keys}
            {$this help [last_key] 0 real_guitar real_guitar}
            {reset.trig trigger}
            {set [active] 0}
         )
         (hide {hide.trig trigger})
         (kick_note
            {if {== [last_key] kick}
               {kick.trig trigger}
            }
         )
         (bre_drums
            {show.trig trigger}
            {bre_drum.trig trigger}
         )
         (bre_guitar
            {show.trig trigger}
            {bre_guitar.trig trigger}
         )
         (bre_real_guitar {$this bre_guitar})
         (drum_fill
            {show.trig trigger}
            {drum_fill.trig trigger}
         )
         (kick
            {show.trig trigger}
            {kick.trig trigger}
         )
         (tilt
            {show.trig trigger}
            {deploy_guitar.trig trigger}
            {$this hide_delay 4}
         )
         (scream
            {show.trig trigger}
            {deploy_vocals.trig trigger}
         )
         (tambourine
            {show.trig trigger}
            {tambourine.trig trigger}
         )
         (tambourine_note
            {if {== [last_key] tambourine}
               {tamb_note.trig trigger}
            }
         )
         (intro_five_lane_keys
            {intro.lbl set text_token popup_help_intro_keys}
            {intro.trig trigger}
            {intro_five_lane_keys.trig trigger}
         )
         (hold_note
            {show.trig trigger}
            {proguitar_fret.trig trigger}
            {$this hide_delay 4}
         )
         (hide_delay
            ($time)
            {script_task 1 (delay $time) (script {$this hide})}
         )
      )
      (scoreboard
         (editor
            (reset script (script {$this reset}))
            (test_score
               int
               (post_sync {$this set_score_milo [test_score]})
               (help "Current score.")
            )
            (test_stars float (post_sync {$this set_num_stars [test_stars]}))
            (sound bool "Play a sound when the stars change")
            (config
               symbol
               (list (normal botb botb_star))
               (post_sync {$this set_config [config]})
            )
            (stars (array object (class RndDir)))
         )
         (current_star 0)
         (test_score 0)
         (test_stars 0)
         (test_opponent_score 0)
         (score 0)
         (num_stars 0)
         (opponent_score 0)
         (sweep_pct 0)
         (max_score 100)
         (max_stars 5)
         (gold 0)
         (stars ())
         (sound 0)
         (config "normal")
         (reset
            {set [current_star] 0}
            {set [gold] 0}
            {foreach $star [stars]
               {$star set showing 0}
               {$star set_frame 0}
               {{$star find reset.trig} trigger}
            }
            {if {exists stars_offset.tnm}
               {stars_offset.tnm set_frame 0}
            }
            {set [score] 1}
            {if_else {exists milo}
               {$this set_score_milo 0}
               {$this set_score 0}
            }
            {$this set_num_stars 0.00}
            {set [test_score] 0}
            {if {exists gold_stars.anim}
               {gold_stars.anim set_frame 0}
            }
         )
         (set_score
            ($in_val)
            {if {&& {!= $in_val [score]} {exists score.lbl}}
               {score.lbl set_score_or_stars {meta_performer current} $in_val}
            }
            {set [score] $in_val}
         )
         (set_opponent_score
            ($in_val)
            {if {&& {!= $in_val [opponent_score]} {exists score_opponent.txt}}
               {score_opponent.lbl set_text
                  {if_else {meta_performer is_battle_brand_new}
                     "-"
                     {fmt_score_or_stars $in_val}
                  }
               }
            }
            {set [opponent_score] $in_val}
         )
         (set_score_milo
            ($in_val)
            {if {exists score.lbl}
               {score.lbl set_int $in_val 1}
            }
            {set [score] $in_val}
         )
         (set_opponent_score_milo
            ($in_val)
            {if {exists score_opponent.txt}
               {score_opponent.lbl set_text {fmt_score $in_val}}
            }
            {set [opponent_score] $in_val}
         )
         (set_num_stars
            ($stars)
            {if {> {size [stars]} 0}
               {if {== $stars 0}
                  {{elem [stars] 0} set showing 1}
               }
               {if_else {>= $stars [max_stars]}
                  {if {! [gold]}
                     {if {exists gold_stars.trig}
                        {gold_stars.trig trigger}
                     }
                     {$this play_star_sound}
                     {set [gold] 1}
                  }
                  {do
                     {if_else {>= $stars {+ [current_star] 1}}
                        {do
                           {{{elem [stars] [current_star]} find sweep.mnm} set_frame 1}
                           {{{elem [stars] [current_star]} find full.trig} trigger}
                           {$this play_star_sound}
                           {set [current_star] {+ [current_star] 1}}
                           {if {< [current_star] {- [max_stars] 1}}
                              {{elem [stars] [current_star]} set showing 1}
                              {stars_offset.tnm animate (dest {* [current_star] 10})}
                              {{
                                    {elem
                                       [stars]
                                       [current_star]
                                    }
                                    find
                                    sweep.mnm
                                 } set_frame
                                 {- [sweep_pct] 1}
                              }
                           }
                        }
                        {if {< [current_star] {- [max_stars] 1}}
                           {set [sweep_pct] {- $stars [current_star]}}
                           {if {< [current_star] [max_stars]}
                              {{
                                    {elem
                                       [stars]
                                       [current_star]
                                    }
                                    find
                                    sweep.mnm
                                 } set_frame
                                 {min [sweep_pct] 0.95}
                              }
                           }
                        }
                     }
                  }
               }
            }
         )
         (play_star_sound
            {if [sound]
               {if {|| {! {exists game}} {gamemode get play_star_sfx}}
                  {{get_track_panel} play_seq achieve_star.cue}
               }
            }
         )
         (set_config
            ($config)
            {switch $config
               (normal
                  {config_normal.trig trigger}
                  {$this set_star_battle 0}
               )
               (botb
                  {config_botb.trig trigger}
                  {$this set_star_battle 0}
               )
               (botb_star
                  {config_botb.trig trigger}
                  {$this set_star_battle 1}
               )
            }
         )
         (set_star_battle
            ($in_val)
            {if_else $in_val
               {star_battle.trig trigger}
               {star_battle_off.trig trigger}
            }
         )
         (config_normal {$this show_stars 1})
         (config_botb {$this show_stars 0})
         (show_stars
            ($val)
            {stars.grp set_showing $val}
            {set [sound] $val}
         )
      )
      (smasher_plate
         (editor
            (reset script (script {$this reset}))
            (lefty bool (post_sync {$this set_lefty [lefty]}))
            (is_drum bool)
            (real_guitar bool)
            (test script (script {$this test 0.20}))
            (fast_test script (script {$this test 0.05}))
            (stop_test script (script {$this stop_test}))
            (setup_draworder script (script {$this setup_draworder 1}))
            (smasher_list (array object (class RndDir)))
            (keyboard_style bool (post_sync {$this update_style}))
         )
         (lefty 0)
         (is_drum 0)
         (real_guitar 0)
         (smasher_list ())
         (draw_order_set 0)
         (keyboard_style 0)
         (reset
            {$this update_colors}
            {foreach $smasher [smasher_list]
               {if {!= $smasher}
                  {$smasher reset}
               }
            }
            {$this update_style}
         )
         (enter {$this reset})
         (set_lefty
            ($in_val)
            {set [lefty] $in_val}
            {if {exists orientation.grp}
               {orientation.grp set_frame
                  {if_else [lefty]
                     1
                     0
                  }
               }
            }
            {$this update_colors}
            {foreach $smasher [smasher_list]
               {if {!= $smasher}
                  {$smasher set_lefty $in_val}
               }
            }
         )
         (update_colors
            {if [is_drum]
               {gem_smasher1 set_color
                  {if_else [lefty]
                     green
                     red
                  }
               }
               {gem_smasher2 set_color
                  {if_else [lefty]
                     blue
                     yellow
                  }
               }
               {gem_smasher3 set_color
                  {if_else [lefty]
                     yellow
                     blue
                  }
               }
               {gem_smasher4 set_color
                  {if_else [lefty]
                     red
                     green
                  }
               }
            }
         )
         (setup_draworder
            ($force)
            {if {&& {|| $force {$this is_proxy}} {! [draw_order_set]}}
               {$this collect_groups {object before_gems.grp} base_bottom.grp}
               {$this collect_groups {object before_gems.grp} base_top.grp}
               {$this collect_drawables {object after_gems.grp} effects.grp}
               {if {exists gem_smashers.grp}
                  {gem_smashers.grp set_showing 0}
               }
               {set [draw_order_set] 1}
            }
         )
         (collect_groups
            ($dst_group $src_group_name)
            {foreach $smasher [smasher_list]
               {$dst_group add_object {$smasher find $src_group_name}}
            }
         )
         (collect_drawables
            ($dst_group $src_group_name)
            {if_else {== $dst_group}
               {notify
                  {sprint "no such group " $dst_group " in " {$this name}}
               }
               {do
                  ($done 0)
                  ($i 0)
                  ($obj)
                  ($cur_obj)
                  ($to_delete {array 0})
                  ($src_group)
                  {while {! $done}
                     {set $done 1}
                     {foreach $smasher [smasher_list]
                        {set $obj
                           {$this get_draw_object $smasher $src_group_name $i}
                        }
                        {if {!= $obj}
                           {set $done 0}
                           {set $cur_object
                              {$this find_part_in_group $dst_group {$obj name}}
                           }
                           {if_else {== $cur_object}
                              {do
                                 {$dst_group add_object $obj}
                                 {if {$obj is_a ParticleSys}
                                    {$obj set_trans_parent $this}
                                    {push_back $to_delete {$obj name}}
                                 }
                              }
                              {do
                                 {$smasher iterate_self
                                    (Object particle_launcher)
                                    $launcher
                                    {if {== {$launcher get part} $obj}
                                       {$launcher set part $cur_object}
                                    }
                                 }
                              }
                           }
                        }
                     }
                     {++ $i}
                  }
                  {set $i
                     {if_else [is_drum]
                        2
                        1
                     }
                  }
                  {while {< $i {size [smasher_list]}}
                     {do
                        ($smasher {elem [smasher_list] $i})
                        {set $src_group {$smasher find $src_group_name}}
                        {foreach $delete_name $to_delete
                           {set $obj {$smasher find $delete_name}}
                           {if {!= $obj}
                              {$src_group remove_object $obj}
                              {delete $obj}
                           }
                        }
                     }
                     {++ $i}
                  }
               }
            }
         )
         (find_part_in_group
            ($group $name)
            {do
               ($objects {$group get_array objects})
               ($ret_obj)
               {foreach $elem $objects
                  {if
                     {&&
                        {&& {== $name {$elem name}} {$elem is_a ParticleSys}}
                        {== {$elem get mesh_emitter} ""}
                     }
                     {set $ret_obj $elem}
                  }
               }
               $ret_obj
            }
         )
         (get_draw_object
            ($smasher $group_name $index)
            {do
               ($draw_objects {{$smasher find $group_name} get_array objects})
               {if_else {< $index {size $draw_objects}}
                  {elem $draw_objects $index}
                  ''
               }
            }
         )
         (test
            ($sleep_time)
            {$this reset}
            {$this stop_test}
            {thread_task
               0
               (name smasher_plate_test)
               (script
                  {foreach $smasher [smasher_list]
                     {$smasher set_glow 0}
                  }
                  {if {> {random_int 0 6} 2}
                     {do
                        ($smasher)
                        {set $smasher {elem [smasher_list] {random_int 0 {size [smasher_list]}}}}
                        {while {! {$smasher showing}}
                           {set $smasher {elem [smasher_list] {random_int 0 {size [smasher_list]}}}}
                        }
                        {$smasher set_glow 1}
                        {$smasher hit}
                        {if {>= {random_int 0 3} 2}
                           {set $smasher {elem [smasher_list] {random_int 0 {size [smasher_list]}}}}
                           {while {! {$smasher showing}}
                              {set $smasher {elem [smasher_list] {random_int 0 {size [smasher_list]}}}}
                           }
                           {$smasher set_glow 1}
                           {$smasher hit}
                        }
                     }
                  }
                  {$task sleep $sleep_time}
                  {$task loop}
               )
            }
         )
         (stop_test
            {if {exists smasher_plate_test}
               {delete smasher_plate_test}
            }
            {foreach $smasher [smasher_list]
               {$smasher set_glow 0}
            }
         )
         (update_style
            {foreach $smasher [smasher_list]
               {if {$smasher exists style.anim}
                  {{$smasher find style.anim} set frame [keyboard_style]}
               }
            }
         )
      )
      (star_meter_multiplier
         (editor
            (test_multiplier int (post_sync {$this set_multiplier [test_multiplier]}))
         )
         (test_multiplier 0)
         (last_multiplier 0)
         (reset {set [last_multiplier] 0})
         (set_multiplier
            ($val)
            {if {!= [last_multiplier] $val}
               {multiplier.lbl set_token_fmt band_multiplier_value $val}
               {set [last_multiplier] $val}
            }
         )
      )
      (tambourine_gem
         (editor
            (do_reset script (script {$this reset}))
            (do_hit script (script {$this hit}))
            (do_miss script (script {$this miss}))
         )
         (reset
            {hit.trig basic_cleanup}
            {miss.trig basic_cleanup}
            {reset.trig trigger}
         )
         (reset_particles
            {$this iterate_self
               (Object particle_launcher)
               $launcher
               {do
                  ($part {$launcher get part})
                  {if $part
                     {$part clear_all_particles}
                  }
               }
            }
         )
         (hit {hit.trig trigger})
         (miss {miss.trig trigger})
      )
      (tracker_band_display
         (editor
            (hide
               script
               (script {$this hide})
               (help "Fade the display out, hiding it.")
            )
            (target_progress
               script
               (script {$this target_progress})
               (help "Simulate the tracker incrementing, but not passing a target value.")
            )
            (advance_target
               script
               (script {$this advance_target 0 target})
               (help "Simulate passing a target.")
            )
            (last_target_passed
               script
               (script {$this last_target_passed})
               (help "Simulate passing the last target.")
            )
            (show
               script
               (script {$this show overdrive_focus_description})
               (help "Fade the display in.")
            )
            (graphic_type
               script
               (script {$this set_display_type 0})
               (help "Change the display mode to graphic.")
            )
            (text_type
               script
               (script {$this set_display_type 1})
               (help "Change the display mode to text.")
            )
            (tour_style
               script
               (script {$this set_display_style 0})
               (help "Change the display style to tour.")
            )
            (campaign_style
               script
               (script {$this set_display_style 1})
               (help "Change the display style to campaign.")
            )
            (campaign_succeeding
               script
               (script {$this set_success_state 1})
               (help "Player is succeeding.")
            )
            (campaign_failing
               script
               (script {$this set_success_state 0})
               (help "Player is failing.")
            )
         )
         (set_progress
            ($data_array)
            {tg_main_text_middle.lbl set_token_fmt $data_array}
         )
         (set_int_progress
            ($int)
            {tg_main_text_middle.lbl set_int $int 1}
         )
         (set_target
            ($data_array)
            {if_else {size $data_array}
               {tg_main_text_bottom.lbl set_token_fmt $data_array}
               {tg_main_text_bottom.lbl set_token_fmt ""}
            }
         )
         (target_progress {target_progress.trig trigger})
         (advance_target
            ($passed_target_index $new_target_description)
            {thread_task
               0
               (script
                  {target_pass.trig trigger}
                  {$task sleep 1.00}
                  {tg_main_text_bottom.lbl set_token_fmt $new_target_description}
               )
            }
         )
         (last_target_passed {thread_task 0 (script {target_pass.trig trigger})})
         (set_display_type
            ($type)
            {switch $type
               (0 {configure_type.anim set_frame 0})
               (1 {configure_type.anim set_frame 1})
            }
         )
         (set_display_style
            ($style)
            {switch $style
               (0 {setup_tour.trig trigger})
               (1 {setup_campaign.trig trigger})
            }
         )
         (show
            ($description)
            {show.trig trigger}
            {tg_main_text_top.lbl set text_token $description}
         )
         (hide {hide.trig trigger})
         (set_challenge_type
            ($type)
            {foreach_int $i 0 4
               {do
                  ($star_name {sprintf "star%d" $i})
                  ($star_obj {star_display find $star_name})
                  ($anim {$star_obj find tour_configure_challenge.anim})
                  {switch $type
                     (1 {$anim set_frame 2})
                     (2 {$anim set_frame 1})
                     (3 {$anim set_frame 0})
                  }
               }
            }
         )
         (set_success_state
            ($success)
            {if_else $success
               {campaign_succeeding.trig trigger}
               {campaign_failing.trig trigger}
            }
         )
         (set_progress_percentage
            ($percentage)
            {star_display set num_stars {* $percentage 5.00}}
         )
      )
      (tracker_broadcast_display
         (editor
            (show
               script
               (script {$this show})
               (help "Show the display.")
            )
            (hide
               script
               (script {$this hide})
               (help "Hide the display.")
            )
            (broadcast_type
               script
               (script {$this set_display_type 0})
               (help "Change the type to broadcast.")
            )
            (show_broadcast script (script {broadcast.trig trigger}))
            (band_message_type
               script
               (script {$this set_display_type 1})
               (help "Change the type to band message.")
            )
            (tour_set_secondary_state_0
               script
               (script {$this set_secondary_state_level 0})
            )
            (tour_set_secondary_state_1
               script
               (script {$this set_secondary_state_level 1})
            )
            (tour_set_secondary_state_2
               script
               (script {$this set_secondary_state_level 2})
            )
            (tour_set_secondary_state_3
               script
               (script {$this set_secondary_state_level 3})
            )
         )
         (show {tg_desc_show.trig trigger})
         (hide {tg_desc_hide.trig trigger})
         (set_description
            ($description)
            {tg_desc.lbl set text_token $description}
         )
         (broadcast
            ($data_array $expanded_desc)
            {tg_desc.lbl set_token_fmt $data_array}
            {tg_desc_expanded.lbl set text_token $expanded_desc}
            {broadcast.trig trigger}
         )
         (set_challenge_type
            ($type)
            {switch $type
               (1 {tour_configure_challenge.anim set_frame 2})
               (2 {tour_configure_challenge.anim set_frame 1})
               (3 {tour_configure_challenge.anim set_frame 0})
            }
         )
         (set_display_type
            ($type)
            {switch $type
               (0 {tour_configure_type.anim set_frame 0})
               (1 {tour_configure_type.anim set_frame 1})
            }
         )
         (set_band_message
            ($message)
            {band_message.lbl set_token_fmt $message}
         )
         (show_brief_band_message
            ($message)
            {$this set_band_message $message}
            {band_message.trig trigger}
         )
         (set_secondary_state_level
            ($level)
            {tour_secondary_state.anim animate (dest $level)}
         )
      )
      (band_icon
         (editor
            (start_glowing script (script {$this set_glowing 1}))
            (stop_glowing script (script {$this set_glowing 0}))
         )
         (set_glowing
            ($val)
            {if_else $val
               {if {exists glow.trig}
                  {glow.trig trigger}
               }
               {if {exists glow_stop.trig}
                  {glow_stop.trig trigger}
               }
            }
         )
      )
      (note_tube
         (editor
            (arrow_color_A
               symbol
               (list (green yellow orange red purple blue grey))
               (post_sync {$this set_color color_A.anim [arrow_color_A]})
            )
            (arrow_color_B
               symbol
               (list (green yellow orange red purple blue grey))
               (post_sync {$this set_color color_B.anim [arrow_color_B]})
            )
            (arrow_color_C
               symbol
               (list (green yellow orange red purple blue grey))
               (post_sync {$this set_color color_C.anim [arrow_color_C]})
            )
            (spotlight bool (post_sync {$this set_spotlight [spotlight]}))
         )
         (arrow_color_A grey)
         (arrow_color_B grey)
         (arrow_color_C grey)
         (spotlight 0)
         (set_color
            ($anim $color)
            {if {$this exists $anim}
               {do
                  {if {== $color green}
                     {$anim set_frame 0}
                  }
                  {if {== $color yellow}
                     {$anim set_frame 1}
                  }
                  {if {== $color orange}
                     {$anim set_frame 2}
                  }
                  {if {== $color red}
                     {$anim set_frame 3}
                  }
                  {if {== $color purple}
                     {$anim set_frame 4}
                  }
                  {if {== $color blue}
                     {$anim set_frame 5}
                  }
                  {if {== $color grey}
                     {$anim set_frame 6}
                  }
               }
            }
         )
         (set_spotlight
            ($in_val)
            {if_else $in_val
               {spotlight.anim animate (loop 0 20)}
               {spotlight.anim animate (dest 20)}
            }
         )
      )
      (vocalist_volume
         (editor (enabled bool (post_sync {$this set_enabled [enabled]})))
         (enabled 1)
         (set_enabled
            ($val)
            {if_else $val
               {do
                  {enable.grp animate (range 1 1) (units 2)}
                  {slider.sld set_state 0}
               }
               {do
                  {enable.grp animate (range 0 0) (units 2)}
                  {slider.sld set_state 2}
               }
            }
            {set [enabled] $val}
         )
      )
      (chord_shape_generator
         (editor
            (string_high_E
               symbol
               (list (unused open fret_1 fret_2 fret_3 fret_4))
               (post_sync {set [preset_chord] ''})
               (refresh preset_chord)
            )
            (string_B
               symbol
               (list (unused open fret_1 fret_2 fret_3 fret_4))
               (post_sync {set [preset_chord] ''})
               (refresh preset_chord)
            )
            (string_G
               symbol
               (list (unused open fret_1 fret_2 fret_3 fret_4))
               (post_sync {set [preset_chord] ''})
               (refresh preset_chord)
            )
            (string_D
               symbol
               (list (unused open fret_1 fret_2 fret_3 fret_4))
               (post_sync {set [preset_chord] ''})
               (refresh preset_chord)
            )
            (string_A
               symbol
               (list (unused open fret_1 fret_2 fret_3 fret_4))
               (post_sync {set [preset_chord] ''})
               (refresh preset_chord)
            )
            (string_low_E
               symbol
               (list (unused open fret_1 fret_2 fret_3 fret_4))
               (post_sync {set [preset_chord] ''})
               (refresh preset_chord)
            )
            (fret_num
               int
               (range 0 24)
               (post_sync {set [preset_chord] ''})
               (refresh preset_chord)
            )
            (preset_chord
               object
               (class Object guitar_chord)
               (post_sync
                  {if {!= [preset_chord] }
                     {[preset_chord] apply}
                  }
               )
               (refresh
                  string_low_E
                  string_A
                  string_D
                  string_G
                  string_B
                  string_high_E
                  fret_num
               )
            )
            (apply script (script {$this apply}))
         )
         (string_high_E unused)
         (string_B unused)
         (string_G unused)
         (string_D unused)
         (string_A unused)
         (string_low_E unused)
         (fret_num 0)
         (preset_chord)
         (reset
            {$this iterate_self (RndDir chord_shape_component) $comp {$comp reset}}
         )
         (get_string_position
            ($string)
            {switch $string
               (string_low_E {set $ret [string_low_E]})
               (string_A {set $ret [string_A]})
               (string_D {set $ret [string_D]})
               (string_G {set $ret [string_G]})
               (string_B {set $ret [string_B]})
               (string_high_E {set $ret [string_high_E]})
            }
            $ret
         )
         (apply
            {set $number_placed 0}
            {set $leftmost_finger -1}
            {set $rightmost_finger -1}
            {fret_num.txt set_showing 0}
            {foreach $string (string_low_E string_A string_D string_G string_B string_high_E)
               {find_elem
                  (edge_left
                     string_low_E
                     gap_E_A
                     string_A
                     gap_A_D
                     string_D
                     gap_D_G
                     string_G
                     gap_G_B
                     string_B
                     gap_B_E
                     string_high_E
                     edge_right
                  )
                  $string
                  $str_idx
               }
               {set $string_position {$this get_string_position $string}}
               {{object $string} set position_left $string_position}
               {{object $string} set position_right $string_position}
               {{object
                     {elem
                        (edge_left string_low_E gap_E_A string_A gap_A_D string_D gap_D_G string_G gap_G_B string_B gap_B_E string_high_E edge_right)
                        {- $str_idx 1}
                     }
                  } set
                  position_right
                  $string_position
               }
               {{object
                     {elem
                        (edge_left string_low_E gap_E_A string_A gap_A_D string_D gap_D_G string_G gap_G_B string_B gap_B_E string_high_E edge_right)
                        {+ $str_idx 1}
                     }
                  } set
                  position_left
                  $string_position
               }
               {if {&& {!= $string_position unused} {!= $string_position open}}
                  {if {! $number_placed}
                     {{object $string} get_local_pos $x $y $z}
                     {fret_num.txt set_local_pos $x $y $z}
                     {{object $string} get_local_rot $x $y $z}
                     {fret_num.txt set_local_rot $x $y $z}
                     {fret_num.txt set_text {sprint [fret_num]}}
                     {fret_num.txt set_showing 1}
                     {set $number_placed 1}
                  }
                  {set $rightmost_finger $str_idx}
                  {if {== $leftmost_finger -1}
                     {set $leftmost_finger $str_idx}
                  }
               }
            }
            {{object edge_left} set position_left unused}
            {{object edge_right} set position_right unused}
            {foreach $sec
               (edge_left
                  string_low_E
                  gap_E_A
                  string_A
                  gap_A_D
                  string_D
                  gap_D_G
                  string_G
                  gap_G_B
                  string_B
                  gap_B_E
                  string_high_E
                  edge_right
               )
               {{object $sec} set internal 1}
            }
            {if {!= $leftmost_finger -1}
               {{object
                     {elem
                        (edge_left string_low_E gap_E_A string_A gap_A_D string_D gap_D_G string_G gap_G_B string_B gap_B_E string_high_E edge_right)
                        {- $leftmost_finger 1}
                     }
                  } set
                  internal
                  0
               }
               {{object
                     {elem
                        (edge_left string_low_E gap_E_A string_A gap_A_D string_D gap_D_G string_G gap_G_B string_B gap_B_E string_high_E edge_right)
                        {+ $rightmost_finger 1}
                     }
                  } set
                  internal
                  0
               }
            }
            {foreach $sec
               (edge_left
                  string_low_E
                  gap_E_A
                  string_A
                  gap_A_D
                  string_D
                  gap_D_G
                  string_G
                  gap_G_B
                  string_B
                  gap_B_E
                  string_high_E
                  edge_right
               )
               {{object $sec} set_width 0.51}
               {{object $sec} apply}
            }
         )
      )
      (chord_shape_component
         (editor
            (position_left symbol (list (unused open fret_1 fret_2 fret_3 fret_4)))
            (position_right symbol (list (unused open fret_1 fret_2 fret_3 fret_4)))
            (internal_parameters
               (indent
                  (gem_type
                     symbol
                     (list (span cap internal_cap none))
                     (post_sync {$this set_gem_type [gem_type]})
                  )
                  (base_type
                     symbol
                     (list (span cap none))
                     (post_sync {$this set_base_type [base_type]})
                  )
                  (height
                     float
                     (range 0 1)
                     (post_sync {$this set_height [height]})
                  )
                  (width
                     float
                     (range 0 1)
                     (post_sync {$this set_width [width]})
                  )
                  (grade
                     float
                     (range -1 1)
                     (post_sync {$this set_grade [grade]})
                  )
                  (orientation
                     symbol
                     (list (left right))
                     (post_sync {$this set_orientation [orientation]})
                  )
                  (internal bool)
               )
            )
            (position_heights
               (indent
                  (fret_6_height float)
                  (fret_5_height float)
                  (fret_4_height float)
                  (fret_3_height float)
                  (fret_2_height float)
                  (fret_1_height float)
                  (open_height float)
               )
            )
            (apply script (script {$this apply}))
         )
         (position_left fret_4)
         (position_right fret_4)
         (gem_type span)
         (base_type span)
         (height 1)
         (width 1)
         (grade 0)
         (orientation left)
         (fret_6_height 1.40)
         (fret_5_height 1.20)
         (fret_4_height 1.00)
         (fret_3_height 0.80)
         (fret_2_height 0.60)
         (fret_1_height 0.40)
         (open_height 0.00)
         (internal 1)
         (set_gem_type
            ($type)
            {switch $type
               (span {config_gem.anim set frame 0})
               (cap {config_gem.anim set frame 1})
               (internal_cap {config_gem.anim set frame 2})
               (none {config_gem.anim set frame -1})
            }
            {set [gem_type] $type}
         )
         (set_base_type
            ($type)
            {switch $type
               (span {config_base.anim set frame 0})
               (cap {config_base.anim set frame 1})
               (none {config_base.anim set frame -1})
            }
            {set [base_type] $type}
         )
         (set_height
            ($val)
            {set [height] $val}
            {section_height.anim set frame [height]}
         )
         (set_width
            ($val)
            {set [width] $val}
            {section_width.anim set frame [width]}
         )
         (set_grade
            ($val)
            {set [grade] $val}
            {section_grade.msnm set frame {+ [grade] 1}}
         )
         (set_orientation
            ($val)
            {if_else {== $val left}
               {cap_direction.anim set frame 0}
               {cap_direction.anim set frame 1}
            }
            {set [orientation] $val}
         )
         (reset
            {$this set_component_type [component_type]}
            {$this set_height [height]}
            {$this set_width [width]}
            {$this set_grade [grade]}
            {$this set_orientation [orientation]}
         )
         (get_position_height
            ($pos)
            {switch $pos
               (fret_6 {set $ret [fret_6_height]})
               (fret_5 {set $ret [fret_5_height]})
               (fret_4 {set $ret [fret_4_height]})
               (fret_3 {set $ret [fret_3_height]})
               (fret_2 {set $ret [fret_2_height]})
               (fret_1 {set $ret [fret_1_height]})
               (open {set $ret [open_height]})
               (unused {set $ret 0})
            }
            $ret
         )
         (apply
            {if_else {== [position_left] [position_right]}
               {do
                  {if_else {== [position_left] unused}
                     {do
                        {$this set_gem_type none}
                        {$this set_base_type none}
                     }
                     {if_else {== [position_left] open}
                        {do
                           {$this set_gem_type none}
                           {$this set_base_type span}
                        }
                        {do
                           {$this set_gem_type span}
                           {$this set_base_type span}
                           {$this set_grade 0}
                           {$this set_height {$this get_position_height [position_left]}}
                        }
                     }
                  }
               }
               {do
                  {set $left_height {$this get_position_height [position_left]}}
                  {set $right_height {$this get_position_height [position_right]}}
                  {if_else {|| {== [position_left] unused} {== [position_right] unused}}
                     {do
                        {$this set_base_type cap}
                        {if_else {== [position_left] unused}
                           {$this set_orientation left}
                           {$this set_orientation right}
                        }
                     }
                     {$this set_base_type span}
                  }
                  {if_else {&& {> $left_height 0} {> $right_height 0}}
                     {do
                        {$this set_gem_type span}
                        {if_else {> $left_height $right_height}
                           {do
                              {$this set_height $left_height}
                              {$this set_grade {- {/ $right_height $left_height} 1}}
                           }
                           {do
                              {$this set_height $right_height}
                              {$this set_grade {- 1 {/ $left_height $right_height}}}
                           }
                        }
                     }
                     {do
                        {if_else {|| {> $left_height 0} {> $right_height 0}}
                           {do
                              {if_else [internal]
                                 {$this set_gem_type internal_cap}
                                 {$this set_gem_type cap}
                              }
                              {if_else {== $left_height 0}
                                 {$this set_orientation left}
                                 {$this set_orientation right}
                              }
                           }
                           {$this set_gem_type none}
                        }
                        {$this set_height {max $left_height $right_height}}
                        {$this set_grade 0}
                     }
                  }
               }
            }
         )
      )
      (key_smasher
         (editor
            (config
               symbol
               (list (full left right middle_d middle_g middle_a black))
               (post_sync {$this apply_config})
            )
            (show_marker
               bool
               (post_sync {$this update_marker})
               (refresh marker_octave)
            )
            (marker_octave
               int
               (range -1 4)
               (hide {! [show_marker]})
               (post_sync {$this update_marker})
            )
            (press script (script {$this press}))
            (release script (script {$this release}))
            (hit script (script {$this hit}))
            (miss script (script {$this miss}))
            (burn script (script {$this burn}))
            (stop_burn script (script {$this stop_burn}))
            (intro script (script {$this intro}))
            (reset script (script {$this reset}))
         )
         (config_applied 0)
         (config full proxy_save)
         (burning 0)
         (glow 0)
         (show_marker 0 proxy_save)
         (marker_octave -1 proxy_save)
         (reset
            {if {! [config_applied]}
               {$this apply_config}
            }
            {set [glow] 0}
            {if_else {$this showing}
               {press.anim set frame 0.00}
               {press.anim set frame -4.00}
            }
            {if {exists reset.trig}
               {reset.trig trigger}
            }
            {set [burning] 1}
            {$this stop_burn}
            {sustain.anim set frame 0.00}
         )
         (apply_config
            {switch [config]
               (full {config.anim set frame 0})
               (right {config.anim set frame 1})
               (middle_d {config.anim set frame 2})
               (middle_g {config.anim set frame 2.20})
               (middle_a {config.anim set frame 2.40})
               (left {config.anim set frame 3})
               (black {config.anim set frame 4})
            }
            {$this update_marker}
            {set [config_applied] 1}
         )
         (update_marker
            {if_else [show_marker]
               {do
                  {marker_octave.anim set frame [marker_octave]}
                  {white_key_00.mesh set mat {object keysmasher_colored.mat}}
                  {white_key_01.mesh set mat {object keysmasher_colored.mat}}
               }
               {do
                  {white_key_00.mesh set mat {object keysmasher.mat}}
                  {white_key_01.mesh set mat {object keysmasher.mat}}
               }
            }
         )
         (reset_particles
            {$this iterate_self
               (Object particle_launcher)
               $launcher
               {do
                  ($part {$launcher get part})
                  {if $part
                     {$part clear_all_particles}
                  }
               }
            }
         )
         (press {$this set_glow 1})
         (release {$this set_glow 0})
         (show_key {show.trig trigger})
         (hide_key {hide.trig trigger})
         (hit {hit.trig trigger})
         (hit_bonus {hit.trig trigger})
         (coda_hit {hit.trig trigger})
         (set_glow
            ($val)
            {if_else {$this showing}
               {do
                  {if_else $val
                     {press.trig trigger}
                     {release.trig trigger}
                  }
                  {set [glow] $val}
               }
               {set [glow] 0}
            }
         )
         (burn
            {burn.trig trigger}
            {set [burning] 1}
         )
         (burn_bonus
            {burn.trig trigger}
            {set [burning] 1}
         )
         (coda_burn
            {burn.trig trigger}
            {set [burning] 1}
         )
         (stop_burn
            {if [burning]
               {stop_burn.trig trigger}
               {set [burning] 0}
            }
         )
         (miss
            {if_else [glow]
               {miss.trig trigger}
               {miss_after_release.trig trigger}
            }
         )
         (intro
            {if {exists intro.trig}
               {intro.trig trigger}
            }
         )
         (set_marker_octave
            ($val)
            {set [marker_octave] $val}
            {$this update_marker}
         )
      )
      (key_smasher_plate
         (editor
            (reset script (script {$this reset}))
            (range
               int
               (range 7 15)
               (post_sync {$this update_range})
            )
            (shift
               float
               (range 0 5)
               (post_sync {shift.anim set frame [shift]})
            )
            (setup_draworder script (script {$this setup_draworder 1}))
            (lane_coloring
               symbol
               (list (black_and_white colored none))
               (post_sync {$this update_lane_coloring})
            )
            (smasher_list (array object (class RndDir)))
            (test script (script {$this test 0.20}))
            (fast_test script (script {$this test 0.05}))
            (stop_test script (script {$this stop_test}))
            (press_all_keys script (script {$this press_all}))
            (release_all_keys script (script {$this release_all}))
         )
         (range 7 proxy_save)
         (shift 0)
         (draw_order_set 0)
         (lane_coloring black_and_white)
         (smasher_list ())
         (enter {$this reset})
         (reset
            {$this update_range}
            {$this update_lane_coloring}
            {$this iterate_self (RndDir key_smasher) $smasher {$smasher reset}}
         )
         (update_range
            {set $width {/ 7 [range]}}
            {width.anim set frame $width}
            {$this iterate_self
               (RndDir key_smasher)
               $smasher
               {{$smasher find smasher_width.anim} set frame $width}
            }
            {set $gem_width_anim {{$this dir} find key_gem_width.anim}}
            {if {!= $gem_width_anim}
               {$gem_width_anim set frame $width}
            }
         )
         (setup_draworder
            ($force)
            {if {&& {$this is_proxy} {! [draw_order_set]}}
               {$this reset}
               {$this collect_objects_by_color rail_lane_miss_00.mesh key_lanes.grp 1 1}
               {$this collect_objects_by_color rail_lane_miss_01.mesh key_lanes.grp 1 1}
               {$this collect_objects_by_color rail_lane_miss_02.mesh key_lanes.grp 1 1}
               {$this collect_objects_by_color rail_lane_00.mesh key_lanes.grp 1 1}
               {$this collect_objects_by_color rail_lane_01.mesh key_lanes.grp 1 1}
               {$this collect_objects_by_color rail_lane_02.mesh key_lanes.grp 1 1}
               {$this collect_objects_by_color white_smashers.grp key_meshes.grp 1 0}
               {$this collect_objects_by_color black_smashers.grp key_meshes.grp 0 1}
               {$this collect_particles effects.grp after_gems.grp}
               {smashers.grp set_showing 0}
               {set [draw_order_set] 1}
            }
         )
         (collect_objects_by_color
            ($obj_name $dst_group $white $black)
            {$this iterate_self
               (RndDir key_smasher)
               $smasher
               {if
                  {||
                     {&& $black {== {$smasher get config} black}}
                     {&& $white {!= {$smasher get config} black}}
                  }
                  {$dst_group add_object {$smasher find $obj_name}}
               }
            }
         )
         (collect_objects_by_config
            ($obj_name $dst_group $config)
            {$this iterate_self
               (RndDir key_smasher)
               $smasher
               {if {== {$smasher get config} $config}
                  {$dst_group add_object {$smasher find $obj_name}}
               }
            }
         )
         (collect_particles
            ($src_group_name $dst_group)
            {set $source_smasher first_polled_smasher_C_1}
            {set $src_group {$source_smasher find $src_group_name}}
            {set $parts {$src_group get_array objects}}
            {foreach $part $parts
               {$dst_group add_object $part}
               {$src_group remove_object $part}
               {$part set_trans_parent $this}
               {$part set_local_pos 0.00 0.00 0.00}
               {$part set_local_rot 0.00 0.00 0.00}
               {do
                  ($scale_x 1.00)
                  ($scale_y 1.00)
                  ($scale_z 1.00)
                  {$this get_local_scale $scale_x $scale_y $scale_z}
                  {$part set_local_scale
                     {/ 1.00 $scale_x}
                     {/ 1.00 $scale_y}
                     {/ 1.00 $scale_z}
                  }
               }
            }
            {$this iterate_self
               (RndDir key_smasher)
               $smasher
               {if {!= $smasher $source_smasher}
                  {set $parts {$dst_group get_array objects}}
                  {foreach $part $parts
                     {$smasher iterate_self
                        (Object particle_launcher)
                        $launcher
                        {if {== {{$launcher get part} name} {$part name}}
                           {$launcher set part $part}
                        }
                     }
                  }
               }
            }
            {$this iterate_self
               (RndDir key_smasher)
               $smasher
               {if {!= $smasher $source_smasher}
                  {set $parts {$dst_group get_array objects}}
                  {foreach $part $parts
                     {set $local_part_copy {$smasher find {$part name}}}
                     {{$smasher find $src_group_name} remove_object $local_part_copy}
                     {delete $local_part_copy}
                  }
               }
            }
         )
         (show_octave_lanes
            ($val)
            {if_else $val
               {set $alpha 0.10}
               {set $alpha 0}
            }
            {$this iterate_self
               (RndDir key_smasher)
               $smasher
               {{$smasher find rail_octave.mat} set alpha $alpha}
            }
         )
         (show_white_key_grading
            ($val)
            {if_else $val
               {set $alpha 1}
               {set $alpha 0}
            }
            {$this iterate_self
               (RndDir key_smasher)
               $smasher
               {{$smasher find rail_grading.mat} set alpha $alpha}
            }
         )
         (miss_left {{$this dir} key_miss_left})
         (miss_right {{$this dir} key_miss_right})
         (cycle_lane_coloring
            {switch [lane_coloring]
               (black_and_white {set [lane_coloring] colored})
               (colored {set [lane_coloring] none})
               (none {set [lane_coloring] black_and_white})
            }
            {$this update_lane_coloring}
            [lane_coloring]
         )
         (update_lane_coloring
            {switch [lane_coloring]
               (black_and_white
                  {smasher_C_0 set_marker_octave -1}
                  {smasher_D_0 set_marker_octave -1}
                  {smasher_E_0 set_marker_octave -1}
                  {smasher_F_0 set_marker_octave 4}
                  {smasher_G_0 set_marker_octave 4}
                  {smasher_A_0 set_marker_octave 4}
                  {smasher_B_0 set_marker_octave 4}
                  {first_polled_smasher_C_1 set_marker_octave -1}
                  {smasher_D_1 set_marker_octave -1}
                  {smasher_E_1 set_marker_octave -1}
                  {smasher_F_1 set_marker_octave 4}
                  {smasher_G_1 set_marker_octave 4}
                  {smasher_A_1 set_marker_octave 4}
                  {smasher_B_1 set_marker_octave 4}
                  {smasher_C_2 set_marker_octave -1}
               )
               (colored
                  {smasher_C_0 set_marker_octave 0}
                  {smasher_D_0 set_marker_octave 0}
                  {smasher_E_0 set_marker_octave 0}
                  {smasher_F_0 set_marker_octave 3}
                  {smasher_G_0 set_marker_octave 3}
                  {smasher_A_0 set_marker_octave 3}
                  {smasher_B_0 set_marker_octave 3}
                  {first_polled_smasher_C_1 set_marker_octave 1}
                  {smasher_D_1 set_marker_octave 1}
                  {smasher_E_1 set_marker_octave 1}
                  {smasher_F_1 set_marker_octave 2}
                  {smasher_G_1 set_marker_octave 2}
                  {smasher_A_1 set_marker_octave 2}
                  {smasher_B_1 set_marker_octave 2}
                  {smasher_C_2 set_marker_octave 4}
               )
               (none
                  {smasher_C_0 set_marker_octave -1}
                  {smasher_D_0 set_marker_octave -1}
                  {smasher_E_0 set_marker_octave -1}
                  {smasher_F_0 set_marker_octave -1}
                  {smasher_G_0 set_marker_octave -1}
                  {smasher_A_0 set_marker_octave -1}
                  {smasher_B_0 set_marker_octave -1}
                  {first_polled_smasher_C_1 set_marker_octave -1}
                  {smasher_D_1 set_marker_octave -1}
                  {smasher_E_1 set_marker_octave -1}
                  {smasher_F_1 set_marker_octave -1}
                  {smasher_G_1 set_marker_octave -1}
                  {smasher_A_1 set_marker_octave -1}
                  {smasher_B_1 set_marker_octave -1}
                  {smasher_C_2 set_marker_octave -1}
               )
            }
         )
         (press_all
            {foreach $smasher [smasher_list]
               {$smasher set_glow 1}
            }
         )
         (release_all
            {foreach $smasher [smasher_list]
               {$smasher set_glow 0}
            }
         )
         (test
            ($sleep_time)
            {$this reset}
            {$this stop_test}
            {thread_task
               0
               (name smasher_plate_test)
               (script
                  {foreach $smasher [smasher_list]
                     {$smasher set_glow 0}
                  }
                  {if {> {random_int 0 6} 2}
                     {do
                        ($smasher)
                        {set $smasher {elem [smasher_list] {random_int 0 {size [smasher_list]}}}}
                        {while {! {$smasher showing}}
                           {set $smasher {elem [smasher_list] {random_int 0 {size [smasher_list]}}}}
                        }
                        {$smasher set_glow 1}
                        {$smasher hit}
                        {if {>= {random_int 0 3} 2}
                           {set $smasher {elem [smasher_list] {random_int 0 {size [smasher_list]}}}}
                           {while {! {$smasher showing}}
                              {set $smasher {elem [smasher_list] {random_int 0 {size [smasher_list]}}}}
                           }
                           {$smasher set_glow 1}
                           {$smasher hit}
                        }
                     }
                  }
                  {$task sleep $sleep_time}
                  {$task loop}
               )
            }
         )
         (stop_test
            {if {exists smasher_plate_test}
               {delete smasher_plate_test}
            }
            {foreach $smasher [smasher_list]
               {$smasher set_glow 0}
            }
         )
         (key_miss_right)
         (key_miss_left)
      )
      (gem_tail_template
         (editor
            (guitar_sustain_y_pos
               float
               (help "Y position where a held tail begins on a guitar/bass/keys track")
               (hide {$this is_proxy})
            )
            (real_guitar_sustain_y_pos
               float
               (help "Y position where a held tail begins on a real guitar track")
               (hide {$this is_proxy})
            )
            (real_keys_sustain_y_pos
               float
               (help "Y position where a held tail begins on a real keys track")
               (hide {$this is_proxy})
            )
            (guitar_sustain_x_scale
               float
               (help "X scale to apply to the tail mesh on a guitar/bass/keys track")
               (hide {$this is_proxy})
            )
            (real_guitar_sustain_x_scale
               float
               (help "X scale to apply to the tail mesh on a real guitar track")
               (hide {$this is_proxy})
            )
            (real_keys_sustain_x_scale
               float
               (help "X scale to apply to the tail mesh on a real keys track")
               (hide {$this is_proxy})
            )
         )
         (guitar_sustain_y_pos 0.00)
         (real_guitar_sustain_y_pos 0.00)
         (real_keys_sustain_y_pos 0.00)
         (guitar_sustain_x_scale 1.00)
         (real_guitar_sustain_x_scale 1.00)
         (real_keys_sustain_x_scale 0.20)
      )
      (chord_shape_outline
         (editor
            (anim_period
               float
               (range 0.00 10.00)
               (help "The period, in seconds, over which to animate finger shape changes")
            )
         )
         (anim_period 1.00)
      )
   )
)
(PostProc
   (description "A PostProc drives post-processing effects.")
   (ext pp)
   (editor
      (bloom
         (indent
            (bloom_color color (help "Color tint for bloom effect"))
            (bloom_threshold float (help "Luminance intensity at which to bloom"))
            (bloom_intensity float (help "Bloom intensity"))
            (bloom_glare bool (help "Whether or not to use the glare effect"))
            (bloom_streak
               bool
               (refresh bloom)
               (help "Whether or not to use directional light streaks")
            )
            (bloom_streak_attenuation
               float
               (read_only {! [bloom_streak]})
               (range -2.00 2.00)
               (help
                  "Attenuation (scattering amount) of light streak.
0.9 to 0.95 is the sweet spot."
               )
            )
            (bloom_streak_angle
               float
               (read_only {! [bloom_streak]})
               (range -360.00 360.00)
               (help "Angle for light streak")
            )
         )
      )
      (motion_blur
         (indent
            (motion_blur_velocity
               bool
               (alias "velocity blur")
               (help
                  "Whether or not to use the velocity motion blur effect. Should be enabled almost all the time."
               )
            )
            (motion_blur_blend
               float
               (alias "previous frame blend")
               (help
                  "The amount of the previous frame to blend into the current frame. This can be used to efficiently simulate motion blur or other effects. Set to zero to disable."
               )
               (range 0.00 1.00)
            )
            (motion_blur_weight
               color
               (alias "color channel weight")
               (help
                  "The weighting for individual color channels in the previous frame blend."
               )
            )
            (motion_blur_exposure
               float
               (alias "exposure weight")
               (help "The weighting for bright pixels in the previous frame blend.")
               (range 0.00 1.00)
            )
         )
         (help "Motion blur settings")
      )
      (gradient_map
         (indent
            (gradient_map
               object
               (class Tex)
               (alias "texture")
               (help
                  "Gradient map; this texture should be layed out horizontally such that the color to use when the pixel is black is on the left and white is on the right."
               )
            )
            (gradient_map_opacity
               float
               (alias "opacity")
               (help "The opacity of the gradient map effect.")
               (range 0.00 1.00)
            )
            (gradient_map_index
               float
               (alias "index")
               (help
                  "This indexes veritically into the gradient map texture. This is useful for storing multiple gradient map textures in a single texture, and to blend between them."
               )
               (range 0.00 1.00)
            )
            (gradient_map_start
               float
               (alias "depth start")
               (help "The depth where the gradient map will begin to take effect.")
               (range 0.00 1.00)
            )
            (gradient_map_end
               float
               (alias "depth end")
               (help "The depth where the gradient map will no longer take effect.")
               (range 0.00 1.00)
            )
         )
         (help "Gradient map settings")
      )
      (chromatic_effects
         (indent
            (chromatic_aberration_offset
               float
               (alias "chromatic offset")
               (help
                  "The size, in pixels, of the chromatic aberration or sharpen effect."
               )
            )
            (chromatic_sharpen
               bool
               (alias "chromatic sharpen")
               (help
                  "Whether to sharpen the chromatic image or apply the aberration effect."
               )
            )
         )
         (alias "chromatic effects")
         (help
            "Chromatic sharpen will sharpen the image, while chromatic aberration is an artifact where color channels are slightly shifted. This is useful to simulate old cameras, poor quality video, or underwater scenes."
         )
      )
      (refraction
         (indent
            (refract_map
               object
               (class Tex)
               (list {$this allowed_normal_map})
               (alias "texture")
               (help "This is a normal map used to distort the screen.")
            )
            (refract_dist
               float
               (alias "distance")
               (help
                  "The distance to refract each pixel of the screen. This can also be negative to reverse the direction. Set to zero to disable."
               )
            )
            (refract_scale
               (vector
                  (x float)
                  (y float)
               )
               (alias "scale")
               (help
                  "This scales the refraction texture before distorting the screen, in the X and Y directions."
               )
            )
            (refract_panning
               (vector
                  (x float)
                  (y float)
               )
               (alias "scroll amount")
               (help
                  "The amount to offset the refraction texture, in the X and Y directions. This is a fixed amount to offset the refraction effect."
               )
            )
            (refract_velocity
               (vector
                  (x float)
                  (y float)
               )
               (alias "scroll velocity")
               (help
                  "The velocity to scroll the refraction texture, in the X and Y directions. The value is specified in units per second, and will offset the refraction effect over time."
               )
            )
            (refract_angle
               float
               (alias "angle")
               (help "The angle to rotate the refraction texture, in degrees.")
               (range 0.00 360.00)
            )
         )
         (help "Full-screen refraction settings")
      )
      (luminance_map
         object
         (class Tex)
         (help "Luminance map")
      )
      (exposure_flicker
         (indent
            (flicker_intensity
               (vector
                  (x float)
                  (y float)
               )
               (alias "intensity")
               (help "Min and max intensity range [0..1], 0.0 to disable")
            )
            (flicker_secs_range
               (vector
                  (x float)
                  (y float)
               )
               (alias "secs_range")
               (help "Min and max number of seconds for a light to dark cycle")
            )
         )
      )
      (noise
         (indent
            (noise_base_scale
               (vector
                  (x float)
                  (y float)
               )
               (help "X and Y tiling of the noise map")
            )
            (noise_intensity
               float
               (help "intensity of the noise, 0.0 to disable")
               (range -10.00 10.00)
            )
            (noise_stationary bool (help "keep the noise map static over the screen"))
            (noise_map
               object
               (class Tex)
               (help "Optional noise bitmap")
            )
            (noise_midtone
               bool
               (help
                  "Applies the noise using at mid-tones of the scene, using an Overlay blend mode."
               )
            )
         )
      )
      (color_correct
         (indent
            (hue
               float
               (help "Hue: -180 to 180, 0.0 is neutral")
               (range -180 180)
            )
            (saturation
               float
               (help "Saturation: -100 to 100, 0.0 is neutral")
               (range -100 100)
            )
            (lightness
               float
               (help "Lightness: -100 to 100, 0.0 is neutral")
               (range -100 100)
            )
            (contrast
               float
               (help "Contrast: -100 to 100, 0.0 is neutral")
               (range -100 100)
            )
            (brightness
               float
               (help "Brightness: -100 to 100, 0.0 is neutral")
               (range -100 100)
            )
            (levels
               (indent
                  (in_lo color (help "Input low end"))
                  (in_hi color (help "Input high end"))
                  (out_lo color (help "Output low end"))
                  (out_hi color (help "Output high end"))
               )
            )
         )
      )
      (posterize
         (indent
            (num_levels
               float
               (help "Number of levels for posterization, 0 turns off")
               (range 0.00 255.00)
            )
            (min_intensity
               float
               (help "Minimum intensity to posterize, 1.0 is posterize all")
               (range 0.00 1.00)
            )
         )
      )
      (kaleidoscope
         (indent
            (kaleidoscope_complexity
               float
               (alias complexity)
               (help
                  "Number of slices in kaleidoscope, 0 turns off, 2 for vertical mirror"
               )
               (range 0.00 64.00)
            )
            (kaleidoscope_size
               float
               (alias size)
               (help "Smaller size means more repeated areas, but each area is smaller")
               (range 0.01 64.00)
            )
            (kaleidoscope_angle
               float
               (alias angle)
               (help "Additional clockwise degrees of rotation around center.")
               (range 0.00 360.00)
            )
            (kaleidoscope_radius
               float
               (alias radius)
               (help "Additional distance from center")
               (range -0.50 0.50)
            )
            (kaleidoscope_flipUVs
               bool
               (alias flipUVs)
               (help "Flip texture UV coords when reflect")
            )
         )
         (help "Kaleidoscope settings")
      )
      (emulate_fps
         float
         (help "Frame rate to emulate, e.g. 24 for film. 0 disables emulation.")
         (range 0.00 60.00)
      )
      (light_trail
         (indent
            (threshold
               float
               (help "Min pixel value to leave trails [0..1]")
               (range 0.00 1.00)
            )
            (duration float (help "Seconds for the trails to last"))
         )
      )
      (hall_of_time
         (indent
            (hall_of_time_type
               int
               (alias "solid rings")
               (list ("kHOTBlended" "kHOTSolidRingsDepth" "kHOTSolidRingsAlpha"))
               (help "Should the effect be blended, or should it produce solid colors?")
               (refresh hall_of_time)
            )
            (hall_of_time_rate
               float
               (alias "rate")
               (help "Speed of effect.  0 is off.  1 is regular speed.")
               (range -10.00 10.00)
            )
            (hall_of_time_color
               color
               (alias "image color")
               (help "Seconds for the trails to last.")
            )
            (hall_of_time_mix
               float
               (alias "image color mix")
               (help
                  "Amount of color to blend. 0 is no color, 1 is solid color.
Not applicable if solid rings checked."
               )
               (range 0.00 1.00)
               (read_only {!= [hall_of_time_type] 0})
            )
         )
         (help "Video feedback effect")
      )
      (vignette
         (indent
            (vignette_color color (help "Color tint for vignette effect"))
            (vignette_intensity
               float
               (range 0 2)
               (help
                  "0 for no effect, 1 for normal, less than one for smaller effect, 2 is full color"
               )
            )
         )
      )
      (select
         script
         (help "Set this as the current post processing effect for preview.")
         (script {$this select})
      )
      (unselect
         script
         (help "Turn off all post-processing effects.")
         (script {rnd reset_postproc})
      )
   )
   (types
      (band
         (editor
            (shows
               (array object (class Draw))
               (help "objects to show")
            )
            (hides
               (array object (class Draw))
               (help "objects to hide")
            )
            (anims
               (array object (class Anim))
               (help "animations to fire")
            )
         )
         (shows ())
         (hides ())
         (anims ())
         (selected
            {foreach $o [shows]
               {if {exists $o}
                  {$o set_showing 1}
               }
            }
            {foreach $o [hides]
               {if {exists $o}
                  {$o set_showing 0}
               }
            }
            {foreach $o [anims]
               {if {exists $o}
                  {$o animate}
               }
            }
         )
         (unselected
            {foreach $o [shows]
               {if {exists $o}
                  {$o set_showing 0}
               }
            }
            {foreach $o [hides]
               {if {exists $o}
                  {$o set_showing 1}
               }
            }
            {foreach $o [anims]
               {if {exists $o}
                  {$o stop_animation}
               }
            }
         )
      )
   )
)
(Tex
   (description
      "Tex objects represent bitmaps used by materials. These

        can be created automatically with 'import tex' on the file menu."
   )
   (ext tex)
   (types
      (sticker
         (editor
            (sizex float (help "scaling in x"))
            (sizey float (help "scaling in y"))
            (display_name symbol (help "display name"))
            (palette_index
               int
               (help "default palette index in the colors list for this sticker")
            )
            (allow_color bool (help "can the user apply color to this image?"))
         )
         (sizex 1)
         (sizey 1)
         (display_name)
         (palette_index 0)
         (allow_color 1)
      )
   )
   (views
      (size
         ("Width" [width])
         ("Height" [height])
         ("Bpp" [bpp])
         ("Size in kb" {$this size_kb})
         ("RMS Difference" {$this rms_difference})
      )
      (paths ("path" [file_path]))
   )
)
(CubeTex
   (description
      "This class implements a cube map intended for environment mapping."
   )
   (ext cube)
   (types)
   (editor
      (right file)
      (left file)
      (top file)
      (bottom file)
      (back file)
      (front file)
   )
)
(Set
   (description "A group of objects to propagate animation and messages")
   (ext set)
   (editor
      (objects (array object (list {$this allowed_objects})))
      (highlight_objects
         script
         (script
            {if {exists milo}
               {milo set_highlights {$this get_array objects}}
            }
         )
      )
   )
   (types
      (Spotlights
         (editor
            (color color (help "Color of the spotlight"))
            (intensity float (help "Intensity of the spotlight"))
         )
         (color 0)
         (intensity 0)
      )
      ('Show set'
         (editor (showing bool))
         (showing 1)
      )
   )
)
(Text
   (description "A Text object draws a 3D character string.")
   (superclasses Draw Trans)
   (ext txt)
   (types)
   (editor
      (text
         string
         (help "Text value")
         (no_test)
      )
      (font
         object
         (class Font)
         (help "Font to use for this Text")
         (no_test)
      )
      (color color (help "Color of the text object"))
      (alpha
         float
         (range 0 1)
         (help "Alpha value of the text object")
      )
      (align
         int
         (list
            (
               "kTopLeft"
               "kTopCenter"
               "kTopRight"
               "kMiddleLeft"
               "kMiddleCenter"
               "kMiddleRight"
               "kBottomLeft"
               "kBottomCenter"
               "kBottomRight"
            )
         )
         (help "Alignment option for the text")
      )
      (caps_mode
         int
         (list ("kCapsModeNone" "kForceLower" "kForceUpper"))
         (help "Defines the CAPS mode for the text")
      )
      (wrap_width
         float
         (range 0 10000)
         (help "Width of text until it wraps")
      )
      (leading
         float
         (range -5 5)
         (help "Vertical distance between lines")
      )
      (italics
         float
         (range -5 5)
         (help "Defines the slant of the text")
      )
      (fixed_length
         int
         (range 0 500)
         (help "Number of character maximum for the text")
      )
      (size float (help "Size of the text"))
      (markup bool (help "This text uses markup"))
   )
)
(Trans
   (description
      "Base class for transformable objects. Trans objects have

        a 3D position, rotation, and scale."
   )
   (ext trans)
   (types)
   (editor
      (trans_parent
         object
         (class Trans)
         (obj_flags no_this)
         (help "Object this is linked to.")
         (post_sync {milo update_objects 0})
      )
      (trans_constraint
         int
         (list
            (
               "kConstraintNone"
               "kConstraintLocalRotate"
               "kConstraintParentWorld"
               "kConstraintLookAtTarget"
               "kConstraintShadowTarget"
               "kConstraintBillboardZ"
               "kConstraintBillboardXZ"
               "kConstraintBillboardXYZ"
               "kConstraintFastBillboardXYZ"
               "kConstraintTargetWorld"
            )
         )
         (help "Trans constraint for the object.")
         (no_test)
      )
      (trans_target
         object
         (class Trans)
         (obj_flags no_this)
         (help "Target according to the constraint.")
      )
      (preserve_scale
         bool
         (help "Preserve scale if applying dynamic constraint.")
      )
   )
   (anim_props
      (scale
         (vector
            (x float)
            (y float)
            (z float)
         )
      )
      (rotation
         (vector
            (x float)
            (y float)
            (z float)
         )
      )
      (position
         (vector
            (x float)
            (y float)
            (z float)
         )
      )
   )
   (views
      ('Local transform'
         (x
            {$this get_local_pos_index 0}
            {$this set_local_pos_index 0 $milo_value}
         )
         (y
            {$this get_local_pos_index 1}
            {$this set_local_pos_index 1 $milo_value}
         )
         (z
            {$this get_local_pos_index 2}
            {$this set_local_pos_index 2 $milo_value}
         )
         (pitch
            {$this get_local_rot_index 0}
            {$this set_local_rot_index 0 $milo_value}
         )
         (roll
            {$this get_local_rot_index 1}
            {$this set_local_rot_index 1 $milo_value}
         )
         (yaw
            {$this get_local_rot_index 2}
            {$this set_local_rot_index 2 $milo_value}
         )
         (
            "scale x"
            {$this get_local_scale_index 0}
            {$this set_local_scale_index 0 $milo_value}
         )
         (
            "scale y"
            {$this get_local_scale_index 1}
            {$this set_local_scale_index 1 $milo_value}
         )
         (
            "scale z"
            {$this get_local_scale_index 2}
            {$this set_local_scale_index 2 $milo_value}
         )
      )
   )
)
(TransAnim
   (description
      "TransAnim objects animate the position, rotation, and

        scale of transformable objects."
   )
   (superclasses Anim)
   (ext tnm)
   (types)
   (views
      (num_keys
         (trans {$this num_trans_keys})
         (rot {$this num_rot_keys})
         (scale {$this num_scale_keys})
         (
            "is key owner"
            {if_else {== $this [keys_owner]}
               True
               False
            }
         )
      )
   )
)
(TransProxy
   (description
      "Stand-in for a RndTransformable inside of a proxy, so you can use it"
   )
   (superclasses Trans)
   (test_superclasses 0)
   (ext tp)
   (editor
      (proxy
         object
         (class ObjectDir)
         (help "Proxy object this will look into.")
      )
      (part
         symbol
         (list {object_list [proxy] Trans})
         (help "The part inside it")
      )
   )
   (types)
)
(MeshDeform
   (description "Reskins target mesh according to exobones.")
   (superclasses)
   (ext deform)
   (types)
   (editor
      (mesh
         object
         (class Mesh)
         (help
            "The mesh we will change, set you can make a zero vert meshdeform just to clean up mutable character meshes"
         )
      )
      (num_verts
         int
         (help "How many verts it holds")
         (read_only 1)
      )
      (num_bones
         int
         (help "How many bones it holds")
         (read_only 1)
      )
   )
)
(EventTrigger
   (description "Triggers animations, sfx, and responses to game events")
   (allowed_dirs RndDir)
   (ext trig)
   (superclasses Anim)
   (types
      (particle_setter
         (editor
            (system
               object
               (class ParticleSys)
               (help "particle system to animate")
            )
            (set_emit bool (refresh))
            (emit_low float (hide {! [set_emit]}))
            (emit_hi float (hide {! [set_emit]}))
            (set_color bool (refresh))
            (color_start_low color (hide {! [set_color]}))
            (alpha_start_low float (hide {! [set_color]}))
            (color_start_hi color (hide {! [set_color]}))
            (alpha_start_hi float (hide {! [set_color]}))
            (color_end_low color (hide {! [set_color]}))
            (alpha_end_low float (hide {! [set_color]}))
            (color_end_hi color (hide {! [set_color]}))
            (alpha_end_hi float (hide {! [set_color]}))
         )
         (system)
         (emit_low 0)
         (emit_hi 1)
         (color_start_low 0)
         (color_start_hi 0)
         (alpha_start_low 0)
         (alpha_start_hi 0)
         (color_end_low 0)
         (color_end_hi 0)
         (alpha_end_low 0)
         (alpha_end_hi 0)
         (set_emit 0)
         (set_color 0)
         (reset)
         (trigger
            {do
               {if [set_emit]
                  {[system] set_emit_rate [emit_low] [emit_hi]}
               }
               {if [set_color]
                  {do
                     {[system] set_start_color_int
                        [color_start_low]
                        [color_start_hi]
                        [alpha_start_low]
                        [alpha_start_hi]
                     }
                     {[system] set_end_color_int
                        [color_end_low]
                        [color_end_hi]
                        [alpha_end_low]
                        [alpha_end_hi]
                     }
                  }
               }
            }
         )
      )
      (part_launcher
         (editor (systems (array object (class ParticleSys))))
         (systems ())
         (reset)
         (trigger
            {foreach $elem [systems]
               {if $elem
                  {$elem launch_part}
               }
            }
         )
      )
      (particle_trigger
         (editor (systems (array object (class PartLauncher))))
         (systems ())
         (trigger
            {foreach $elem [systems]
               {if $elem
                  {$elem launch_particles}
               }
            }
         )
      )
      (play_mogg
         (editor
            (mogg
               object
               (class MoggClip)
               (help
                  "a mogg file to trigger. Will play when triggered, and stop when trigger is RESET"
               )
            )
         )
         (mogg)
         (trigger {[mogg] play})
         (reset {[mogg] stop})
      )
      (trigger_pool
         (editor
            (triggers
               (array object (class EventTrigger))
               (help "will randomly trigger on of these when we are triggered")
            )
            (pick_same_prob
               float
               (range 0 1)
               (help
                  "the probability of picking the same item twice in a row.  1 = always pick the same one, 0 = never pick the same twice in a row"
               )
            )
         )
         (pick_same_prob 0.50)
         (triggers ())
         (last_pick_idx -1)
         (init {set [last_pick_idx] -1})
         (reset
            {foreach_int $i 0 {size [triggers]}
               {set $curTrig [triggers $i]}
               {$curTrig basic_cleanup}
               {with $curTrig
                  {foreach_int $j 0 {size [shows]}
                     {[shows $j] set showing 0}
                  }
               }
            }
         )
         (debug_str
            {if_else {== [last_pick_idx] -1}
               "<none>"
               {sprint
                  {[triggers [last_pick_idx]] name}
                  "  (#"
                  {+ [last_pick_idx] 1}
                  " out of "
                  {size [triggers]}
                  " possibilities)"
               }
            }
         )
         (trigger
            {if {>= [last_pick_idx] {size [triggers]}}
               {set [last_pick_idx] -1}
            }
            {set $nextPickIdx -1}
            {if {> {size [triggers]} 0}
               {if_else {== [last_pick_idx] -1}
                  {do
                     {set $nextPickIdx {random_int 0 {size [triggers]}}}
                  }
                  {do
                     {if_else
                        {||
                           {== {size [triggers]} 1}
                           {<= {random_float 0.00 1.00} [pick_same_prob]}
                        }
                        {do
                           {set $nextPickIdx [last_pick_idx]}
                        }
                        {do
                           {set $nextPickIdx {random_int 0 {size [triggers]}}}
                           {while {== $nextPickIdx [last_pick_idx]}
                              {set $nextPickIdx {random_int 0 {size [triggers]}}}
                           }
                        }
                     }
                  }
               }
            }
            {if {!= $nextPickIdx -1}
               {foreach_int $i 0 {size [triggers]}
                  {unless {== $i $nextPickIdx}
                     {do
                        {[triggers $i] basic_cleanup}
                     }
                  }
               }
               {[triggers $nextPickIdx] trigger}
               {set [last_pick_idx] $nextPickIdx}
            }
         )
      )
      (randomize_textures
         (editor
            (mats
               (array object (class Mat))
               (help
                  "The materials whos diffuse textures will be randomly replaced when we trigger"
               )
            )
            (texture_pool
               (array object (class Tex))
               (help
                  "The textures we will randomly distribute onto the materials on trigger"
               )
            )
         )
         (mats ())
         (texture_pool ())
         (trigger
            {if {> {size [texture_pool]} 0}
               {set $texPoolRemaining {array [texture_pool]}}
               {foreach $mat [mats]
                  {if $mat
                     {set $newTex ''}
                     {while {== $newTex}
                        {if {== {size $texPoolRemaining} 0}
                           {set $texPoolRemaining {array [texture_pool]}}
                        }
                        {set $newTex {random_elem $texPoolRemaining}}
                        {remove_elem $texPoolRemaining $newTex}
                     }
                     {$mat set diffuse_tex $newTex}
                  }
               }
            }
         )
      )
      (random_show
         (editor
            (random_shows
               (array object (class Draw))
               (help
                  "a list of drawables which we will randomly select from on trigger. Each trigger shows the random selection and hides the rest."
               )
            )
            (pick_same_prob
               float
               (range 0 1)
               (help
                  "the probability of picking the same item twice in a row.  1 = always pick the same one, 0 = never pick the same twice in a row"
               )
            )
         )
         (random_shows ())
         (pick_same_prob 0.50)
         (hide_or_show
            ($thingToHide $show)
            {$thingToHide set_showing $show}
            {if {$thingToHide is_a Group}
               {set $grpChildren {$thingToHide get_draws}}
               {foreach $child $grpChildren
                  {if $child
                     {if {$child is_a TexMovie}
                        {$child set_showing $show}
                     }
                  }
               }
            }
         )
         (reset
            {foreach_int $i 0 {size [random_shows]}
               {$this hide_or_show [random_shows $i] 0}
            }
            {if
               {&&
                  {exists milo}
                  {! {has_substr {{milo cur_dir} get_path_name} "world.milo"}}
               }
               {milo update_objects}
               {milo invalidate_listers_and_trees}
            }
         )
         (trigger
            {set $nextPickIdx -1}
            {if {> {size [random_shows]} 0}
               {if_else {== [last_pick_idx] -1}
                  {do
                     {set $nextPickIdx {random_int 0 {size [random_shows]}}}
                  }
                  {do
                     {if_else
                        {||
                           {== {size [random_shows]} 1}
                           {<= {random_float 0.00 1.00} [pick_same_prob]}
                        }
                        {do
                           {set $nextPickIdx [last_pick_idx]}
                        }
                        {do
                           {set $nextPickIdx {random_int 0 {size [random_shows]}}}
                           {while {== $nextPickIdx [last_pick_idx]}
                              {set $nextPickIdx {random_int 0 {size [random_shows]}}}
                           }
                        }
                     }
                  }
               }
            }
            {if {!= $nextPickIdx -1}
               {foreach_int $i 0 {size [random_shows]}
                  {if_else {== $i $nextPickIdx}
                     {do
                        {$this hide_or_show [random_shows $i] 1}
                     }
                     {do
                        {$this hide_or_show [random_shows $i] 0}
                     }
                  }
               }
               {if {exists milo}
                  {milo update_objects}
                  {milo invalidate_listers_and_trees}
               }
               {set [last_pick_idx] $nextPickIdx}
            }
         )
         (last_pick_idx -1)
      )
      (toggler
         (editor
            (disable
               object
               (class EventTrigger)
               (help "disable this event trigger when I'm triggered")
            )
            (enable
               object
               (class EventTrigger)
               (help "enable this event trigger when I'm triggered")
            )
         )
         (disable)
         (enable)
         (reset)
         (trigger
            {if [disable]
               {script_task 1 (delay 0.01) (script {[disable] disable})}
            }
            {if [enable]
               {script_task 1 (delay 0.01) (script {[enable] enable})}
            }
         )
      )
      (endgame_action
         (supported_events
            (endgame_swing_drum_0
               endgame_swing_drum_1
               endgame_swing_drum_2
               endgame_swing_drum_3
               endgame_swing_drum_4
               endgame_swing_bass_0
               endgame_swing_bass_1
               endgame_swing_bass_2
               endgame_swing_bass_3
               endgame_swing_bass_4
               endgame_swing_guitar_0
               endgame_swing_guitar_1
               endgame_swing_guitar_2
               endgame_swing_guitar_3
               endgame_swing_guitar_4
               endgame_vocals_none
               endgame_vocals_low
               endgame_vocals_medium
               endgame_vocals_high
            )
         )
      )
      (backlight
         (editor
            (tex1
               object
               (class Tex)
               (help "texture for first moving layer")
            )
            (tex2
               object
               (class Tex)
               (help "texture for second moving layer")
            )
            (part_tex1
               object
               (class Tex)
               (help "texture for first particle system")
            )
            (part_tex2
               object
               (class Tex)
               (help "texture for second particle system")
            )
         )
         (tex1)
         (tex2)
         (part_tex1)
         (part_tex2)
         (reset)
         (trigger
            {if {exists mat02.mat}
               {mat02.mat set diffuse_tex [tex1]}
            }
            {if {exists mat03.mat}
               {mat03.mat set diffuse_tex [tex2]}
            }
            {if {exists part_mat02.mat}
               {part_mat02.mat set diffuse_tex [part_tex1]}
            }
            {if {exists part_mat03.mat}
               {part_mat03.mat set diffuse_tex [part_tex2]}
            }
         )
      )
      (hair_hider
         (target_proxy)
         (editor
            (target_proxy
               object
               (class TransProxy)
               (help "Points to a transproxy pointing at the character")
            )
         )
         (trigger
            {if {&& [target_proxy] {[target_proxy] get proxy}}
               {{
                     [target_proxy]
                     get
                     proxy
                  } hide_categories
                  hair
                  head
                  earrings
                  piercings
                  eyebrows
                  glasses
               }
            }
         )
         (reset
            {if {&& [target_proxy] {[target_proxy] get proxy}}
               {{[target_proxy] get proxy} restore_categories}
            }
         )
      )
   )
   (editor
      (trigger
         script
         (script {$this trigger})
         (help
            "Tries to trigger this EventTrigger, won't work if [enabled] is false"
         )
      )
      (reset script (script {$this basic_cleanup}))
      (trigger_events
         (array
            symbol
            (list {$this supported_events})
            (help "Events which enable this trigger")
         )
      )
      (anims
         (array
            (struct
               (anim
                  object
                  (class Anim)
                  (refresh)
               )
               (blend float)
               (delay float)
               (wait bool)
               (filter
                  (indent
                     (enable
                        bool
                        (refresh)
                        (help "Enable animation filtering")
                     )
                     (rate
                        int
                        (list ("k30_fps" "k480_fpb" "k30_fps_ui" "k1_fpb" "k30_fps_tutorial"))
                        (help "Rate to animate")
                        (read_only {! [anims {elem $milo_prop_path 1} enable]})
                     )
                     (start
                        float
                        (help "Start frame of animation")
                        (read_only {! [anims {elem $milo_prop_path 1} enable]})
                     )
                     (end
                        float
                        (help "End frame of animation")
                        (read_only {! [anims {elem $milo_prop_path 1} enable]})
                     )
                     (scale
                        float
                        (help "Scale of animation")
                        (read_only {! [anims {elem $milo_prop_path 1} enable]})
                     )
                     (period
                        float
                        (help "Period of animation if non-zero")
                        (read_only {! [anims {elem $milo_prop_path 1} enable]})
                     )
                     (type
                        symbol
                        (list (range loop dest))
                        (help "Type of animation")
                        (read_only {! [anims {elem $milo_prop_path 1} enable]})
                     )
                  )
               )
            )
            (header
               {do
                  ($index {elem $milo_prop_path 1})
                  {sprint
                     {if_else [anims $index anim]
                        {[anims $index anim] name}
                        "<none>"
                     }
                  }
               }
            )
         )
      )
      (proxy_calls
         (array
            (struct
               (proxy object (class ObjectDir))
               (call symbol (list {$this proxy_calls}))
               (event
                  object
                  (class EventTrigger)
                  (dir [proxy_calls {elem $milo_prop_path 1} proxy])
                  (help "event trigger to fire")
               )
            )
         )
      )
      (sounds (array object (class Sequence)))
      (shows
         (array
            object
            (class Draw)
            (obj_flags no_null)
         )
         (help "objects to show")
      )
      (hide_delays
         (array
            (struct
               (hide
                  object
                  (class Draw)
                  (help "object to hide")
               )
               (delay float (help "seconds to delay hiding"))
               (rate
                  int
                  (list ("k30_fps" "k480_fpb" "k30_fps_ui" "k1_fpb" "k30_fps_tutorial"))
                  (help "rate by which to measure delay")
               )
            )
         )
      )
      (part_launchers (array object (class PartLauncher)))
      (enable_events
         (array
            symbol
            (list {$this supported_events})
            (help "event which enable this event trigger")
         )
      )
      (disable_events
         (array
            symbol
            (list {$this supported_events})
            (help "event which disable this event trigger")
         )
      )
      (enabled
         bool
         (help
            "State of the event trigger. If TRUE, this EventTrigger can be triggered, if FALSE the EventTrigger can't be triggered.  This value is not saved, so feel free to change it for debugging"
         )
         (no_test)
      )
      (enabled_at_start
         bool
         (help
            "Initial state of the EventTrigger. If TRUE, the EventTrigger will work initially, if FALSE the EventTrigger will not work until an enable_event happens."
         )
         (refresh enabled)
      )
      (triggers_to_reset
         (array
            object
            (class EventTrigger)
            (obj_flags no_null)
         )
         (help
            "these triggers will be reset (i.e. hide its shows, etc.) when this trigger fires"
         )
      )
      (wait_for_events
         (array
            symbol
            (list {$this supported_events})
            (help
               "When events are triggered, arm them, and delay fire until this handler is called"
            )
         )
      )
      (next_link
         object
         (class EventTrigger)
         (obj_flags no_this)
         (refresh trigger_order)
      )
      (trigger_order
         int
         (list ("kTriggerRandom" "kTriggerSequence"))
         (read_only {== [next_link] ""})
         (help "Order of triggering next_link")
      )
      (anim_trigger
         int
         (list
            (
               ("kTriggerAnimNone" "Do not trigger based on any Anim call")
               (
                  "kTriggerAnimStart"
                  "Trigger when StartAnim gets called (e.g. very start of a CamShot), will be Reset when EndAnim gets called"
               )
               (
                  "kTriggerAnimEnd"
                  "Trigger when EndAnim gets called (e.g. very end of a CamShot)"
               )
               (
                  "kTriggerAnimFrame"
                  "Trigger when frame crosses anim_frame (e.g. during a CamShot)"
               )
            )
         )
         (help
            "Sets whether and how this will trigger itself based on Anim calls to it"
         )
         (refresh anim_frame)
      )
      (anim_frame
         float
         (help
            "If anim_trigger is kAnimTrigger, then this is the frame we will trigger ourselves on"
         )
         (read_only {!= [anim_trigger] 3})
      )
   )
   (views
      (events
         ("trigger" [trigger_events 0])
         ("disable" [disable_events 0])
         ("enable" [enable_events 0])
         ("wait_for" [wait_for_events 0])
      )
   )
   (supported_events (start))
)
(Wind
   (description
      "Object representing blowing wind, CharHair and Fur can point at them."
   )
   (superclasses)
   (ext wind)
   (types)
   (editor
      (prevailing
         (vector
            (x float)
            (y float)
            (z float)
         )
         (help
            "Prevailing wind in inches/sec, along each world space axis, adds to random component, 1 mph == 17 inches/sec"
         )
      )
      (random
         (vector
            (x float)
            (y float)
            (z float)
         )
         (help
            "Random wind speed in inches/sec, along each world axis, adds to prevailing wind, 1 mph == 17 inches/sec"
         )
      )
      (time_loop
         float
         (help "how long in seconds before the wind loops, 50 is a nice default")
      )
      (space_loop
         float
         (help "how far in inches before the wind loops, 100 is a nice default")
      )
      (set_defaults
         script
         (help "set defaults for outside")
         (script {$this set_defaults})
         (refresh)
      )
      (set_zero
         script
         (help "zero out the wind")
         (script {$this set_zero})
         (refresh)
      )
      (wind_owner
         object
         (class Wind)
         (help
            "Wind owner for the wind, properties shown are not for the owner, however, you must edit it directly"
         )
         (obj_flags no_null)
         (no_test)
      )
   )
)
(PartLauncher
   (description
      "Event object to launch a specified number of particles off a particle system"
   )
   (ext pl)
   (types (basic_launcher) (particle_launcher))
   (editor
      (launch
         script
         (script {$this launch_particles})
         (help "Launch the particles")
      )
      (part
         object
         (class ParticleSys)
         (help "Particle sytem to launch from")
         (refresh
            life
            speed
            size
            delta_size
            start_color
            mid_color
            end_color
            start_alpha
            mid_alpha
            end_alpha
            pitch_low
            pitch_high
            yaw_low
            yaw_high
            box_extent_1
            box_extent_2
            mesh
         )
      )
      (trans
         object
         (class Trans)
         (help "Optional transformable to use for the particle launch location")
      )
      (num_parts
         int
         (range 0 1000)
         (help "Number of particles to launch")
      )
      (emit_rate
         (vector
            (x float)
            (y float)
         )
         (help "Frame range to generate particles.")
      )
      (override_life
         bool
         (refresh life)
         (help "Override the life of the particles at launch")
      )
      (life
         float
         (read_only {! [override_life]})
         (help "Life of the particles at launch")
      )
      (override_speed
         bool
         (refresh speed)
         (help "Override the speed of the particles at launch")
      )
      (speed
         float
         (read_only {! [override_speed]})
         (help "Speed of the particles at launch")
      )
      (override_size
         bool
         (refresh size)
         (help "Override the size of the particles at launch")
      )
      (size
         float
         (read_only {! [override_size]})
         (help "Size of the particles at launch")
      )
      (override_delta_size
         bool
         (refresh delta_size)
         (help "Override the delta size of the particles at launch")
      )
      (delta_size
         float
         (read_only {! [override_delta_size]})
         (help "Delta size of the particles at launch")
      )
      (override_start_color
         bool
         (refresh start_color start_alpha)
         (help "Override the start color of the particles at launch")
      )
      (start_color
         color
         (read_only {! [override_start_color]})
         (help "Start color of the particles at launch")
      )
      (start_alpha
         float
         (read_only {! [override_start_color]})
         (range 0 1)
         (help "Start alpha of the particles at launch")
      )
      (override_mid_color
         bool
         (refresh mid_color mid_alpha)
         (help "Override the mid color of the particles at launch")
      )
      (mid_color
         color
         (read_only {! [override_mid_color]})
         (help "Mid color of the particles at launch")
      )
      (mid_alpha
         float
         (read_only {! [override_mid_color]})
         (range 0 1)
         (help "Mid alpha of the particles at launch")
      )
      (override_end_color
         bool
         (refresh end_color end_alpha)
         (help "Override the end color of the particles at launch")
      )
      (end_color
         color
         (read_only {! [override_end_color]})
         (help "End color of the particles at launch")
      )
      (end_alpha
         float
         (read_only {! [override_end_color]})
         (range 0 1)
         (help "End alpha of the particles at launch")
      )
      (override_emit_direction
         bool
         (refresh pitch_low pitch_high yaw_low yaw_high)
         (help "Override the emit direction of the particles at launch")
      )
      (pitch_low
         float
         (read_only {! [override_emit_direction]})
         (help "Low pitch range of the particle launch direction")
      )
      (pitch_high
         float
         (read_only {! [override_emit_direction]})
         (help "High pitch range of the particle launch direction")
      )
      (yaw_low
         float
         (read_only {! [override_emit_direction]})
         (help "Low yaw range of the particle launch direction")
      )
      (yaw_high
         float
         (read_only {! [override_emit_direction]})
         (help "High yaw range of the particle launch direction")
      )
      (override_box_emitter
         bool
         (refresh box_extent_1 box_extent_2 override_mesh_emitter mesh)
         (read_only [override_mesh_emitter])
         (help "Override the box emitter for the particle launch")
      )
      (box_extent_1
         (vector
            (x float)
            (y float)
            (z float)
         )
         (read_only {! [override_box_emitter]})
         (help "Box extent bound 1 for the particle launch")
      )
      (box_extent_2
         (vector
            (x float)
            (y float)
            (z float)
         )
         (read_only {! [override_box_emitter]})
         (help "Box extent bound 1 for the particle launch")
      )
      (override_mesh_emitter
         bool
         (refresh box_extent_1 box_extent_2 override_box_emitter mesh)
         (read_only [override_box_emitter])
         (help "Override the mesh emitter for the particle launch")
      )
      (mesh
         object
         (class Mesh)
         (read_only {! [override_mesh_emitter]})
         (help "Mesh emitter override")
      )
   )
)
(FxSend
   (description "Base class for all sound FX processors")
   (allowed_dirs)
   (editor
      (wet_gain
         float
         (range -96 20)
         (help "Gain applied to effect output (dB)")
      )
      (dry_gain
         float
         (range -96 20)
         (help "Gain applied to dry signal (dB)")
      )
      (input_gain
         float
         (range -96 20)
         (help "Gain applied to effect input (dB)")
      )
      (bypass bool (help "Bypass the effect and stop it from processing"))
      (reverb_enable bool (help "Enable reverb send"))
      (reverb_mix_db
         float
         (range -96 20)
         (help "Reverb send for this effect")
      )
      (channels
         int
         (list ("kSendAll" "kSendCenter" "kSendStereo"))
         (help "Which channels the FX applies to")
      )
      (stage
         int
         (range 0 9)
         (help
            "The relative order that this send is processed compared to other sends."
         )
      )
      (next_send
         object
         (no_test)
         (class FxSend)
         (help "The next effect in the chain")
      )
      (test_with_mic
         script
         (script {$this test_with_mic})
         (help "Attach microphone to this send, for testing")
      )
   )
)
(FxSendEQ
   (description "An equalizer effect.")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (high_frequency
         float
         (range 0 24000)
         (help "High frequency cutoff, in Hz")
      )
      (high_gain
         float
         (range -42 42)
         (help "High frequency gain, in dB")
      )
      (mid_frequency
         float
         (range 0 24000)
         (help "Mid frequency cutoff, in Hz")
      )
      (mid_bandwidth
         float
         (range 0 24000)
         (help "Mid frequency bandwidth, in Hz")
      )
      (mid_gain
         float
         (range -42 42)
         (help "Mid frequency gain, in dB")
      )
      (low_frequency
         float
         (range 0 24000)
         (help "Low frequency cutoff, in Hz")
      )
      (low_gain
         float
         (range -42 42)
         (help "Low frequency gain, in dB")
      )
      (low_pass_cutoff
         float
         (range 20 20000)
         (help "Low pass filter cutoff, in Hz")
      )
      (low_pass_reso
         float
         (range -25 25)
         (help "Low pass filter resonance, in dB")
      )
      (high_pass_cutoff
         float
         (range 20 20000)
         (help "High pass filter cutoff, in Hz")
      )
      (high_pass_reso
         float
         (range -25 25)
         (help "High pass filter resonance, in dB")
      )
   )
)
(FxSendChorus
   (description "A chorus effect.")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (delay_ms
         float
         (range 0 100)
         (help "Maximum delay time in milliseconds")
      )
      (depth
         float
         (range 0 1000)
         (help "Depth of pitch modulation, in centitones")
      )
      (feedback_pct
         int
         (range 0 100)
         (help "Percent of output that is fed back to input")
      )
      (offset_pct
         int
         (range 0 100)
         (help "LFO phase offset between channels (for wider stereo effect)")
      )
      (tempo_sync
         bool
         (refresh)
         (help "Sync modulation to song tempo?")
      )
      (rate
         float
         (range 0 10)
         (hide [tempo_sync])
         (help "Rate at which pitch is modulated (Hz)")
      )
      (sync_type
         symbol
         (list (sixteenth eighth dotted_eighth quarter dotted_quarter half whole))
         (hide {! [tempo_sync]})
         (help "Note value to synchronize modulation to")
      )
      (tempo
         float
         (range 20 300)
         (hide {! [tempo_sync]})
         (help "Tempo for modulation; can be driven by game code")
      )
   )
)
(FxSendFlanger
   (description "A flanger effect.")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (delay_ms
         float
         (range 0 10)
         (help "Maximum delay time in milliseconds")
      )
      (depth_pct
         int
         (range 0 100)
         (help "Percent depth of delay modulation")
      )
      (feedback_pct
         int
         (range 0 100)
         (help "Percent of output that is fed back to input")
      )
      (offset_pct
         int
         (range 0 100)
         (help "LFO phase offset between channels (for wider stereo effect)")
      )
      (tempo_sync
         bool
         (refresh)
         (help "Sync modulation to song tempo?")
      )
      (rate
         float
         (range 0 10)
         (hide [tempo_sync])
         (help "Rate at which delay is modulated (Hz)")
      )
      (sync_type
         symbol
         (list (sixteenth eighth dotted_eighth quarter dotted_quarter half whole))
         (hide {! [tempo_sync]})
         (help "Note value to synchronize modulation to")
      )
      (tempo
         float
         (range 20 300)
         (hide {! [tempo_sync]})
         (help "Tempo for modulation; can be driven by game code")
      )
   )
)
(FxSendCompress
   (description "A compression/expansion effect.")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (threshold
         float
         (range -96 0)
         (help "threshold (in dB) at which compression is applied")
      )
      (comp_ratio
         float
         (range 1 80)
         (help "Compression factor - ratio of input level to output level")
      )
      (output_level
         float
         (range -10 10)
         (help "output level for a maxed signal, in dB")
      )
      (attack
         float
         (range 0.00 1)
         (help "Attack time in seconds")
      )
      (release
         float
         (range 0.00 2)
         (help "Release time in seconds")
      )
      (gate_threshold
         float
         (range -96 0)
         (help "threshold (in dB) at which gating is applied")
      )
      (expander
         (indent
            (exp_ratio
               float
               (range 1 20)
               (help
                  "Expansion factor - ratio of input level to output level.  The expander uses the same threshold as the compressor."
               )
            )
            (exp_attack
               float
               (range 0.00 2)
               (help "Attack time in seconds")
            )
            (exp_release
               float
               (range 0.00 1)
               (help "Release time in seconds")
            )
         )
      )
   )
)
(FxSendDelay
   (description "A delay effect.")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (feedback
         float
         (range -96 0)
         (help "Feedback of delayed signal, in dB")
      )
      (ping_pong_pct
         float
         (range 0 100)
         (help "Depth of ping pong effect (percent)")
      )
      (tempo_sync
         bool
         (refresh)
         (help "Sync delay to song tempo?")
      )
      (delay_time
         float
         (range 0 1)
         (hide [tempo_sync])
         (help "Delay time, in seconds")
      )
      (sync_type
         symbol
         (list (sixteenth eighth dotted_eighth quarter dotted_quarter half whole))
         (hide {! [tempo_sync]})
         (help "Note value of delay")
      )
      (tempo
         float
         (range 20 300)
         (hide {! [tempo_sync]})
         (help "Tempo for delay; can be driven by game code")
      )
   )
)
(FxSendReverb
   (description "A reverb effect.")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (environment
         symbol
         (list
            (default
               generic
               padded_cell
               room
               bath_room
               living_room
               stone_room
               auditorium
               concert_hall
               cave
               arena
               hangar
               carpeted_hallway
               hallway
               stone_corridor
               alley
               forest
               city
               mountains
               quarry
               plain
               parking_lot
               sewer_pipe
               underwater
               small_room
               medium_room
               large_room
               medium_hall
               large_hall
               plate
            )
         )
         (help "The reverb environment to simulate.")
      )
      (ps3_params
         (indent
            (pre_delay_ms
               float
               (range 0 148)
               (help "Pre-delay in milliseconds")
            )
            (high_cut
               float
               (range 0 20000)
               (help "High cutoff frequency in Hz")
            )
            (low_cut
               float
               (range 0 20000)
               (help "Low cutoff frequency in Hz")
            )
            (room_size
               float
               (range 0 1)
               (help "Room size (0-1)")
            )
            (damping
               float
               (range 0 1)
               (help "Amount of damping (0-1)")
            )
            (diffusion
               float
               (range 0 1)
               (help "Amount of dffusion (0-1)")
            )
            (early_late
               float
               (range 0 1)
               (help "Balance of early and late reflections; 0=early only, 1=late only")
            )
         )
      )
   )
)
(FxSendWah
   (description "wah-wah effect")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (resonance
         float
         (range 1 10)
         (help "amount of resonance (1-10)")
      )
      (lower_freq
         float
         (range 100 10000)
         (help "low frequency peak of resonant filter (Hz)")
      )
      (upper_freq
         float
         (range 100 10000)
         (help "high frequency peak of resonant filter (Hz)")
      )
      (magic
         float
         (range 0 1)
         (help "magic number (0-1)")
      )
      (tempo_sync
         bool
         (refresh)
         (help "Sync wah to song tempo?")
      )
      (lfo_freq
         float
         (range 0.10 10)
         (hide [tempo_sync])
         (help "rate of LFO oscillations (Hz)")
      )
      (sync_type
         symbol
         (list (sixteenth eighth dotted_eighth quarter dotted_quarter half whole))
         (hide {! [tempo_sync]})
         (help "Note value of delay")
      )
      (tempo
         float
         (range 20 300)
         (hide {! [tempo_sync]})
         (help "Tempo for delay; can be driven by game code")
      )
      (dist_amount
         float
         (range 0 1)
         (help "Post wah distortion amount")
      )
      (dump
         float
         (range 0 1)
         (help "blah blah")
      )
   )
)
(FxSendDistortion
   (description "distortion effect")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (drive
         float
         (range 0 100)
         (help "amount of drive")
      )
   )
)
(FxSendSynapse
   (description "synapse effect")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor
      (amount
         float
         (range 0 1)
         (help "amount of correction")
      )
      (note1_hz
         float
         (range 10 1000)
         (help "target note 1 frequency")
      )
      (note2_hz
         float
         (range 10 1000)
         (help "target note 2 frequency")
      )
      (note3_hz
         float
         (range 10 1000)
         (help "target note 3 frequency")
      )
      (unison_trio bool (help "whether the three voices would sing in unison"))
      (proximity_effect
         float
         (range 0 1)
         (help "amount of correction dependence on error")
      )
      (proximity_focus
         float
         (range 0 1)
         (help "focus for amount of correction dependence on error")
      )
      (attack_smoothing
         float
         (range 10 500)
         (help "attack time ms for correction")
      )
      (release_smoothing
         float
         (range 10 500)
         (help "release time ms for correction")
      )
   )
)
(FxSendMeterEffect
   (description "meter effect")
   (ext send)
   (types)
   (superclasses FxSend)
   (editor)
)
(SynthSample
   (description "A single mono waveform residing in a bank.")
   (ext wav)
   (types)
   (editor
      (file
         file
         (ext "WAV files" wav)
         (wav_dlg 1)
         (help "Mono, 16-bit sample file")
      )
      (looped bool (help "Loop this sample"))
      (loop_start_sample
         int
         (help "Start of the loop, in samples. Ignored if \qlooped\q is unchecked.")
      )
      (loop_end_sample
         int
         (help "End of the loop, in samples.  Use -1 for the end of the sample.")
      )
      (sample_rate
         int
         (read_only 1)
         (help "Sample rate, in Hz")
      )
      (markers
         (array
            (struct
               (sample int)
               (name string)
            )
         )
         (read_only 1)
      )
   )
   (views
      (all
         ("file" [file])
         ("looped" [looped])
         ("start sample" [loop_start_sample])
         ("end sample" [loop_end_sample])
         ("sample_rate" [sample_rate])
         ("size (kb)" {$this platform_size_kb})
      )
   )
)
(Sequence
   (description "A set of audio tasks")
   (allowed_dirs)
   (types)
   (editor
      (play
         script
         (script {$this play})
         (help "Play the sequence")
      )
      (stop
         script
         (script {$this stop})
         (help "Stop all instances of this sequence")
      )
      (avg_volume
         float
         (help "Average volume this sequence will be played at, in dB")
      )
      (volume_spread
         float
         (help "Amount to vary the volume above and below the average, in dB")
      )
      (avg_transpose
         float
         (help "Average transpose this sequence will be played at, in semitones")
      )
      (transpose_spread
         float
         (help "Amount to vary the transpose, in semitones")
      )
      (avg_pan float (help "Average pan to apply to this sequence (-1 - 1)"))
      (pan_spread float (help "Amount to vary the pan"))
      (can_stop
         bool
         (help
            "If false, this sequence will play to its end and can't be stopped prematurely"
         )
      )
   )
   (anim_props
      (trigger_sound
         int
         (list ("kSeqStart" "kSeqStop" "kSeqReplay"))
         (help
            "a special property intended to be used to trigger a sound via prop anim"
         )
      )
   )
)
(Sfx
   (description
      "Basic sound effect object.  Plays several samples with a given volume, pan, transpose, and envelope settings."
   )
   (superclasses Sequence)
   (ext cue)
   (types)
   (editor
      (sfxmaps
         (array
            (struct
               (sample
                  object
                  (class SynthSample)
                  (help "Which sample to play")
               )
               (volume float (help "Volume in dB (0 is full volume, -96 is silence)"))
               (pan
                  float
                  (help "Surround pan, between -4 and 4")
                  (range -4 4)
               )
               (transpose float (help "Transpose in half steps"))
               (fx_core
                  int
                  (list ("kFXCoreNone" "kFXCore0" "kFXCore1"))
                  (help "Which core's digital FX should be used in playing this sample")
               )
               (adsr
                  (struct
                     (attack_mode
                        int
                        (list ("kAttackLinear" "kAttackExp"))
                        (help "Attack mode")
                     )
                     (attack_rate float (help "Duration of attack in seconds"))
                     (decay_rate float (help "Duration of decay in seconds"))
                     (sustain_mode
                        int
                        (list
                           ("kSustainLinInc" "kSustainLinDec" "kSustainExpInc" "kSustainExpDec")
                        )
                        (help "Sustain mode")
                     )
                     (sustain_rate float (help "Duration of sustain in seconds"))
                     (sustain_level float (help "Level of sustain volume (0-1)"))
                     (release_mode
                        int
                        (list ("kReleaseLinear" "kReleaseExp"))
                        (help "Release mode")
                     )
                     (release_rate float (help "Duration of release in seconds"))
                  )
               )
            )
         )
      )
      (moggclip_maps
         (array
            (struct
               (moggclip
                  object
                  (class MoggClip)
                  (help "Which moggclip to play")
               )
               (volume float (help "Volume in dB (0 is full volume, -96 is silence)"))
               (pan
                  float
                  (help "Surround pan, between -4 and 4")
                  (range -4 4)
               )
               (pan_width
                  float
                  (help "Surround pan width, between 0 and 4")
                  (range 0 4)
               )
               (is_stereo bool (help "Is the mogg clip stereo?"))
            )
         )
      )
      (send
         object
         (class FxSend)
         (help "Effect chain to use")
      )
      (reverb_enable bool (help "Enable reverb send"))
      (reverb_mix_db
         float
         (range -96 20)
         (help "Reverb send for this sfx")
      )
      (faders
         (array object (class SynthFader))
         (help "Faders affecting this sound effect")
      )
   )
   (views
      (all
         ("play" (script {$this play}))
         ("sample 0" [sfxmaps 0 sample])
         ("volume 0"
            [sfxmaps 0 volume]
            (dec 2)
         )
         ("pan 0"
            [sfxmaps 0 pan]
            (dec 2)
         )
         ("transpose 0"
            [sfxmaps 0 transpose]
            (dec 2)
         )
         ("fader 0" [faders 0])
         ("fader 1" [faders 1])
         ("fader 2" [faders 2])
         ("fx_core 0" [sfxmaps 0 fx_core])
         ("attack_mode 0" [sfxmaps 0 adsr attack_mode])
         ("attack_rate 0"
            [sfxmaps 0 adsr attack_rate]
            (dec 2)
         )
         ("decay_rate 0"
            [sfxmaps 0 adsr decay_rate]
            (dec 2)
         )
         ("sustain_mode 0" [sfxmaps 0 adsr sustain_mode])
         ("sustain_rate 0"
            [sfxmaps 0 adsr sustain_rate]
            (dec 2)
         )
         ("sustain_level 0"
            [sfxmaps 0 adsr sustain_level]
            (dec 2)
         )
         ("release_mode 0" [sfxmaps 0 adsr release_mode])
         ("release_rate 0"
            [sfxmaps 0 adsr release_rate]
            (dec 2)
         )
         ("sample 1" [sfxmaps 1 sample])
         ("volume 1"
            [sfxmaps 1 volume]
            (dec 2)
         )
         ("pan 1"
            [sfxmaps 1 pan]
            (dec 2)
         )
         ("transpose 1"
            [sfxmaps 1 transpose]
            (dec 2)
         )
         ("fx_core 1" [sfxmaps 1 fx_core])
         ("attack_mode 1" [sfxmaps 1 adsr attack_mode])
         ("attack_rate 1"
            [sfxmaps 1 adsr attack_rate]
            (dec 2)
         )
         ("decay_rate 1"
            [sfxmaps 1 adsr decay_rate]
            (dec 2)
         )
         ("sustain_mode 1" [sfxmaps 1 adsr sustain_mode])
         ("sustain_rate 1"
            [sfxmaps 1 adsr sustain_rate]
            (dec 2)
         )
         ("sustain_level 1"
            [sfxmaps 1 adsr sustain_level]
            (dec 2)
         )
         ("release_mode 1" [sfxmaps 1 adsr release_mode])
         ("release_rate 1"
            [sfxmaps 1 adsr release_rate]
            (dec 2)
         )
      )
      (volume
         ("play" (script {$this play}))
         ("sample 0" [sfxmaps 0 sample])
         ("volume 0"
            [sfxmaps 0 volume]
            (dec 2)
         )
         ("sample 1" [sfxmaps 1 sample])
         ("volume 1"
            [sfxmaps 1 volume]
            (dec 2)
         )
      )
      (pan
         ("play" (script {$this play}))
         ("sample 0" [sfxmaps 0 sample])
         ("pan 0"
            [sfxmaps 0 pan]
            (dec 2)
         )
         ("sample 1" [sfxmaps 1 sample])
         ("pan 1"
            [sfxmaps 1 pan]
            (dec 2)
         )
      )
      (core
         ("play" (script {$this play}))
         ("sample 0" [sfxmaps 0 sample])
         ("core A" [sfxmaps 0 fx_core])
         ("sample 1" [sfxmaps 1 sample])
         ("core B" [sfxmaps 1 fx_core])
      )
      (faders
         ("play" (script {$this play}))
         ("fader 0" [faders 0])
         ("fader 1" [faders 1])
         ("fader 2" [faders 2])
      )
   )
)
(MidiInstrument
   (description
      "Basic sound effect object.  Plays several samples with a given volume, pan, transpose, and envelope settings."
   )
   (ext inst)
   (types)
   (editor
      (multisamplemaps
         (array
            (struct
               (sample
                  object
                  (class SynthSample)
                  (help "Which sample to play")
               )
               (volume float (help "Volume in dB (0 is full volume, -96 is silence)"))
               (pan
                  float
                  (help "Surround pan, between -4 and 4")
                  (range -4 4)
               )
               (centernote int (help "note at which sample pays without pitch change"))
               (minnote int (help "Lowest zone note"))
               (maxnote int (help "Highest zone note"))
               (minvelo int (help "Lowest zone velocity"))
               (maxvelo int (help "Highest zone velocity"))
               (fx_core
                  int
                  (list ("kFXCoreNone" "kFXCore0" "kFXCore1"))
                  (help "Which core's digital FX should be used in playing this sample")
               )
               (adsr
                  (struct
                     (attack_mode
                        int
                        (list ("kAttackLinear" "kAttackExp"))
                        (help "Attack mode")
                     )
                     (attack_rate float (help "Duration of attack in seconds"))
                     (decay_rate float (help "Duration of decay in seconds"))
                     (sustain_mode
                        int
                        (list
                           ("kSustainLinInc" "kSustainLinDec" "kSustainExpInc" "kSustainExpDec")
                        )
                        (help "Sustain mode")
                     )
                     (sustain_rate float (help "Duration of sustain in seconds"))
                     (sustain_level float (help "Level of sustain volume (0-1)"))
                     (release_mode
                        int
                        (list ("kReleaseLinear" "kReleaseExp"))
                        (help "Release mode")
                     )
                     (release_rate float (help "Duration of release in seconds"))
                  )
               )
            )
         )
      )
      (send
         object
         (class FxSend)
         (help "Effect chain to use")
      )
      (reverb_enable bool (help "Enable reverb send"))
      (reverb_mix_db
         float
         (range -96 20)
         (help "Reverb send for this instrument")
      )
      (faders
         (array object (class SynthFader))
         (help "Faders affecting this sound effect")
      )
   )
   (views
      (all
         ("play" (script {$this play}))
         ("sample 0" [sfxmaps 0 sample])
         ("volume 0"
            [sfxmaps 0 volume]
            (dec 2)
         )
         ("pan 0"
            [sfxmaps 0 pan]
            (dec 2)
         )
         ("transpose 0"
            [sfxmaps 0 transpose]
            (dec 2)
         )
         ("fader 0" [faders 0])
         ("fader 1" [faders 1])
         ("fader 2" [faders 2])
         ("fx_core 0" [sfxmaps 0 fx_core])
         ("attack_mode 0" [sfxmaps 0 adsr attack_mode])
         ("attack_rate 0"
            [sfxmaps 0 adsr attack_rate]
            (dec 2)
         )
         ("decay_rate 0"
            [sfxmaps 0 adsr decay_rate]
            (dec 2)
         )
         ("sustain_mode 0" [sfxmaps 0 adsr sustain_mode])
         ("sustain_rate 0"
            [sfxmaps 0 adsr sustain_rate]
            (dec 2)
         )
         ("sustain_level 0"
            [sfxmaps 0 adsr sustain_level]
            (dec 2)
         )
         ("release_mode 0" [sfxmaps 0 adsr release_mode])
         ("release_rate 0"
            [sfxmaps 0 adsr release_rate]
            (dec 2)
         )
         ("sample 1" [sfxmaps 1 sample])
         ("volume 1"
            [sfxmaps 1 volume]
            (dec 2)
         )
         ("pan 1"
            [sfxmaps 1 pan]
            (dec 2)
         )
         ("transpose 1"
            [sfxmaps 1 transpose]
            (dec 2)
         )
         ("fx_core 1" [sfxmaps 1 fx_core])
         ("attack_mode 1" [sfxmaps 1 adsr attack_mode])
         ("attack_rate 1"
            [sfxmaps 1 adsr attack_rate]
            (dec 2)
         )
         ("decay_rate 1"
            [sfxmaps 1 adsr decay_rate]
            (dec 2)
         )
         ("sustain_mode 1" [sfxmaps 1 adsr sustain_mode])
         ("sustain_rate 1"
            [sfxmaps 1 adsr sustain_rate]
            (dec 2)
         )
         ("sustain_level 1"
            [sfxmaps 1 adsr sustain_level]
            (dec 2)
         )
         ("release_mode 1" [sfxmaps 1 adsr release_mode])
         ("release_rate 1"
            [sfxmaps 1 adsr release_rate]
            (dec 2)
         )
      )
      (volume
         ("play" (script {$this play}))
         ("sample 0" [sfxmaps 0 sample])
         ("volume 0"
            [sfxmaps 0 volume]
            (dec 2)
         )
         ("sample 1" [sfxmaps 1 sample])
         ("volume 1"
            [sfxmaps 1 volume]
            (dec 2)
         )
      )
      (pan
         ("play" (script {$this play}))
         ("sample 0" [sfxmaps 0 sample])
         ("pan 0"
            [sfxmaps 0 pan]
            (dec 2)
         )
         ("sample 1" [sfxmaps 1 sample])
         ("pan 1"
            [sfxmaps 1 pan]
            (dec 2)
         )
      )
      (core
         ("play" (script {$this play}))
         ("sample 0" [sfxmaps 0 sample])
         ("core A" [sfxmaps 0 fx_core])
         ("sample 1" [sfxmaps 1 sample])
         ("core B" [sfxmaps 1 fx_core])
      )
      (faders
         ("play" (script {$this play}))
         ("fader 0" [faders 0])
         ("fader 1" [faders 1])
         ("fader 2" [faders 2])
      )
   )
)
(MoggClip
   (description
      "Allows dynamic playback of Mogg-based audio clips, most notably crowd audio loops."
   )
   (ext mogg)
   (types)
   (editor
      (file
         file
         (ext "MOGG files" mogg)
         (help "The mogg audio file to be played.")
      )
      (volume float (help "Volume in dB (0 is full volume, -96 is silence)."))
      (loop bool (help "If true, this audio clip should loop during playback."))
      (play
         script
         (script {$this play})
         (help "Play the audio clip.")
      )
      (stop
         script
         (script {$this stop})
         (help "Stop the audio clip.")
      )
      (loop_start_sample
         int
         (help "Start of the loop, in samples. Ignored if \qlooped\q is unchecked.")
      )
      (loop_end_sample
         int
         (help "End of the loop, in samples.  Use -1 for the end of the sample.")
      )
   )
)
(WaitSeq
   (description
      "A Sequence type which just waits a specified duration, generating

       no sound.  Useful for tweaking the timing of other events."
   )
   (superclasses Sequence)
   (ext cue)
   (editor
      (avg_wait_seconds float (help "Average wait time, in seconds"))
      (wait_spread float (help "Amount to vary the wait time, in seconds"))
   )
   (types)
)
(GroupSeq
   (description
      "A sequence which plays other sequences.  Abstract base class."
   )
   (superclasses Sequence)
   (allowed_dirs)
   (ext cue)
   (types)
   (editor
      (children
         (array object (class Sequence))
         (help "The children of this sequence")
      )
   )
)
(RandomGroupSeq
   (description
      "Plays one or more of its child sequences, selected at random."
   )
   (superclasses GroupSeq)
   (ext cue)
   (types)
   (editor
      (num_simul int (help "Number of children to play simultaneously"))
      (allow_repeats
         bool
         (help
            "If false, you will never hear the same sequence again until all have played (only if num_simul is 1)"
         )
      )
   )
)
(SerialGroupSeq
   (description
      "Plays its child sequences in order, waiting for each to stop

      before moving on to the next."
   )
   (superclasses GroupSeq)
   (ext cue)
   (types)
)
(ParallelGroupSeq
   (description "Plays all of its child sequences at the same time.")
   (superclasses GroupSeq)
   (ext cue)
   (types)
)
(RandomIntervalGroupSeq
   (description "Plays all of its child sequences at random intervals")
   (superclasses GroupSeq)
   (ext cue)
   (types)
   (editor
      (max_simul int (help "the maximum number of sounds we allow at one time"))
      (avg_interval_secs
         float
         (help "the number of seconds on average we wait to play a child cue again")
      )
      (interval_spread
         float
         (help
            "We randomly deviate + or - this many seconds from the average when picking our wait interval"
         )
      )
   )
)
(SynthEmitter
   (description
      "A 3D positional emitter.  The volume and surround-panning of

      a sfx are controlled by its position relative to a listener (usually the

      camera)."
   )
   (superclasses Draw Trans)
   (ext emit)
   (types)
   (editor
      (sfx
         object
         (class Sfx)
         (help "sfx this emitter should play")
      )
      (listener
         object
         (class Trans)
         (help "object representing the listener's position")
      )
      (enabled bool (help "enable/disable the emitter"))
      (outer_radius
         float
         (help "the sound starts playing when you cross inside this radius.")
      )
      (outer_volume float (help "volume at outer radius, in dB"))
      (inner_radius float (help "volume and pan are fixed inside this radius."))
      (inner_volume float (help "volume at inner radius (and inside)"))
   )
)
(SynthFader
   (description
      "A fader controls the volume level of one or more sound effects."
   )
   (ext fade)
   (types)
   (editor
      (level
         float
         (range -96 6)
         (help "volume level in dB")
      )
   )
)
(Character
   (description
      "Base class for Character objects. Contains Geometry,

        Outfit Loaders, and LOD + Sphere concepts."
   )
   (allowed_dirs ObjectDir)
   (superclasses RndDir)
   (types
      (extras
         (proxies () proxy_save)
         (editor
            (proxies
               (array
                  symbol
                  (help "valid proxies to load")
                  (list {file_list "char/extras/*.milo" 0})
               )
            )
         )
      )
      (light_target
         (editor
            (base_anim symbol (list {$this get_clip_names}))
            (base_amplitude
               float
               (range 0 1)
               (help "physical scale of animation loop")
            )
            (base_speed float (help "speed multiplier"))
            (base_phase
               float
               (range 0 1)
               (help "0 to 1, 0.5 would start the loop half way through")
            )
            (add_anim symbol (list {$this get_clip_names}))
            (add_amplitude
               float
               (range 0 1)
               (help "physical scale of animation loop")
            )
            (add_speed float (help "speed multiplier"))
            (add_phase
               float
               (range 0 1)
               (help "0 to 1, 0.5 would start the loop half way through")
            )
            (test script (script {$this test_anim}))
         )
         (base_anim)
         (base_amplitude 1)
         (base_speed 1)
         (base_phase 0)
         (add_anim)
         (add_amplitude 0.50)
         (add_speed 1)
         (add_phase 0)
         (get_clip_names {object_list {main.drv get clips} CharClip 0})
         (test_anim
            {$this play_anim
               [base_anim]
               [base_amplitude]
               [base_speed]
               [base_phase]
               [add_anim]
               [add_amplitude]
               [add_speed]
               [add_phase]
            }
         )
         (play_anim
            ($base_anim
               $base_amp
               $base_speed
               $base_phase
               $add_anim
               $add_amp
               $add_speed
               $add_phase
            )
            {base_pos.drv set weight $base_amp}
            {target_pos.drv set weight $add_amp}
            {main.drv set beat_scale $base_speed}
            {base_pos.drv set beat_scale $base_speed}
            {base_rot.drv set beat_scale $add_speed}
            {target_pos.drv set beat_scale $add_speed}
            {base_pos_still.drv play still {| 2 48}}
            {target_pos_still.drv play still {| 2 48}}
            {main.drv play $base_anim {| 2 48}}
            {base_pos.drv play $base_anim {| 2 48}}
            {base_rot.drv play $add_anim {| 2 48}}
            {target_pos.drv play $add_anim {| 2 48}}
            {set $clip {main.drv first_clip}}
            {set $offset {* {$clip get length_beats} $base_phase}}
            {main.drv offset $offset $offset}
            {set $clip {base_pos.drv first_clip}}
            {set $offset {* {$clip get length_beats} $base_phase}}
            {base_pos.drv offset $offset $offset}
            {set $clip {base_rot.drv first_clip}}
            {set $offset {* {$clip get length_beats} $add_phase}}
            {base_rot.drv offset $offset $offset}
            {set $clip {target_pos.drv first_clip}}
            {set $offset {* {$clip get length_beats} $add_phase}}
            {target_pos.drv offset $offset $offset}
         )
      )
      (crowd
         (editor
            (load_slow
               script
               (script {crowd_clips.fm load_tempo slow 0 0})
               (help "load slow clips")
            )
            (load_medium
               script
               (script {crowd_clips.fm load_tempo medium 0 0})
               (help "load medium clips")
            )
            (load_fast
               script
               (script {crowd_clips.fm load_tempo fast 0 0})
               (help "load fast clips")
            )
         )
      )
      (outfit_variation
         (enter {$this iterate_self OutfitConfig $oc {$oc recompose}})
         (editor
            (resource_file file (help "path to the resource file for this outfit"))
            (texture_folder_name
               string
               (help
                  "name of folder containing textures for this outfit. Should be in the same directory as the resource file"
               )
            )
            (setup_outfit
               script
               (script
                  {do
                     {set $input_valid 1}
                     {if
                        {||
                           {== [resource_file] }
                           {! {file_exists [resource_file]}}
                           {! {has_substr [resource_file] "_resource"}}
                        }
                        {notify "please provide a valid resource file!"}
                        {set $input_valid 0}
                     }
                     {if $input_valid
                        {set $textures_path
                           {sprint {file_get_path [resource_file]} "/" [texture_folder_name]}
                        }
                        {if {! {dir_exists $textures_path}}
                           {notify "texture folder '" $textures_path "' doesn't exist!"}
                           {set $input_valid 0}
                        }
                     }
                     {if $input_valid
                        {set $resource_base {file_get_base [resource_file]}}
                        {set $dir_base
                           {substr $resource_base 0 {find_substr $resource_base "_resource"}}
                        }
                        {set $dir_name
                           {sprint $dir_base "_" [texture_folder_name]}
                        }
                        {$this set_name $dir_name}
                        {set $foundSubdir 0}
                        {foreach $subdir {$this get_array subdirs}
                           {if {== $subdir [resource_file]}
                              {set $foundSubdir 1}
                           }
                        }
                        {if {! $foundSubdir}
                           {$this insert (subdirs 0) [resource_file]}
                        }
                        {set $textureList {milo list_filenames {sprint $textures_path "/*"}}}
                        {foreach $texPath $textureList
                           {if {|| {== {file_get_ext $texPath} "png"} {== {file_get_ext $texPath} "bmp"}}
                              {set $texName {file_get_base $texPath}}
                              {unless {exists $texName}
                                 {set $newTex {new Tex}}
                                 {$newTex set_name {file_get_base $texPath} $this}
                                 {$newTex set file_path $texPath}
                              }
                           }
                        }
                        {set $cfgNameBase
                           {file_get_base
                              {file_get_path {file_get_path {file_get_path [resource_file]}}}
                           }
                        }
                        {set $hasOutfitCfg 0}
                        {$this iterate_self
                           OutfitConfig
                           $cfg
                           {set $hasOutfitCfg 1}
                           {set $outfitCfg $cfg}
                        }
                        {unless $hasOutfitCfg
                           {set $outfitCfg {new OutfitConfig}}
                           {$outfitCfg set_name {sprint $cfgNameBase ".cfg"} $this}
                        }
                        {set $swapMatName
                           {sprint $cfgNameBase "_" $dir_base "_swap.mat"}
                        }
                        {unless {exists $swapMatName}
                           {set $newSwapMat {new Mat}}
                           {$newSwapMat set_name $swapMatName $this}
                           {$newSwapMat set per_pixel_lit 1}
                           {$this iterate_self
                              Tex
                              $tex
                              {if {has_substr {$tex name} "_diffuse"}
                                 {$newSwapMat set diffuse_tex $tex}
                              }
                              {if {has_substr {$tex name} "_norm"}
                                 {$newSwapMat set normal_map $tex}
                              }
                              {if {has_substr {$tex name} "_spec"}
                                 {$newSwapMat set specular_map $tex}
                              }
                           }
                        }
                        {if {== {$outfitCfg size (mats)} 0}
                           {$outfitCfg insert (mats 0) ()}
                        }
                        {$outfitCfg set (mats 0 mat) {$this find $swapMatName}}
                        {set $targetMatName
                           {sprint $cfgNameBase "_" $dir_base ".mat"}
                        }
                        {if {exists $targetMatName}
                           {$outfitCfg set (mats 0 target) {$this find $targetMatName}}
                        }
                        {set $foundMasks false}
                        {$this iterate_self
                           Tex
                           $tex
                           {if {has_substr {$tex name} "_diffuse"}
                              {$outfitCfg set (mats 0 two_color_diffuse) $tex}
                           }
                           {if {has_substr {$tex name} "_interp"}
                              {$outfitCfg set (mats 0 two_color_interp) $tex}
                              {set $foundMasks true}
                           }
                           {if {has_substr {$tex name} "_mask"}
                              {$outfitCfg set (mats 0 two_color_mask) $tex}
                              {set $foundMasks true}
                           }
                        }
                        {if {== $foundMasks true}
                           {print "should setup 2color now!
"}
                           {set $diffTex " "}
                           {$this iterate_self
                              Tex
                              $tex
                              {if {has_substr {$tex name} "_diffuse"}
                                 {set $diffTex $tex}
                              }
                           }
                           {set $w {$diffTex get width}}
                           {set $h {$diffTex get height}}
                           {search_replace {$diffTex name} "_diffuse" "_output" $rtexName}
                           {set $twoColRndTex {new Tex $rtexName}}
                           {print
                              "gonna setup 2color with w: "
                              $w
                              " h: "
                              $h
                              " computed from: "
                              {$diffTex name}
                              "
"
                           }
                           {$twoColRndTex set_bitmap $w $h {$diffTex get bpp} 34 0}
                           {$newSwapMat set diffuse_tex $twoColRndTex}
                           {set $clothPal " "}
                           {$this iterate
                              ColorPalette
                              $pal
                              {if {has_substr {$pal name} "cloth_dulled"}
                                 {set $clothPal $pal}
                              }
                           }
                           {$outfitCfg set (mats 0 color1_palette) $clothPal}
                           {$outfitCfg set (mats 0 color2_palette) $clothPal}
                           {$outfitCfg set (mats 0 color1_option) 0}
                           {$outfitCfg set (mats 0 color2_option) 1}
                        }
                        {if_else {== {$this get_path_name} ""}
                           {do
                              {set $filePath
                                 {sprint
                                    {file_get_path {file_get_path [resource_file]}}
                                    "/"
                                    $dir_name
                                    ".milo"
                                 }
                              }
                              {$this perforce_save $filePath 1}
                              {milo save $filePath}
                           }
                           {milo save}
                        }
                        {milo invalidate_listers_and_trees}
                        {milo update_objects}
                     }
                  }
               )
               (help "this utility will assist in automating setup of an outfit")
            )
         )
         (resource_file)
         (texture_folder_name)
      )
   )
   (editor
      (lods
         (array
            (struct
               (screen_size
                  float
                  (help
                     "when the unit sphere centered on the bounding sphere is smaller than this screen height fraction, it will draw the next lod"
                  )
                  (hide {== {elem $milo_prop_path 1} {- {$this size (lods)} 1}})
                  (range 0 10000)
               )
               (group
                  object
                  (class Group)
                  (help
                     "group to show at this LOD.  Drawables not in any lod group will be drawn at every LOD"
                  )
               )
               (trans_group
                  object
                  (class Group)
                  (help
                     "translucency group to show at this LOD.  Drawables in it are guaranteed to be drawn last."
                  )
               )
            )
            (alias "lod")
         )
      )
      (force_lod
         int
         (list ("kLODPerFrame" "kLOD0" "kLOD1" "kLOD2"))
         (help
            "Forces LOD, kLODPerFrame is normal behavior of picking per frame, the others force the lod (0 is highest res lod, 2 is lowest res lod)"
         )
      )
      (trans_group
         object
         (class Group)
         (help
            "translucency group to show independent of lod.  Drawables in it are guaranteed to be drawn last."
         )
      )
      (shadow
         object
         (class Group)
         (obj_flags allow_null)
         (help "Group containing shadow geometry")
      )
      (self_shadow bool (help "Whether this character should be self-shadowed."))
      (sphere_base
         object
         (class Trans)
         (obj_flags no_null)
         (help "Base for bounding sphere, such as bone_pelvis.mesh")
      )
      (bounding
         (struct
            (x float)
            (y float)
            (z float)
            (radius float)
         )
         (help "bounding sphere for the character, fixed")
      )
      (calc_bounding_sphere
         script
         (script {$this calc_bounding_sphere})
         (help "Calculates a new bounding sphere")
         (refresh bounding)
      )
      (frozen bool (help "if true, is frozen in place, no polling happens"))
      (CharacterTesting
         (struct
            (driver
               object
               (class CharDriver)
               (dir $this)
               (refresh CharacterTesting)
               (help "The driver to animate")
               (post_sync {$this sync})
            )
            (clip1
               object
               (class CharClip)
               (dir_prop clips)
               (list {$this get_filtered_clips})
               (refresh CharacterTesting)
               (help "Clip to play")
               (post_sync {$this sync})
            )
            (clip2
               object
               (class CharClip)
               (dir_prop clips)
               (list {$this get_filtered_clips})
               (refresh CharacterTesting)
               (help "Clip to transition to, if any")
               (post_sync {$this sync})
            )
            (filter_group
               object
               (class CharClipGroup)
               (dir_prop clips)
               (refresh CharacterTesting)
               (help "If set, group to use as filter for clips")
               (post_sync {$this sync})
            )
            (transition
               int
               (help "Which transition to use between clip1 and clip2")
               (post_sync {$this sync})
            )
            (cycle_transition
               bool
               (help "Cycle through all the transitions")
               (post_sync {$this sync})
            )
            (move_self
               bool
               (help
                  "Move ourselves around when playing animations, if true, the anim bar won't work backwards"
               )
               (no_test)
            )
            (teleport_to
               object
               (class Waypoint)
               (dir {$this dir})
               (help "Teleport to this Waypoint")
            )
            (dist_map
               symbol
               (list (none nodes raw))
               (help
                  "Displays the transition distance map between clip1 and clip2, raw means the raw graph, no nodes"
               )
            )
            (zero_travel
               bool
               (help
                  "Character does not travel, constantly zeros out position and facing"
               )
            )
            (recenter
               script
               (script {$this recenter})
               (help "Recenters character at his last set waypoint")
            )
            (zero
               script
               (script
                  {$this set_local_pos 0 0 0}
                  {$this teleport {object}}
               )
               (help "Teleports character to the origin")
            )
            (metronome bool (help "Click on every beat transition"))
            (show_screen_size
               bool
               (help "graphically displays the screensize and lod next to the character")
            )
            ('add default rigging'
               script
               (script
                  {$this add_defaults}
                  {milo update_objects}
               )
               (help "Adds default objects like main drivers and twist servos")
            )
         )
         (help "Test Character by animating it")
      )
      (Interest_Objects
         (indent
            (toggle_debug_interests
               script
               (script
                  {$this set
                     debug_draw_interest_objects
                     {! {$this get debug_draw_interest_objects}}
                  }
               )
               (help "toggle on/off the drawing of debug info for interest objects")
            )
            (find_new_interests
               script
               (script
                  {if_else $bandwardrobe
                     {$bandwardrobe sync_interests}
                     {$this find_interest_objects {$this dir}}
                  }
               )
               (help
                  "If you add an interest, hit this to let the character know about it"
               )
            )
            (interest_to_force
               symbol
               (list {$this list_interest_objects})
               (propanim_selected
                  (on {$this set debug_draw_interest_objects 1})
                  (off {$this set debug_draw_interest_objects 0})
               )
               (help
                  "select an interest object here and select 'force_interest' below to force the character to look at it."
               )
               (post_sync {$this force_interest_named [interest_to_force]})
            )
         )
      )
   )
)
(CharGuitarString
   (description
      "moves a bone based on the position of the hand, nut, and bridge"
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext string)
   (types
      (open_strums
         (parser guitar_string_open)
         (enter
            {if [parser]
               {handle ([parser] add_sink $this)}
            }
         )
         (exit
            {if [parser]
               {handle ([parser] remove_sink $this)}
            }
         )
         (open {$this set_open 1})
         (closed {$this set_open 0})
      )
   )
   (editor
      (nut
         object
         (class Trans)
         (help "nut object")
      )
      (bridge
         object
         (class Trans)
         (help "bridge object")
      )
      (bend
         object
         (class Trans)
         (help "object to move between nut and bridge")
      )
      (target
         object
         (class Trans)
         (help "object to follow")
      )
   )
)
(CharBoneOffset
   (description "Offsets a dest bone.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext offset)
   (editor
      (dest
         object
         (class Trans)
         (help "The bone to offset")
      )
      (offset
         (vector
            (x float)
            (y float)
            (z float)
         )
         (help "the offset")
      )
   )
   (types)
)
(CharBlendBone
   (description "Set up a constraint between a series of target bones")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext blendbone)
   (types)
   (editor
      (targets
         (array
            (struct
               (target
                  object
                  (class Trans)
                  (help "object to constrain")
               )
               (weight float (help "influence value, from 0 to 1"))
            )
         )
      )
      (src_one
         object
         (class Trans)
         (help "Source object to drive constraint")
      )
      (src_two
         object
         (class Trans)
         (help "Source object to drive constraint")
      )
      (trans_x bool (help "Apply x translation?"))
      (trans_y bool (help "Apply x translation?"))
      (trans_z bool (help "Apply x translation?"))
      (rotation bool (help "Apply rotation constraint?"))
   )
)
(CharClipGroup
   (description
      "A related group of animations.  Gives you the lru one.  Usually no extension."
   )
   (allowed_dirs CharClipSet)
   (editor
      (clips
         (array
            object
            (class CharClip)
            (obj_flags no_null)
            (help "LRU list of clips belonging to this group")
         )
         (refresh)
      )
      (total_size
         int
         (help "Total size in bytes of clips")
         (read_only 1)
      )
      (total_seconds
         float
         (help "Total length in seconds of clips")
         (read_only 1)
      )
   )
   (types)
)
(CharClip
   (description
      "This is the simple form that stores

        samples and linearly interpolates between them. 

        Data is grouped by keyframe, for better RAM coherency

        better storage, interpolation, etc."
   )
   (allowed_dirs ObjectDir)
   (editor
      (start_beat
         float
         (help "Start beat, beat this clip starts at")
         (read_only 1)
         (refresh dirty)
      )
      (end_beat
         float
         (help "End beat, beat this clip ends at")
         (read_only 1)
         (refresh dirty)
      )
      (length_beats
         float
         (help "Length in beats")
         (read_only 1)
      )
      (length_seconds
         float
         (help "Length in seconds")
         (read_only 1)
      )
      (frames_per_sec
         float
         (help "Frames per second")
         (read_only 1)
      )
      (average_beats_per_sec
         float
         (help "average beats per second")
         (read_only 1)
      )
      (flags
         bitfield
         (list
            {if_else {$this has (clip_flags)}
               {$this clip_flags}
               ()
            }
         )
         (exclusive
            {if_else {$this has (exclusive_flags)}
               {$this exclusive_flags}
               ()
            }
         )
         (help "Search flags, app specific")
         (refresh dirty)
      )
      (sync_anim
         object
         (class Anim)
         (help
            "An animatable, like a PropAnim, you'd like play in sync with this clip"
         )
      )
      (default_blend
         int
         (list
            (
               "kPlayNoDefault"
               "kPlayNow"
               "kPlayDirty"
               "kPlayNoBlend"
               "kPlayFirst"
               "kPlayLast"
            )
         )
         (help "Blend mode, if any, to use by default for this clip")
      )
      (default_loop
         int
         (list
            (
               "kPlayNoDefault"
               "kPlayNoLoop"
               "kPlayLoop"
               "kPlayGraphLoop"
               "kPlayNodeLoop"
            )
         )
         (help "Looping mode, if any, to use by default for this clip")
      )
      (beat_align
         int
         (list
            (
               "kPlayBeatTime"
               "kPlayRealTime"
               "kPlayBeatAlign1"
               "kPlayBeatAlign2"
               "kPlayBeatAlign4"
               "kPlayBeatAlign8"
            )
         )
         (help "Time units/alignment, if any, for this clip")
      )
      (range float (help "Range in frames to randomly offset by when playing"))
      (relative
         object
         (class CharClip)
         (help "Make the clip all relative to this other clip's first frame")
      )
      (size
         int
         (read_only 1)
         (help "Size of the clip in bytes")
      )
      (do_not_compress
         bool
         (help "Check this to prevent any compression from happening on this clip")
      )
      (transitions
         (array
            (struct
               (clip
                  object
                  (class CharClip)
                  (help "clip it's transitioning to")
               )
               (nodes
                  (array
                     (struct
                        (cur_beat float (help "where to blend from in my clip"))
                        (next_beat float (help "where to blend to in clip"))
                     )
                  )
               )
            )
         )
         (read_only 1)
      )
      (events
         (array
            (struct
               (beat
                  float
                  (help "Beat the event should trigger")
                  (refresh events)
               )
               (event
                  symbol
                  (help "The handler to call on the CharClip")
                  (list
                     {if_else {== {$this get_type} }
                        ()
                        [event_handlers]
                     }
                  )
               )
            )
            (header
               {sprint
                  [events {elem $milo_prop_path 1} beat]
                  ": "
                  [events {elem $milo_prop_path 1} event]
               }
            )
         )
         (help "Events that get triggered during play")
      )
      (full
         (struct
            (bones
               (array
                  (struct
                     (name
                        symbol
                        (help "Bone to blend into")
                        (read_only 1)
                     )
                     (weight float (help "Weight to blend with"))
                     (preview_val
                        string
                        (help "Preview Value")
                        (read_only 1)
                     )
                  )
                  (header
                     {do
                        ($arr $milo_prop_path)
                        {push_back $arr name}
                        {$this get $milo_prop_path}
                     }
                  )
               )
               (help "Bones that are animated")
            )
            (num_samples
               int
               (help "how many keyframes")
               (read_only 1)
            )
            (preview_sample
               int
               (help "which sample to preview")
               (refresh)
            )
            (frames
               (array float)
               (help "which sample to play")
               (read_only 1)
            )
         )
      )
      (one
         (struct
            (bones
               (array
                  (struct
                     (name
                        symbol
                        (help "Bone to blend into")
                        (read_only 1)
                     )
                     (weight float (help "Weight to blend with"))
                     (preview_val
                        string
                        (help "Preview Value")
                        (read_only 1)
                     )
                  )
                  (header
                     {do
                        ($arr $milo_prop_path)
                        {push_back $arr name}
                        {$this get $milo_prop_path}
                     }
                  )
               )
               (help "Bones that are animated")
            )
            (num_samples
               int
               (help "how many keyframes")
               (read_only 1)
            )
            (preview_sample
               int
               (help "which sample to preview")
               (refresh)
            )
            (frames
               (array float)
               (help "which sample to play")
               (read_only 1)
            )
         )
      )
      (num_frames
         int
         (help "Number of original samples taken, pre-keyframe compression")
         (read_only 1)
         (no_test)
      )
      (facing_baked_out
         bool
         (help "Does this clip have facing baked out")
         (read_only 1)
      )
      (dirty
         bool
         (read_only 1)
         (help "Indicates transition graph needs updating")
      )
   )
   (views
      (Stats
         (blend_width [blend_width])
         (flags [flags])
         (default_blend [default_blend])
         (default_loop [default_loop])
         (length_seconds [length_seconds])
         (beat_align [beat_align])
         (range [range])
         (relative [relative])
         (size [size])
      )
      (Bones
         (size
            [size]
            (read_only 1)
         )
         (full_samples
            [full num_samples]
            (read_only 1)
         )
         (full_num_bones
            {$this size (full bones)}
            (read_only 1)
         )
         (one_num_bones
            {$this size (one bones)}
            (read_only 1)
         )
      )
      (Notes (Notes {$this note}))
      (Flags
         (beat_align [beat_align])
         (LeftArm {& [flags] 1} bool)
         (RightArm {& [flags] 2} bool)
         (LeftLeg {& [flags] 4} bool)
         (RightLeg {& [flags] 8} bool)
         (IdleRealtime {& [flags] 4096} bool)
         (Idle {& [flags] 8192} bool)
         (IdleIntense {& [flags] 16384} bool)
         (PlayMellow {& [flags] 32768} bool)
         (PlayNormal {& [flags] 65536} bool)
         (PlayIntense {& [flags] 131072} bool)
         (PlaySolo {& [flags] 262144} bool)
      )
   )
   (types
      (viseme
         (resource viseme_resource "kBandContextViseme")
         (remove_zeros 1)
      )
      (face_creator
         (resource viseme_resource "kBandContextFaceCreator")
         (remove_zeros 1)
      )
      (deform (resource deform_resource "kBandContextDeform"))
      (snake (resource snake_resource "kBandContextSnake"))
      (fox (resource fox_resource "kBandContextFox"))
      (vignette
         (resource vignette_resource "kBandContextVignette")
         (clip_flags
            ("kLeftArm"
               "kRightArm"
               "kLeftLeg"
               "kRightLeg"
               "kPlayDirectedCut"
               ("kValidForMale" "clip can play on a male character")
               ("kValidForFemale" "clip can play on a female character")
            )
         )
         (validate
            {if {has_substr {path_name $this} "vignette/transition/"}
               {notify_and_fix
                  {== [default_loop] 16}
                  {set [default_loop] 16}
                  $this
                  "is transition clip, should be kPlayNoLoop"
               }
            }
         )
      )
      (shell
         (resource shell_resource "kBandContextShell")
         (validate
            {do
               ($x)
               ($y)
               ($z)
               {$this get_rot bone_pelvis.quat [start_beat] $x $y $z}
               {if {> {abs $z} 120}
                  {notify
                     {path_name $this}
                     " shell clip has bad pelvis facing: "
                     $z
                     " degrees, please reexport"
                  }
               }
            }
            {if {|| {< [average_beats_per_sec] 1.90} {> [average_beats_per_sec] 2.10}}
               {notify
                  {path_name $this}
                  " shell clip has average bpm of "
                  {* 60 [average_beats_per_sec]}
                  ", needs to be closer to 120"
               }
            }
            {if {!= [beat_align] 512}
               {notify
                  {path_name $this}
                  " shell clip must have [beat_align] set to kPlayRealTime"
               }
            }
            {if {!= [default_blend] 0}
               {notify
                  {path_name $this}
                  " shell clip must have [default_blend] set to kPlayNoDefault"
               }
            }
            {if {!= [default_loop] 0}
               {notify
                  {path_name $this}
                  " shell clip must have [default_loop] set to kPlayNoDefault"
               }
            }
         )
         (editor
            (viseme_group
               symbol
               (list
                  (exp_rocker_smile_mellow
                     exp_rocker_smile_intense
                     exp_rocker_shout_eyesclosed
                     exp_rocker_shout_eyesopen
                     exp_rocker_bassface_aggressive
                     exp_rocker_bassface_cool
                     exp_rocker_soloface
                     exp_rocker_teethgrit_pained
                     exp_rocker_teethgrit_happy
                     exp_rocker_slackjawed
                     exp_spazz_snear_mellow
                     exp_spazz_snear_intense
                     exp_spazz_tongueout_side
                     exp_spazz_tongueout_front
                     exp_spazz_eyesclosed
                     exp_banger_teethgrit
                     exp_banger_oohface
                     exp_banger_roar
                     exp_banger_slackjawed
                     exp_dramatic_pouty
                     exp_dramatic_mouthopen
                     exp_dramatic_happy_eyesopen
                     exp_dramatic_happy_eyesclosed
                     exp_neutral_lo
                     exp_neutral_hi
                     exp_drummer_mellow
                     exp_drummer_normal
                     exp_drummer_intense
                     normal
                     sad
                  )
               )
               (post_sync
                  {if [viseme_group]
                     {if $clip.dude
                        {$clip.dude change_face_group [viseme_group]}
                     }
                  }
               )
               (help
                  "facial mood group for this animation. Is used when not playing lipsync on this clip."
               )
            )
            (save_viseme_group
               script
               (script
                  {set $origPath {find_original_path $this}}
                  {search_replace $origPath "/run/" "/run/anim_src/" $animsrcPath}
                  {if_else {&& {file_exists $animsrcPath} {! {has_substr $origPath "anim_src"}}}
                     {do
                        {set $clipDir {load_objects $animsrcPath}}
                        {if_else $clipDir
                           {do
                              {$clipDir perforce_sync $animsrcPath}
                              {{$clipDir find {$this name}} set viseme_group [viseme_group]}
                              {$clipDir perforce_resave}
                              {delete $clipDir}
                              {filter_notify $msg {has_substr $msg "Merging"} {merge_back $this false}}
                              {notify "Success!
Saved here:
" $animsrcPath "

And here:
" $origPath}
                           }
                           {notify "Error: couldn't load clips from here: 
" $animsrcPath}
                        }
                        \
                     }
                     {notify
                        "Error: can't find anim_src path for clip, expected it to be here:
"
                        $animsrcPath
                     }
                  }
               )
               (help
                  "saves changes to viseme group back into the original clipset, so the change sticks."
               )
            )
         )
         (clip_flags
            (
               ("kLeftArm" "Does this clip control the left arm?")
               ("kRightArm" "Does this clip control the right arm?")
               ("kValidForMale" "clip can play on a male character")
               ("kValidForFemale" "clip can play on a female character")
            )
         )
         (enter
            {if [viseme_group]
               {$clip.dude change_face_group [viseme_group]}
            }
         )
         (viseme_group normal)
      )
      (lighttarget_base
         (resource lighttarget_resource "kBandContextLightTargetBase")
      )
      (lighttarget_base_pos
         (resource lighttarget_resource "kBandContextLightTargetBasePos")
      )
      (lighttarget_base_rot
         (resource lighttarget_resource "kBandContextLightTargetBaseRot")
      )
      (lighttarget_target
         (resource lighttarget_resource "kBandContextLightTargetTarget")
      )
      (lighttarget_all
         (resource lighttarget_resource "kBandContextLightTargetAll")
      )
      (guitar_body
         (resource guitar_resource "kBandContextGuitarBody")
         (clip_flags
            ("kLeftArm"
               "kRightArm"
               "kPlayIdleRealtime"
               "kPlayIdle"
               "kPlayIdleIntense"
               "kPlayMellow"
               "kPlayNormal"
               "kPlayIntense"
               "kPlaySolo"
               "kPlayDirectedCut"
               "kValidGuitar"
               "kValidBass"
               (
                  "kLookAtCam"
                  "Forces character's eyes to look at the camera.  Won't happen if cam is out of character's view cone though..."
               )
            )
         )
         MUSICIAN_TRANSITIONS
         (transition_bone_weights (bone_pos_guitar.mesh 0))
         (editor
            (viseme_group
               symbol
               (list
                  (exp_rocker_smile_mellow
                     exp_rocker_smile_intense
                     exp_rocker_shout_eyesclosed
                     exp_rocker_shout_eyesopen
                     exp_rocker_bassface_aggressive
                     exp_rocker_bassface_cool
                     exp_rocker_soloface
                     exp_rocker_teethgrit_pained
                     exp_rocker_teethgrit_happy
                     exp_rocker_slackjawed
                     exp_spazz_snear_mellow
                     exp_spazz_snear_intense
                     exp_spazz_tongueout_side
                     exp_spazz_tongueout_front
                     exp_spazz_eyesclosed
                     exp_banger_teethgrit
                     exp_banger_oohface
                     exp_banger_roar
                     exp_banger_slackjawed
                     exp_dramatic_pouty
                     exp_dramatic_mouthopen
                     exp_dramatic_happy_eyesopen
                     exp_dramatic_happy_eyesclosed
                     exp_neutral_lo
                     exp_neutral_hi
                     exp_drummer_mellow
                     exp_drummer_normal
                     exp_drummer_intense
                     normal
                     sad
                  )
               )
               (post_sync
                  {if [viseme_group]
                     {if $clip.dude
                        {$clip.dude change_face_group [viseme_group]}
                     }
                  }
               )
               (help
                  "facial mood group for this animation. Is used when not playing lipsync on this clip."
               )
            )
            (save_viseme_group
               script
               (script
                  {set $origPath {find_original_path $this}}
                  {search_replace $origPath "/run/" "/run/anim_src/" $animsrcPath}
                  {if_else {&& {file_exists $animsrcPath} {! {has_substr $origPath "anim_src"}}}
                     {do
                        {set $clipDir {load_objects $animsrcPath}}
                        {if_else $clipDir
                           {do
                              {$clipDir perforce_sync $animsrcPath}
                              {{$clipDir find {$this name}} set viseme_group [viseme_group]}
                              {$clipDir perforce_resave}
                              {delete $clipDir}
                              {filter_notify $msg {has_substr $msg "Merging"} {merge_back $this false}}
                              {notify "Success!
Saved here:
" $animsrcPath "

And here:
" $origPath}
                           }
                           {notify "Error: couldn't load clips from here: 
" $animsrcPath}
                        }
                        \
                     }
                     {notify
                        "Error: can't find anim_src path for clip, expected it to be here:
"
                        $animsrcPath
                     }
                  }
               )
               (help
                  "saves changes to viseme group back into the original clipset, so the change sticks."
               )
            )
         )
         (viseme_group normal)
         (enter
            {if [viseme_group]
               {$clip.dude change_face_group [viseme_group]}
            }
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named WorldCamInterest.intr}
            }
         )
         (exit
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named}
            }
            {with $clip.dude
               {if {exists left_hand.weight}
                  {left_hand.weight set beats_per_weight 0}
               }
               {if {exists right_hand.weight}
                  {right_hand.weight set beats_per_weight 0}
               }
               {if {exists look_at_camera.weight}
                  {look_at_camera.weight set beats_per_weight 0}
               }
            }
         )
         (event_handlers
            (set_leftarm_true
               set_rightarm_true
               set_leftarm_false
               set_rightarm_false
               sfx_gtr_smash
               sfx_mic_drop
               anim_mic_drop
               lookat_cam_start
               lookat_cam_stop
               freeze
            )
         )
         (freeze)
         (lookat_cam_start
            {|= [flags] 268435456}
            {$this set_beats_per_weight look_at_camera.weight}
         )
         (lookat_cam_stop
            {&= [flags] {~ 268435456}}
            {$this set_beats_per_weight look_at_camera.weight}
         )
         (set_leftarm_true
            {|= [flags] 1}
            {$this set_beats_per_weight left_hand.weight}
         )
         (set_rightarm_true
            {|= [flags] 2}
            {$this set_beats_per_weight right_hand.weight}
         )
         (set_leftarm_false
            {&= [flags] {~ 1}}
            {$this set_beats_per_weight left_hand.weight}
         )
         (set_rightarm_false
            {&= [flags] {~ 2}}
            {$this set_beats_per_weight right_hand.weight}
         )
         (set_beats_per_weight
            ($setter)
            {do
               ($weight {find_obj $clip.dude $setter})
               {if $weight
                  {$weight set beats_per_weight 0.50}
               }
            }
         )
         (sfx_gtr_smash {play_common_seq gtr_smash.cue})
         (sfx_mic_drop {play_common_seq mic_drop.cue})
         (pose_resource {bandchardesc_pose_resource $this})
      )
      (fret_left
         (resource guitar_resource "kBandContextFretLeft")
         (event_handlers ())
      )
      (guitar_all
         (resource guitar_resource "kBandContextAllGuitar")
         (event_handlers ())
      )
      (strum_right
         (resource guitar_resource "kBandContextStrumRight")
         (event_handlers ())
      )
      (bass_offset
         (resource guitar_resource "kBandContextBassOffset")
         (event_handlers ())
      )
      (strum_strings_hi
         (resource guitar_resource "kBandContextStrumStringsHi")
         (event_handlers ())
      )
      (strum_strings_lo
         (resource guitar_resource "kBandContextStrumStringsLo")
         (event_handlers ())
      )
      (mic_body
         (resource vocal_resource "kBandContextVocalist")
         (clip_flags
            ("kPlayIdleRealtime"
               "kPlayIdle"
               "kPlayIdleIntense"
               "kPlayMellow"
               "kPlayNormal"
               "kPlayIntense"
               "kPlayDirectedCut"
               "kDisableLipSync"
               "kShowMicStand"
               (
                  "kLookAtCam"
                  "Forces character's eyes to look at the camera.  Won't happen if cam is out of character's view cone though..."
               )
            )
         )
         (editor
            (viseme_group
               symbol
               (list
                  (exp_rocker_smile_mellow
                     exp_rocker_smile_intense
                     exp_rocker_shout_eyesclosed
                     exp_rocker_shout_eyesopen
                     exp_rocker_bassface_aggressive
                     exp_rocker_bassface_cool
                     exp_rocker_soloface
                     exp_rocker_teethgrit_pained
                     exp_rocker_teethgrit_happy
                     exp_rocker_slackjawed
                     exp_spazz_snear_mellow
                     exp_spazz_snear_intense
                     exp_spazz_tongueout_side
                     exp_spazz_tongueout_front
                     exp_spazz_eyesclosed
                     exp_banger_teethgrit
                     exp_banger_oohface
                     exp_banger_roar
                     exp_banger_slackjawed
                     exp_dramatic_pouty
                     exp_dramatic_mouthopen
                     exp_dramatic_happy_eyesopen
                     exp_dramatic_happy_eyesclosed
                     exp_neutral_lo
                     exp_neutral_hi
                     exp_drummer_mellow
                     exp_drummer_normal
                     exp_drummer_intense
                     normal
                     sad
                  )
               )
               (post_sync
                  {if [viseme_group]
                     {if $clip.dude
                        {$clip.dude change_face_group [viseme_group]}
                     }
                  }
               )
               (help
                  "facial mood group for this animation. Is used when not playing lipsync on this clip."
               )
            )
            (save_viseme_group
               script
               (script
                  {set $origPath {find_original_path $this}}
                  {search_replace $origPath "/run/" "/run/anim_src/" $animsrcPath}
                  {if_else {&& {file_exists $animsrcPath} {! {has_substr $origPath "anim_src"}}}
                     {do
                        {set $clipDir {load_objects $animsrcPath}}
                        {if_else $clipDir
                           {do
                              {$clipDir perforce_sync $animsrcPath}
                              {{$clipDir find {$this name}} set viseme_group [viseme_group]}
                              {$clipDir perforce_resave}
                              {delete $clipDir}
                              {filter_notify $msg {has_substr $msg "Merging"} {merge_back $this false}}
                              {notify "Success!
Saved here:
" $animsrcPath "

And here:
" $origPath}
                           }
                           {notify "Error: couldn't load clips from here: 
" $animsrcPath}
                        }
                        \
                     }
                     {notify
                        "Error: can't find anim_src path for clip, expected it to be here:
"
                        $animsrcPath
                     }
                  }
               )
               (help
                  "saves changes to viseme group back into the original clipset, so the change sticks."
               )
            )
         )
         (enter
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named WorldCamInterest.intr}
            }
            {if [viseme_group]
               {$clip.dude change_face_group [viseme_group]}
            }
            {$clip.dude set_instrument
               {cond
                  ({has_substr {$this name} tambourine} tambourine)
                  ({has_substr {$this name} cowbell} cowbell)
                  ({has_substr {$this name} clap} clap)
                  mic
               }
            }
         )
         (exit
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named}
            }
         )
         (viseme_group normal)
         (event_handlers (lookat_cam_start lookat_cam_stop freeze))
         (freeze)
         (lookat_cam_start
            {|= [flags] 268435456}
            {$this set_beats_per_weight look_at_camera.weight}
         )
         (lookat_cam_stop
            {&= [flags] {~ 268435456}}
            {$this set_beats_per_weight look_at_camera.weight}
         )
         (set_beats_per_weight
            ($setter)
            {do
               ($weight {find_obj $clip.dude $setter})
               {if $weight
                  {$weight set beats_per_weight 0.50}
               }
            }
         )
         (transition_version 7)
         (on_transition
            {if {&& {== $a_clip $b_clip} {& {$a_clip get flags} 134217728}}
               {do
                  {$this generate_transitions
                     (beat_align 1)
                     (restrict {&& {< $b_start 2} {< $a_end 2}})
                  }
               }
            }
         )
         (pose_resource {bandchardesc_pose_resource $this})
      )
      (keyboard_all
         (resource keyboard_resource "kBandContextAllKeyboard")
         (event_handlers ())
      )
      (keyboard_body
         (resource keyboard_resource "kBandContextKeyboardBody")
         (clip_flags
            ("kLeftArm"
               "kRightArm"
               "kPlayIdleRealtime"
               "kPlayIdle"
               "kPlayIdleIntense"
               "kPlayMellow"
               "kPlayNormal"
               "kPlayIntense"
               "kPlayDirectedCut"
               (
                  "kLookAtCam"
                  "Forces character's eyes to look at the camera.  Won't happen if cam is out of character's view cone though..."
               )
            )
         )
         (editor
            (viseme_group
               symbol
               (list
                  (exp_rocker_smile_mellow
                     exp_rocker_smile_intense
                     exp_rocker_shout_eyesclosed
                     exp_rocker_shout_eyesopen
                     exp_rocker_bassface_aggressive
                     exp_rocker_bassface_cool
                     exp_rocker_soloface
                     exp_rocker_teethgrit_pained
                     exp_rocker_teethgrit_happy
                     exp_rocker_slackjawed
                     exp_spazz_snear_mellow
                     exp_spazz_snear_intense
                     exp_spazz_tongueout_side
                     exp_spazz_tongueout_front
                     exp_spazz_eyesclosed
                     exp_banger_teethgrit
                     exp_banger_oohface
                     exp_banger_roar
                     exp_banger_slackjawed
                     exp_dramatic_pouty
                     exp_dramatic_mouthopen
                     exp_dramatic_happy_eyesopen
                     exp_dramatic_happy_eyesclosed
                     exp_neutral_lo
                     exp_neutral_hi
                     exp_drummer_mellow
                     exp_drummer_normal
                     exp_drummer_intense
                     normal
                     sad
                  )
               )
               (post_sync
                  {if [viseme_group]
                     {if $clip.dude
                        {$clip.dude change_face_group [viseme_group]}
                     }
                  }
               )
               (help
                  "facial mood group for this animation. Is used when not playing lipsync on this clip."
               )
            )
            (save_viseme_group
               script
               (script
                  {set $origPath {find_original_path $this}}
                  {search_replace $origPath "/run/" "/run/anim_src/" $animsrcPath}
                  {if_else {&& {file_exists $animsrcPath} {! {has_substr $origPath "anim_src"}}}
                     {do
                        {set $clipDir {load_objects $animsrcPath}}
                        {if_else $clipDir
                           {do
                              {$clipDir perforce_sync $animsrcPath}
                              {{$clipDir find {$this name}} set viseme_group [viseme_group]}
                              {$clipDir perforce_resave}
                              {delete $clipDir}
                              {filter_notify $msg {has_substr $msg "Merging"} {merge_back $this false}}
                              {notify "Success!
Saved here:
" $animsrcPath "

And here:
" $origPath}
                           }
                           {notify "Error: couldn't load clips from here: 
" $animsrcPath}
                        }
                        \
                     }
                     {notify
                        "Error: can't find anim_src path for clip, expected it to be here:
"
                        $animsrcPath
                     }
                  }
               )
               (help
                  "saves changes to viseme group back into the original clipset, so the change sticks."
               )
            )
         )
         (enter
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named WorldCamInterest.intr}
            }
            {if [viseme_group]
               {$clip.dude change_face_group [viseme_group]}
            }
         )
         (exit
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named}
            }
         )
         (viseme_group normal)
         (event_handlers ())
         (pose_resource {bandchardesc_pose_resource $this})
      )
      (keyboard_left_hand
         (resource keyboard_resource "kBandContextKeyboardLeft")
         (clip_flags ("kLeftArm"))
         (event_handlers ())
      )
      (keyboard_right_hand
         (resource keyboard_resource "kBandContextKeyboardRight")
         (clip_flags ("kRightArm"))
         (event_handlers ())
      )
      (keyboard_body_add
         (resource keyboard_resource "kBandContextKeyboardBodyAdd")
         (clip_flags
            ("kLeftArm"
               "kRightArm"
               "kPlayIdleRealtime"
               "kPlayIdle"
               "kPlayIdleIntense"
               "kPlayMellow"
               "kPlayNormal"
               "kPlayIntense"
               "kPlayDirectedCut"
               (
                  "kLookAtCam"
                  "Forces character's eyes to look at the camera.  Won't happen if cam is out of character's view cone though..."
               )
            )
         )
         (enter
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named WorldCamInterest.intr}
            }
         )
         (exit
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named}
            }
         )
         (event_handlers ())
      )
      (keyboard_key_C2
         (resource keyboard_resource "kBandContextKeyboardKeyC2")
         (event_handlers ())
      )
      (keyboard_key_CSharp2
         (resource keyboard_resource "kBandContextKeyboardKeyCSharp2")
         (event_handlers ())
      )
      (keyboard_key_D2
         (resource keyboard_resource "kBandContextKeyboardKeyD2")
         (event_handlers ())
      )
      (keyboard_key_DSharp2
         (resource keyboard_resource "kBandContextKeyboardKeyDSharp2")
         (event_handlers ())
      )
      (keyboard_key_E2
         (resource keyboard_resource "kBandContextKeyboardKeyE2")
         (event_handlers ())
      )
      (keyboard_key_F2
         (resource keyboard_resource "kBandContextKeyboardKeyF2")
         (event_handlers ())
      )
      (keyboard_key_FSharp2
         (resource keyboard_resource "kBandContextKeyboardKeyFSharp2")
         (event_handlers ())
      )
      (keyboard_key_G2
         (resource keyboard_resource "kBandContextKeyboardKeyG2")
         (event_handlers ())
      )
      (keyboard_key_GSharp2
         (resource keyboard_resource "kBandContextKeyboardKeyGSharp2")
         (event_handlers ())
      )
      (keyboard_key_A2
         (resource keyboard_resource "kBandContextKeyboardKeyA2")
         (event_handlers ())
      )
      (keyboard_key_ASharp2
         (resource keyboard_resource "kBandContextKeyboardKeyASharp2")
         (event_handlers ())
      )
      (keyboard_key_B2
         (resource keyboard_resource "kBandContextKeyboardKeyB2")
         (event_handlers ())
      )
      (keyboard_key_C3
         (resource keyboard_resource "kBandContextKeyboardKeyC3")
         (event_handlers ())
      )
      (keyboard_key_CSharp3
         (resource keyboard_resource "kBandContextKeyboardKeyCSharp3")
         (event_handlers ())
      )
      (keyboard_key_D3 (resource keyboard_resource "kBandContextKeyboardKeyD3"))
      (keyboard_key_DSharp3
         (resource keyboard_resource "kBandContextKeyboardKeyDSharp3")
         (event_handlers ())
      )
      (keyboard_key_E3
         (resource keyboard_resource "kBandContextKeyboardKeyE3")
         (event_handlers ())
      )
      (keyboard_key_F3
         (resource keyboard_resource "kBandContextKeyboardKeyF3")
         (event_handlers ())
      )
      (keyboard_key_FSharp3
         (resource keyboard_resource "kBandContextKeyboardKeyFSharp3")
         (event_handlers ())
      )
      (keyboard_key_G3
         (resource keyboard_resource "kBandContextKeyboardKeyG3")
         (event_handlers ())
      )
      (keyboard_key_GSharp3
         (resource keyboard_resource "kBandContextKeyboardKeyGSharp3")
         (event_handlers ())
      )
      (keyboard_key_A3
         (resource keyboard_resource "kBandContextKeyboardKeyA3")
         (event_handlers ())
      )
      (keyboard_key_ASharp3
         (resource keyboard_resource "kBandContextKeyboardKeyASharp3")
         (event_handlers ())
      )
      (keyboard_key_B3
         (resource keyboard_resource "kBandContextKeyboardKeyB3")
         (event_handlers ())
      )
      (keyboard_key_C4
         (resource keyboard_resource "kBandContextKeyboardKeyC4")
         (event_handlers ())
      )
      (cowbell
         (resource drum_resource "kBandContextCowbell")
         (event_handlers ())
      )
      (cymbal_left
         (resource drum_resource "kBandContextCymbalLeft")
         (event_handlers ())
      )
      (cymbal_right
         (resource drum_resource "kBandContextCymbalRight")
         (event_handlers ())
      )
      (drum_all
         (resource drum_resource "kBandContextAllDrum")
         (event_handlers ())
      )
      (drum_add
         (resource drum_resource "kBandContextDrumAdd")
         (clip_flags
            ("kPlayIdleRealtime"
               "kPlayIdle"
               "kPlayIdleIntense"
               "kPlayMellow"
               "kPlayNormal"
               "kPlayIntense"
               "kPlayDirectedCut"
               "kLeftArm"
               "kRightArm"
               (
                  "kLookAtCam"
                  "Forces character's eyes to look at the camera.  Won't happen if cam is out of character's view cone though..."
               )
            )
         )
         (enter
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named WorldCamInterest.intr}
            }
         )
         (exit
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named}
            }
            {with $clip.dude
               {if {exists left_hand.weight}
                  {left_hand.weight set beats_per_weight 0}
               }
               {if {exists right_hand.weight}
                  {right_hand.weight set beats_per_weight 0}
               }
            }
         )
         (event_handlers
            (set_leftarm_true set_rightarm_true set_leftarm_false set_rightarm_false)
         )
         (set_leftarm_true
            {|= [flags] 1}
            {$this set_beats_per_weight left_hand.weight}
         )
         (set_rightarm_true
            {|= [flags] 2}
            {$this set_beats_per_weight right_hand.weight}
         )
         (set_leftarm_false
            {&= [flags] {~ 1}}
            {$this set_beats_per_weight left_hand.weight}
         )
         (set_rightarm_false
            {&= [flags] {~ 2}}
            {$this set_beats_per_weight right_hand.weight}
         )
         (set_beats_per_weight
            ($setter)
            {do
               ($weight {find_obj $clip.dude $setter})
               {if $weight
                  {$weight set beats_per_weight 0.50}
               }
            }
         )
         MUSICIAN_TRANSITIONS
      )
      (drum_body
         (resource drum_resource "kBandContextDrumBody")
         (clip_flags
            ("kPlayIdleRealtime"
               "kPlayIdle"
               "kPlayIdleIntense"
               "kPlayMellow"
               "kPlayNormal"
               "kPlayIntense"
               "kPlayDirectedCut"
               "kLeftArm"
               "kRightArm"
               "kLeftLeg"
               "kRightLeg"
               (
                  "kLookAtCam"
                  "Forces character's eyes to look at the camera.  Won't happen if cam is out of character's view cone though..."
               )
            )
         )
         (editor
            (viseme_group
               symbol
               (list
                  (exp_rocker_smile_mellow
                     exp_rocker_smile_intense
                     exp_rocker_shout_eyesclosed
                     exp_rocker_shout_eyesopen
                     exp_rocker_bassface_aggressive
                     exp_rocker_bassface_cool
                     exp_rocker_soloface
                     exp_rocker_teethgrit_pained
                     exp_rocker_teethgrit_happy
                     exp_rocker_slackjawed
                     exp_spazz_snear_mellow
                     exp_spazz_snear_intense
                     exp_spazz_tongueout_side
                     exp_spazz_tongueout_front
                     exp_spazz_eyesclosed
                     exp_banger_teethgrit
                     exp_banger_oohface
                     exp_banger_roar
                     exp_banger_slackjawed
                     exp_dramatic_pouty
                     exp_dramatic_mouthopen
                     exp_dramatic_happy_eyesopen
                     exp_dramatic_happy_eyesclosed
                     exp_neutral_lo
                     exp_neutral_hi
                     exp_drummer_mellow
                     exp_drummer_normal
                     exp_drummer_intense
                     normal
                     sad
                  )
               )
               (post_sync
                  {if [viseme_group]
                     {if $clip.dude
                        {$clip.dude change_face_group [viseme_group]}
                     }
                  }
               )
               (help
                  "facial mood group for this animation. Is used when not playing lipsync on this clip."
               )
            )
            (save_viseme_group
               script
               (script
                  {set $origPath {find_original_path $this}}
                  {search_replace $origPath "/run/" "/run/anim_src/" $animsrcPath}
                  {if_else {&& {file_exists $animsrcPath} {! {has_substr $origPath "anim_src"}}}
                     {do
                        {set $clipDir {load_objects $animsrcPath}}
                        {if_else $clipDir
                           {do
                              {$clipDir perforce_sync $animsrcPath}
                              {{$clipDir find {$this name}} set viseme_group [viseme_group]}
                              {$clipDir perforce_resave}
                              {delete $clipDir}
                              {filter_notify $msg {has_substr $msg "Merging"} {merge_back $this false}}
                              {notify "Success!
Saved here:
" $animsrcPath "

And here:
" $origPath}
                           }
                           {notify "Error: couldn't load clips from here: 
" $animsrcPath}
                        }
                        \
                     }
                     {notify
                        "Error: can't find anim_src path for clip, expected it to be here:
"
                        $animsrcPath
                     }
                  }
               )
               (help
                  "saves changes to viseme group back into the original clipset, so the change sticks."
               )
            )
         )
         (enter
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named WorldCamInterest.intr}
            }
            {if [viseme_group]
               {$clip.dude change_face_group [viseme_group]}
            }
         )
         (exit
            {if {& [flags] 268435456}
               {$clip.dude force_interest_named}
            }
         )
         (viseme_group normal)
         (event_handlers (lookat_cam_start lookat_cam_stop freeze))
         (freeze)
         (lookat_cam_start
            {|= [flags] 268435456}
            {$this set_beats_per_weight look_at_camera.weight}
         )
         (lookat_cam_stop
            {&= [flags] {~ 268435456}}
            {$this set_beats_per_weight look_at_camera.weight}
         )
         (set_beats_per_weight
            ($setter)
            {do
               ($weight {find_obj $clip.dude $setter})
               {if $weight
                  {$weight set beats_per_weight 0.50}
               }
            }
         )
         MUSICIAN_TRANSITIONS
         (pose_resource {bandchardesc_pose_resource $this})
      )
      (floortom
         (resource drum_resource "kBandContextFloortom")
         (event_handlers ())
      )
      (hihat
         (resource drum_resource "kBandContextHihat")
         (event_handlers ())
      )
      (kick
         (resource drum_resource "kBandContextKick")
         (event_handlers ())
      )
      (pedal_left
         (resource drum_resource "kBandContextPedalLeft")
         (event_handlers ())
      )
      (pedal_right
         (resource drum_resource "kBandContextPedalRight")
         (event_handlers ())
      )
      (ride
         (resource drum_resource "kBandContextRide")
         (event_handlers ())
      )
      (snare
         (resource drum_resource "kBandContextSnare")
         (event_handlers ())
      )
      (stick_left
         (resource drum_resource "kBandContextStickLeft")
         (event_handlers ())
      )
      (stick_right
         (resource drum_resource "kBandContextStickRight")
         (event_handlers ())
      )
      (tom_left
         (resource drum_resource "kBandContextTomLeft")
         (event_handlers ())
      )
      (tom_right
         (resource drum_resource "kBandContextTomRight")
         (event_handlers ())
      )
      (extras
         (resource extras_resource "kBandContextExtras")
         (event_handlers ())
      )
      (crowd
         (resource crowd_resource "kBandContextCrowd")
         (clip_flags ())
         (hand clap)
         (editor
            (hand
               symbol
               (list (clap fist horns lighters))
               (help "what the hands should look like")
            )
         )
         (event_handlers ())
         (transition_version 10)
         (on_transition
            {if {$a_clip shares_groups $b_clip}
               {$this generate_transitions
                  (beat_align 1)
                  (restrict {&& {< $b_start 1} {< $a_end 2}})
               }
            }
         )
         (enter
            {do
               ($hand [hand])
               {with $clip.dude
                  {if {exists hands.grp}
                     {hands.grp set
                        draw_only
                        {switch $hand
                           (clap clap.grp)
                           (fist fist.grp)
                           (horns horns.grp)
                           (lighters lighter.grp)
                        }
                     }
                  }
               }
            }
         )
      )
   )
   (init
      {if {$this dir}
         {do
            ($path {{$this dir} get_path_name})
            {print "path is " $path "
"}
            {$this set_type
               {cond
                  ({has_substr $path "head_male_clips"} face_creator)
                  ({has_substr $path "head_female_clips"} face_creator)
                  ({has_substr $path "viseme"} viseme)
                  ({&&
                        {has_substr
                           $path
                           "vignette"
                        }
                        {has_substr
                           {$this name}
                           "extra"
                        }
                     }
                     extras
                  )
                  ({&&
                        {has_substr
                           $path
                           "vignette"
                        }
                        {has_substr
                           {$this name}
                           "crowd"
                        }
                     }
                     crowd
                  )
                  ({has_substr $path "vignette"} vignette)
                  ({has_substr $path "deform"} deform)
                  ({has_substr $path "crowd"} crowd)
                  ({has_substr $path "extras"} extras)
                  ({has_substr $path "meta"} shell)
                  ({has_substr $path "fox_clips"} fox)
                  ({has_substr $path "snake_clips"} snake)
                  vignette
               }
            }
            {switch {$this get_type}
               (vignette
                  {set [beat_align] 512}
                  {set [flags]
                     {| 1 2 520192 4 8}
                  }
                  {set [default_loop] 16}
               )
               (deform {set [beat_align] 512})
               (viseme
                  {set [beat_align] 512}
                  {set [relative] {{$this dir} find Base}}
                  {set [default_loop] 32}
               )
               (face_creator
                  {set [beat_align] 512}
                  {unless {== {$this name} base}
                     {set [relative] {{$this dir} find base}}
                  }
                  {set [default_loop] 32}
               )
               (
                  (guitar_body keyboard drum_body drum_add)
                  {set [beat_align] 4096}
               )
               (crowd
                  {if_else {has_substr $path "vignette"}
                     {do
                        {set [beat_align] 512}
                        {set [default_loop] 16}
                     }
                     {set [beat_align] 0}
                  }
               )
               (extras
                  {if_else {has_substr $path "vignette"}
                     {do
                        {set [beat_align] 512}
                        {set [default_loop] 16}
                     }
                     {set [beat_align] 512}
                  }
               )
               (shell {set [beat_align] 512})
               (fox {set [beat_align] 512})
               (snake {set [beat_align] 512})
            }
         }
      }
   )
)
(CharBone
   (description
      "A Character system bone, conveys degrees of freedom to animate in a CharClip, lives in CharBoneDir"
   )
   (allowed_dirs CharBoneDir)
   (ext cb)
   (superclasses Object)
   (editor
      (position_context
         bitfield
         (list {$this get_context_flags})
         (help "when to animate position")
      )
      (rotation
         int
         (list ("kRotNone" "kRotFull" "kRotX" "kRotY" "kRotZ"))
         (help "what axis or axes to animate")
      )
      (rotation_context
         bitfield
         (list {$this get_context_flags})
         (help "when to use this rotation context")
      )
      (scale_context
         bitfield
         (list {$this get_context_flags})
         (help "when to animate scale")
      )
      (target
         object
         (class CharBone)
         (help
            "If set will exactly track this target during keyframe acquisition, used for IK bones"
         )
      )
      (weights
         (array
            (struct
               (context
                  bitfield
                  (list {$this get_context_flags})
                  (help "context for this bone weight")
               )
               (weight float (help "bone weight for this context"))
            )
         )
         (help "array of contexts and corresponding bone weights")
      )
      (trans
         object
         (class Trans)
         (help "Object to specify trans info")
      )
      (bake_out_as_top_level
         bool
         (help
            "When baking out facing, use this as a top-level bone (like the pelvis)"
         )
      )
   )
   (views
      ('Degrees of Freedom'
         (position [position_context])
         (rotation [rotation])
         (rotation_context [rotation_context])
         (scale [scale_context])
      )
   )
   (types)
)
(CharBoneDir
   (description
      "A CharBone container, acts as a resource file, storing skeleton and DOF for particular contexts"
   )
   (allowed_dirs ObjectDir)
   (superclasses ObjectDir)
   (editor
      (move_context
         bitfield
         (list {$this get_context_flags})
         (help
            "context in which character should move itself around via bone_facing.pos and bone_facing.rotz bones"
         )
      )
      (bake_out_facing
         bool
         (help "if false, won't bake out facing, will just bake out position")
      )
      (recenter
         (struct
            (targets
               (array
                  object
                  (class CharBone)
                  (obj_flags no_null)
               )
               (help "bones to recenter, ie, bone_pelvis")
            )
            (average
               (array
                  object
                  (class CharBone)
                  (obj_flags no_null)
               )
               (help "bones to average to find the new center")
            )
            (slide
               bool
               (help
                  "Slide the character over the course of the clip.  If false, just uses the start of the clip"
               )
            )
         )
         (help
            "Used to limit travel.  Moves [targets] bones so that the average of the [average] bones will be at (0,0,0) at the start of the clip.  If slide is true evaluates the [average] bones and the start of the clip and end of the clip, and recenters [targets] smoothly between those."
         )
      )
      (merge_character
         file
         (help "Merge in bones from a character")
         (refresh recenter)
         (post_sync {milo update_objects})
      )
      (filter_context
         bitfield
         (list {$this get_context_flags})
         (help "Context to use for listing filter_bones")
         (refresh filter_bones filter_names)
         (no_test)
      )
      (filter_bones
         (array
            object
            (class CharBone)
            (read_only 1)
         )
         (help "bones with context specified in filter_context")
         (no_test)
      )
      (filter_names
         (array string (read_only 1))
         (help "name of bone with context specified in filter_context")
         (no_test)
      )
      (prune_bones
         script
         (script {$this prune_bones})
         (post_sync {milo update_objects})
         (help "eliminates bones with no DOF")
      )
   )
   (types)
   (resource_path "char/shared")
)
(CharBonesObject
   (description "Holds state for a set of bones")
   (editor
      (bones
         (array
            (struct
               (name
                  symbol
                  (help "Bone to blend into")
                  (read_only 1)
               )
               (weight float (help "Weight to blend with"))
               (preview_val
                  string
                  (help "Preview Value")
                  (read_only 1)
               )
            )
            (header
               {do
                  ($arr $milo_prop_path)
                  {push_back $arr name}
                  {$this get $milo_prop_path}
               }
            )
         )
         (help "Bones that are animated")
      )
   )
   (types)
)
(CharBonesAlloc
   (description "Holds state for a set of bones, and allocates own space")
   (superclasses CharBonesObject)
   (types)
)
(CharBonesBlender
   (description
      "Blends itself into another CharBones, clearing self each frame"
   )
   (superclasses CharPollable CharBonesAlloc)
   (allowed_dirs Character)
   (ext blender)
   (editor
      (dest
         object
         (class CharBonesObject)
         (help "CharBones to blend into")
      )
      (clip_type
         symbol
         (help "What type of clip we can accommodate")
         (list {get_clip_types})
      )
   )
   (types)
)
(CharBonesMeshes
   (description
      "Holds state for a set of bones, allocates own space, and sets meshes accordingly"
   )
   (superclasses CharBonesAlloc)
   (editor
      (meshes
         (array object (class Trans))
         (help "Transes we will change")
         (read_only 1)
      )
   )
   (types)
)
(CharClipSet
   (description "A <a href='#CharClip'>CharClip</a> container.")
   (allowed_dirs Character)
   (superclasses ObjectDir)
   (editor
      ('regenerate transitions'
         script
         (script {$this regenerate_transitions 1})
         (help
            "Regenerates the clip to clip transition graph.  This may take several minutes."
         )
      )
      (alphabetical_sort
         script
         (script
            {$this sort_groups}
            {if {exists milo}
               {milo update_objects}
            }
         )
         (help "Alphabetically sorts all the clips in all the groups")
      )
      (char_file_path
         file
         (help
            "Preview base character to use- for example, char/male/male_guitar.milo for male guitarist"
         )
      )
      (load_preview_character
         script
         (script {$this load_character})
         (help "Load up character from char_file_path")
      )
      (preview_clip
         object
         (class CharClip)
         (list {$this list_clips})
         (help "Pick a clip to play")
         (no_test)
      )
      (filter_flags
         bitfield
         (list
            {do
               ($clip {object ""})
               {$this iterate CharClip $c {set $clip $c}}
               {if_else {&& $clip {$clip has (clip_flags)}}
                  {$clip clip_flags}
                  ()
               }
            }
         )
         (help "Flags for filtering preview clip")
      )
      (still_clip
         object
         (class CharClip)
         (list {$this list_clips})
         (help "Set this to view drummer play anims")
         (no_test)
      )
      (bpm int (help "bpm for clip playing"))
      (preview_walk
         bool
         (help "Allow preview character to move around and walk?")
      )
      (compress_and_copy
         script
         (script
            {do
               ($path {{$this dir} get_path_name})
               {if_else {has_substr $path "/anim_src/"}
                  {do
                     {process_clips {$this dir}}
                     {notify "Done copying clips!"}
                  }
                  {notify "This only works on files in anim_src."}
               }
            }
         )
         (help "Copy all the clips in here over to the character directories.")
      )
      (total_size
         script
         (script
            {do
               ($total_size 0)
               {$this iterate_self CharClip $clip {+= $total_size {$clip get size}}}
               {notify "Total size is " {/ $total_size 1024} " k."}
            }
         )
         (help "Pop up a notify with the size of all the clips in this directory.")
      )
   )
   (types
      (portrait_poses
         (sync_objects {$this iterate_self CharClipGroup $g {$g randomize_index}})
      )
   )
)
(CharCollide
   (description "Feeds the bones when executed.")
   (allowed_dirs ObjectDir)
   (superclasses Trans)
   (ext coll)
   (editor
      (shape
         int
         (list
            (
               "kCollidePlane"
               "kCollideSphere"
               "kCollideInsideSphere"
               "kCollideCigar"
               "kCollideInsideCigar"
            )
         )
         (help "Type of collision")
         (refresh)
      )
      (mesh
         object
         (class Mesh)
         (help
            "Optional mesh that will deform, used to resize ourselves.  If this is set, make sure you are not parented to any bone with scale, such as an exo bone"
         )
         (refresh mesh_y_bias)
         (no_test)
      )
      (radius0
         float
         (help "Radius of the sphere, or of length0 hemisphere if cigar")
         (read_only {== [shape] 0})
      )
      (length0
         float
         (help
            "cigar: placement of radius0 hemisphere along X axis, must be < than length0, not used for sphere shapes"
         )
         (read_only {! {find_elem (3 4) [shape]}})
      )
      (radius1
         float
         (help "cigar: Radius of length1 hemisphere")
         (read_only {! {find_elem (3 4) [shape]}})
      )
      (length1
         float
         (help
            "cigar: placement of radius1 hemisphere along X axis, must be >= length0"
         )
         (read_only {! {find_elem (3 4) [shape]}})
      )
      (mesh_y_bias
         bool
         (help
            "For spheres + cigars, finds mesh points along positive y axis (the green one), makes a better fit for spheres where only one side should be the fit, like for chest and back collision volumes"
         )
         (read_only {|| {! [mesh]} {== 0 [shape]}})
      )
      (flags
         bitfield
         (list
            (
               "kHairBack"
               "kHairChest"
               "kHairFace"
               "kHairForehead"
               "kHairHead"
               "kHairLeftShoulder"
               "kHairRightShoulder"
               "kHairNeck"
               "kHairLeftThigh"
               "kHairRightThigh"
               "kHairLeftHip"
               "kHairRigh2hip"
            )
         )
         (help "Which collision volumes to hook up to this strand for collision")
      )
   )
   (types)
)
(CharMeshHide
   (description "Hides meshes based on flags in other CharMeshHide.")
   (allowed_dirs Character)
   (ext hide)
   (types)
   (editor
      (flags
         bitfield
         (list
            (
               (
                  "kHideVignette"
                  "Means geometry is too big for vignettes, but closet and game should be fine"
               )
               "kHideLongCoat"
               "kHideLongDress"
               "kHideLongSleeve"
               "kHideMidSleeve"
               "kHideFullSleeve"
               (
                  "kHideHead"
                  "Means the whole head should be hidden, like for a horse head mask or something crazy"
               )
               "kHideLongGlove"
               "kHideMask"
               "kHideLongBoot"
               "kHideShortSleeve"
               "kHideShortBoot"
               "kHideLongPants"
               "kHideGlasses"
               (
                  "kHideSocks"
                  "Means legs include socks, so show socked foot geometry rather than barefoot geometry"
               )
            )
         )
         (help
            "Which flags this CharMeshHide has, will be used to hide/show other geometry"
         )
      )
      (hides
         (array
            (struct
               (drawable
                  object
                  (class Draw)
                  (help "Drawable to hide if any other CharMeshHide has any flag in [flags]")
               )
               (flags
                  bitfield
                  (list
                     (
                        (
                           "kHideVignette"
                           "Means geometry is too big for vignettes, but closet and game should be fine"
                        )
                        "kHideLongCoat"
                        "kHideLongDress"
                        "kHideLongSleeve"
                        "kHideMidSleeve"
                        "kHideFullSleeve"
                        (
                           "kHideHead"
                           "Means the whole head should be hidden, like for a horse head mask or something crazy"
                        )
                        "kHideLongGlove"
                        "kHideMask"
                        "kHideLongBoot"
                        "kHideShortSleeve"
                        "kHideShortBoot"
                        "kHideLongPants"
                        "kHideGlasses"
                        (
                           "kHideSocks"
                           "Means legs include socks, so show socked foot geometry rather than barefoot geometry"
                        )
                     )
                  )
                  (help "If any flags match, hides [draw], unless [show] is true")
               )
               (show
                  bool
                  (help "If true, shows [draw] instead of hiding it if any [flags] match")
               )
            )
         )
      )
   )
)
(CharCuff
   (description
      "A cuff used to constrain colliding outfits against each other.

      for example boots against pants.  The widest cuff wins"
   )
   (allowed_dirs Character)
   (superclasses Trans)
   (ext cuff)
   (editor
      (offset0
         float
         (help "Inner offset, usually negative, the inside of the cuff")
      )
      (radius0
         float
         (help "Inner radius, usually the smallest, the inside of the cuff")
      )
      (offset1
         float
         (help "middle offset, usually zero, the center of the cuff")
      )
      (radius1
         float
         (help
            "middle radius for the center of the cuff, should be at the cuff line"
         )
      )
      (offset2
         float
         (help "Outer offset, usually positive, the outside of the cuff")
      )
      (radius2
         float
         (help "Outer radius, usually the largest, the outside of the cuff")
      )
      (outer_radius
         float
         (help
            "Outside radius, should encompass the biggest thing on the outside, biggest one wins.  For incompressible things like big boots should be the biggest part.  For soft things like cloth should just be radius1"
         )
      )
      (open_end
         bool
         (help
            "Is the inside open or closed, open is good for things like gauntlets"
         )
      )
      (bone
         object
         (class Trans)
         (help "The bone of interest, like bone_R-knee for boot and pant cuffs")
      )
      (eccentricity
         float
         (range 0 1)
         (help "How much smaller to make the radius along Y, must be < 1")
      )
      (category
         symbol
         (help "The outfit category to cuff against, must be set to work")
         (list (feet legs torso wrist glasses))
      )
      (ignore
         (array object (class Mesh))
         (help "meshes to never deform")
      )
   )
   (types)
)
(CharDriver
   (description
      "Class to Drive, Schedule and Blend CharClips.  Basically a stack, new ones are pushed onto the bottom, start playing at some point, and then pop off the ones above it once they are fully blended in."
   )
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext drv)
   (editor
      (bones
         object
         (class CharBonesObject)
         (help "The CharBones object to add or blend into.")
      )
      (clip_type
         symbol
         (help "What type of clip we can blend")
         (list {get_clip_types})
      )
      (clips
         object
         (class ObjectDir)
         (help "pointer to clips object")
         (no_test)
      )
      (blend_width float (help "Width in beats to blend to the next clip"))
      (realign
         bool
         (help
            "Realigns the clips to always be aligned with the beat in the measure"
         )
      )
      (apply
         int
         (list ("kApplyBlend" "kApplyAdd" "kApplyRotateTo" "kApplyBlendWeights"))
         (help "How to apply the driver to its bones")
      )
      (first_playing_clip
         object
         (class CharClip)
         (dir [clips])
         (read_only 1)
         (help "First clip (blending-wise) being played")
      )
      (beat_scale
         float
         (help "Scale factor applied to incoming beat")
         (no_test)
      )
      (default_clip_or_group
         object
         (class Object)
         (list {$this get_clip_or_group_list})
         (dir_prop clips)
         (help "Clip or Group played on enter by default")
      )
      (default_play_starved
         bool
         (help "If true, plays the default_clip_or_group whenever starved")
      )
      (test_clip
         object
         (class CharClip)
         (dir [clips])
         (help "Pick a clip to play")
         (no_test)
      )
      (play_clip
         script
         (script
            {if_else {!= [test_clip] }
               {do
                  {if {&& {exists milo} {== {milo cur_anim} "Time (secs)"}}
                     {do
                        ($bps {[test_clip] get beats_per_sec})
                        ($start {[test_clip] get start_beat})
                        ($end {[test_clip] get end_beat})
                        {milo set bpm {int {* 60 $bps}}}
                        {milo set_anim_frame {/ $start $bps} {/ $end $bps} {/ $start $bps}}
                     }
                  }
                  {$this play [test_clip] {| 48 4}}
               }
               {$this enter}
            }
         )
         (help "Play the test_clip, or stop if set to none")
      )
      (play_multiple_clips
         bool
         (help "Turn on to set this driver to play multiple clips")
      )
      (display_zoom
         float
         (help "Zoom value for the highlight display")
         (no_test)
      )
   )
   (types (main) (expression) (drum_add))
)
(CharDriverMidi
   (description
      "Uses an event list made from a parser to player animation on self."
   )
   (allowed_dirs Character)
   (superclasses CharDriver)
   (ext dmidi)
   (editor
      (blend_override_pct
         float
         (help "Blend override- set between 0-1 to change clip blending strategy")
      )
   )
   (types
      (musician
         (editor
            (parser symbol (help "Names of the midi parser to hook into"))
            (flag_parser symbol (help "Secondary parser for flags"))
         )
         (enter
            {if {! {exists [parser]}}
               {if {&& {$this dir} {{$this dir} dir}}
                  {do
                     ($scene {{$this dir} dir})
                     {unless {== {$scene get_type} shell}
                        {if {|| $venue_test $char_test {&& $edit_mode {!= $scene {$this dir}}}}
                           {do
                              ($c)
                              {[clips] iterate_self CharClip $d {set $c $d}}
                              {$this play $c 48}
                           }
                        }
                     }
                  }
               }
            }
         )
         (game_over {handle ([parser] remove_sink $this)})
         (drum_lhand
            ($group $length)
            {$this drum_hit $group $length}
         )
         (drum_rhand
            ($group $length)
            {$this drum_hit $group $length}
         )
         (strum
            ($group $length)
            {do
               ($char {bone_pelvis.mesh trans_parent})
               ($flags {& {$char get_play_flags} 524032})
               ($group {[clips] find $group})
               ($clip {$group find_clip $flags})
               {unless $clip
                  {print
                     "NOTIFY: "
                     {path_name $group}
                     " could not find clip with flags "
                     $flags
                     ", trying 0
"
                  }
                  {set $clip {$group get_clip}}
               }
               {if_else $clip
                  {$this midi_parser $clip $length}
                  {print "NOTIFY: " {path_name $group} " could find no clip
"}
               }
            }
         )
         (strum_no_flags
            ($group $length)
            {do
               ($char {bone_pelvis.mesh trans_parent})
               ($group {[clips] find $group})
               {set $clip {$group get_clip}}
               {if_else $clip
                  {$this midi_parser $clip $length}
                  {print "NOTIFY: " {path_name $group} " could find no clip
"}
               }
            }
         )
         (drum_hit
            ($group_name $length)
            {do
               ($char {bone_pelvis.mesh trans_parent})
               ($group_obj {[clips] find $group_name})
               {if_else $group_obj
                  {do
                     {set $clip {$group_obj get_clip}}
                     {if_else $clip
                        {$this midi_parser $clip $length}
                        {print "NOTIFY: " {path_name $group_obj} " could find no clip
"}
                     }
                  }
                  {print "NOTIFY: " {path_name [clips]} " no group " $group_name "
"}
               }
            }
         )
         (midi_parser_fixed
            ($clip $length)
            {$this midi_parser $clip 0.10}
         )
      )
   )
)
(CharEyes
   (description "Moves a bunch of lookats around")
   (allowed_dirs Character)
   (superclasses CharPollable CharWeightable)
   (ext eyes)
   (editor
      (eyes
         (array
            (struct
               (eye
                  object
                  (class CharLookAt)
                  (help "Eye to retarget")
               )
               (upper_lid
                  object
                  (class Trans)
                  (help "corresponding upper lid bone, must rotate about Z")
               )
               (upper_lid_blink
                  object
                  (class Trans)
                  (help
                     "optional - child of upper_lid, placed at edge of upper lid geometry.  It will be used to detect and resolve interpenetration of the lids"
                  )
               )
               (lower_lid
                  object
                  (class Trans)
                  (help "corresponding lower lid bone, must rotate about Z")
               )
               (lower_lid_blink
                  object
                  (class Trans)
                  (help
                     "optional - child of lower_lid, placed at edge of lower lid geometry.  It will be used to detect and resolve interpenetration of the lids"
                  )
               )
            )
         )
      )
      (view_direction
         object
         (class Trans)
         (help
            "optional bone that serves as the reference for which direction the character is looking.  If not set, one of the eyes will be used"
         )
      )
      (interests (array object (class CharInterest)))
      (face_servo
         object
         (class CharFaceServo)
         (help
            "the CharFaceServo if any, used to allow blinks through the eyelid following"
         )
      )
      (head_lookat
         object
         (class CharLookAt)
         (help
            "optionally supply a head lookat to inform eyes what the head is doing.  used primarily to coordinate eye lookats with head ones..."
         )
      )
      (max_extrapolation
         float
         (help
            "in degrees, the maximum angle we can offset the current view direction when extrapolating for generated interests"
         )
         (range 0 90)
      )
      (camera_weight
         object
         (class CharWeightSetter)
         (help "The weight setter for eyes tracking the camera")
      )
      (Debugging
         (indent
            (disable_eye_dart
               bool
               (help "globally disables eye darts for all characters")
               (no_test)
            )
            (disable_eye_jitter
               bool
               (help "globally disables eye jitter for all characters")
               (no_test)
            )
            (disable_interest_objects
               bool
               (help "globally disables use of interest objects for all characters")
               (no_test)
            )
            (disable_procedural_blink
               bool
               (help "globally disables use of procedural blinks for all characters")
               (no_test)
            )
            (disable_eye_clamping
               bool
               (help "globally disables eye lid clamping on all characters")
               (no_test)
            )
            (blink!
               script
               (script {$this force_blink})
               (help "force a procedural blink for testing")
            )
            (toggle_focus_testing
               script
               (script {$this toggle_force_focus})
               (help "for testing, this forces the current interest to a focus target")
            )
            (toggle_interest_overlay
               script
               (script {$this toggle_interest_overlay})
               (help "for testing, this shows the debug overlay for interest objects")
            )
            (toggle_clamping_debug
               script
               (script {set $eyes.debug_clamping {! $eyes.debug_clamping}})
               (help "Shows/hides debug visualization of lid clamping tech")
            )
            (min_target_dist
               float
               (help
                  "the minimum distance, in inches, that this interest can be from the eyes.  If the interest is less than this distance, the eyes look in the same direction, but projected out to this distance.  May be overridden per interest object."
               )
            )
            (test_eye_limits
               script
               (script
                  {unless {== {size [eyes]} 0}
                     {set $eye {$this get (eyes 0 eye)}}
                     {set $enableTest {! {$eye get show_range}}}
                     {foreach_int $i 0 {size [eyes]}
                        {set $lookat {$this get (eyes $i eye)}}
                        {$lookat set show_range $enableTest}
                     }
                  }
               )
               (help
                  "toggles a testing mode that shows you the range of motion of each eye"
               )
            )
         )
      )
      (ulid_track_up
         float
         (help "affects rotation applied to upper lid when eyes rotate up")
         (range 0 10)
      )
      (ulid_track_down
         float
         (help "affects rotation applied to upper lid when eyes rotate down")
         (range 0 10)
      )
      (llid_track_up
         float
         (help "translates lower lids up/down when eyes rotate up")
         (range 0 10)
      )
      (llid_track_down
         float
         (help "translates lower lids up/down when eyes rotate down")
         (range 0 10)
      )
      (llid_track_rotate
         bool
         (help
            "if checked, lower lid tracking is done by rotation instead of translation"
         )
      )
   )
   (types
      (band3_deform_tweaker
         (editor
            (eye_shape
               int
               (help
                  "Type in the # of eye shape you'd like to edit lid tracking and range of motion on, then hit load_settings below"
               )
               (range 0 {- {{$this dir} eye_num} 1})
            )
            (num_eye_shapes
               int
               (read_only 1)
               (help "the number of eye shapes in the character creator")
            )
            (gender
               symbol
               (list {array (male female)})
               (help "the gender of the character you'd like to load eye settings for")
            )
            (load_settings
               script
               (script
                  {foreach_int $i 0 {size [eyes]}
                     {set $lookat {$this get (eyes $i eye)}}
                     {$lookat set show_range 1}
                  }
                  {set $char {$this dir}}
                  {if {!= {$char get gender} [gender]}
                     {$char set gender [gender]}
                     {$char set
                        test_prefab
                        {{bandchardesc_prefabs} find {symbol {sprint "naked_" [gender]}} 1}
                     }
                     {$char copy_prefab}
                  }
                  {$char set (head eye) [eye_shape]}
                  {{$this dir} start_load 0}
                  {set $propAnim {$this get_propanim}}
                  {$this copy_propanim_to_me $propAnim [eye_shape]}
                  {set $eye_shape_at_load [eye_shape]}
                  {set $eyetweaker.loadedsettings 1}
                  {unless {has_substr {{milo cur_dir} get_path_name} "char/main/main.milo"}
                     {notify
                        "Error: you wont be able save unless you're working from char/main/main.milo.  Please do you work in that file"
                     }
                  }
               )
               (help
                  "load the range of motion and lid tracking settings for the eye_shape and gender selected above"
               )
            )
            (save_settings
               script
               (script
                  {if_else {! $eyetweaker.loadedsettings}
                     {notify "error: you need to load_settings before saving them!"}
                     {do
                        {foreach_int $i 0 {size [eyes]}
                           {set $lookat {$this get (eyes $i eye)}}
                           {$lookat set show_range 0}
                        }
                        {foreach $prop (ulid_track_up ulid_track_down llid_track_up llid_track_down)
                           {$propAnim set_key $this {array ($prop)} $eye_shape_at_load}
                        }
                        {foreach_int $i 0 {size [eyes]}
                           {set $lookat {$this get (eyes $i eye)}}
                           {foreach $prop (min_yaw max_yaw min_pitch max_pitch)
                              {$propAnim set_key $lookat {array ($prop)} $eye_shape_at_load}
                           }
                        }
                        {set $eyetweaker.loadedsettings 0}
                        {set [eye_shape_to_copy] $eye_shape_at_load}
                        {if_else {has_substr {{milo cur_dir} get_path_name} "char/main/main.milo"}
                           {milo save}
                           {notify "error: can't save unless you're working from char/main/main.milo"}
                        }
                     }
                  }
               )
               (help
                  "saves the eye properties tweaked below for the current eye_shape and gender"
               )
            )
            (revert
               script
               (script
                  {foreach_int $i 0 {size [eyes]}
                     {set $lookat {$this get (eyes $i eye)}}
                     {$lookat set show_range 0}
                  }
                  {$this copy_propanim_to_me {$this get_propanim} [eye_shape]}
                  {milo update_open_editor $this}
               )
               (help "reverts any eye settings you've changed")
            )
            (lid_tracking_settings
               (indent
                  (test_ulid_track_up
                     float
                     (alias "upper lid up")
                     (help "affects rotation applied to upper lid when eyes rotate up")
                     (range 0 10)
                     (post_sync {set [ulid_track_up] [test_ulid_track_up]})
                  )
                  (test_ulid_track_down
                     float
                     (alias "upper lid down")
                     (help "affects rotation applied to upper lid when eyes rotate down")
                     (range 0 10)
                     (post_sync {set [ulid_track_down] [test_ulid_track_down]})
                  )
                  (test_llid_track_up
                     float
                     (alias "lower lid up")
                     (help "translates lower lids up/down when eyes rotate up")
                     (range 0 10)
                     (post_sync {set [llid_track_up] [test_llid_track_up]})
                  )
                  (test_llid_track_down
                     float
                     (alias "lower lid down")
                     (help "translates lower lids up/down when eyes rotate down")
                     (range 0 10)
                     (post_sync {set [llid_track_down] [test_llid_track_down]})
                  )
               )
               (alias "Lid Tracking Settings")
               (help
                  "these are all the parameters that affect how the upper and lower lids track the eyes as they rotate"
               )
            )
            (range_of_motion
               (indent
                  (min_yaw
                     float
                     (help "Degrees of min allowable yaw, looking left")
                     (range -80 80)
                     (post_sync
                        {set $propName min_yaw}
                        {foreach_int $i 0 {size [eyes]}
                           {set $lookat {$this get (eyes $i eye)}}
                           {$lookat set $propName [$propName]}
                        }
                     )
                  )
                  (max_yaw
                     float
                     (help "Degrees of max allowable yaw, looking right")
                     (range -80 80)
                     (post_sync
                        {set $propName max_yaw}
                        {foreach_int $i 0 {size [eyes]}
                           {set $lookat {$this get (eyes $i eye)}}
                           {$lookat set $propName [$propName]}
                        }
                     )
                  )
                  (min_pitch
                     float
                     (help "Degrees of min allowable pitch, looking down")
                     (range -80 80)
                     (post_sync
                        {set $propName min_pitch}
                        {foreach_int $i 0 {size [eyes]}
                           {set $lookat {$this get (eyes $i eye)}}
                           {$lookat set $propName [$propName]}
                        }
                     )
                  )
                  (max_pitch
                     float
                     (help "Degrees of max allowable pitch, looking up")
                     (range -80 80)
                     (post_sync
                        {set $propName max_pitch}
                        {foreach_int $i 0 {size [eyes]}
                           {set $lookat {$this get (eyes $i eye)}}
                           {$lookat set $propName [$propName]}
                        }
                     )
                  )
               )
               (alias "Range of Motion Settings")
               (help
                  "the parameters set the range of motion of the eyes, left/right and up/down"
               )
            )
            (eye_shape_to_copy
               int
               (help "the eye shape to transfer settings from")
               (range 0 {- {{$this dir} eye_num} 1})
            )
            (copy_settings
               script
               (script
                  {if_else $eyetweaker.loadedsettings
                     {do
                        {$this copy_propanim_to_me {$this get_propanim} [eye_shape_to_copy]}
                        {milo update_open_editor $this}
                     }
                     {notify "you have to load_settings for an eye shape before you can copy"}
                  }
               )
               (help
                  "Copies the eye settings from eye_shape_to_copy to the current eye shape, to use as a starting point"
               )
            )
            (blink
               script
               (script {$this force_blink})
               (help "force a procedural blink for testing")
            )
         )
         (eye_shape 0)
         (num_eye_shapes {{$this dir} eye_num})
         (gender male)
         (test_ulid_track_up 0.00)
         (test_ulid_track_down 0.00)
         (test_llid_track_up 0.00)
         (test_llid_track_down 0.00)
         (min_yaw 0.00)
         (max_yaw 0.00)
         (min_pitch 0.00)
         (max_pitch 0.00)
         (eye_shape_to_copy 0)
         (enter
            {if {exists milo}
               {set [num_eye_shapes] {{$this dir} eye_num}}
               {set [gender] {{$this dir} get gender}}
               {set [eye_shape] {{$this dir} get (head eye)}}
               {$this copy_propanim_to_me {$this get_propanim} [eye_shape]}
            }
         )
         (copy_propanim_to_me
            ($pAnim $eyeShapeIdx)
            {foreach $prop (ulid_track_up ulid_track_down llid_track_up llid_track_down)
               {set $myProp {symbol {sprint "test_" $prop}}}
               {set [$myProp]
                  {$pAnim value_from_frame $this {array ($prop)} $eyeShapeIdx}
               }
               {set [$prop] [$myProp]}
            }
            {foreach_int $i 0 {size [eyes]}
               {set $lookat {$this get (eyes $i eye)}}
               {foreach $prop (min_yaw max_yaw min_pitch max_pitch)
                  {set [$prop]
                     {$pAnim value_from_frame $lookat {array ($prop)} $eyeShapeIdx}
                  }
                  {$lookat set $prop [$prop]}
               }
            }
         )
         (get_propanim
            {if_else {== [gender] male}
               {set $propAnim
                  {{$this dir} find eyesdeform_male.anim 1}
               }
               {set $propAnim
                  {{$this dir} find eyesdeform_female.anim 1}
               }
            }
            $propAnim
         )
      )
   )
)
(CharInterest
   (description "An interest object for a character to look at")
   (allowed_dirs ObjectDir)
   (superclasses Trans)
   (ext intr)
   (editor
      (priority
         float
         (help
            "An extra weight applied during scoring of this interest - use this to make it more or less important overall"
         )
         (range 0 5)
      )
      (max_view_angle
         float
         (help
            "In degrees, the maximum view cone angle for this object to be 'seen'"
         )
         (range 0 90)
      )
      (min_look_time
         float
         (help "The minimum time you have to look at this object when its selected")
         (range 0 100)
      )
      (max_look_time
         float
         (help "The maximum allowable time to look at this object")
         (range 0 100)
      )
      (refractory_period
         float
         (help "In secs, how long until this object can be looked at again")
         (range 0 100)
      )
      (dart_ruleset_override
         object
         (class CharEyeDartRuleset)
         (help
            "if set, this dart ruleset will override the default one when looking at this interest object"
         )
      )
      (overrides_min_target_dist
         bool
         (help
            "if true, we will override the minimum distance this target can be from the eyes using the value below"
         )
      )
      (min_target_dist_override
         float
         (help
            "the minimum distance, in inches, that this interest can be from the eyes.  only applied if overrides_min_target_dist is true..."
         )
      )
   )
   (types)
)
(CharEyeDartRuleset
   (description
      "Defines a procedural ruleset that can be used to generate a variety of realistic eye darting behavior"
   )
   (allowed_dirs ObjectDir)
   (ext dart)
   (editor
      (min_radius
         float
         (help "Dart locations will be at least this distance from target")
         (range 0.00 1000.00)
      )
      (max_radius
         float
         (help "Dart locations will be at most this distance from target")
         (range 0.00 1000.00)
      )
      (min_darts_per_sequence
         int
         (help
            "Each sequence of darts will have at least this many locations before returning to target"
         )
         (range 0 50)
      )
      (max_darts_per_sequence
         int
         (help
            "Each sequence of darts will have at most this many locations before returning to target"
         )
         (range 0 50)
      )
      (min_secs_between_darts
         float
         (help
            "In seconds, the minimum time between each dart in a sequence.  should be very small"
         )
         (range 0 2.00)
      )
      (max_secs_between_darts
         float
         (help
            "In seconds, the maximum time between each dart in a sequence.  should be very small"
         )
         (range 0 2.00)
      )
      (min_secs_between_sequences
         float
         (help
            "In seconds, the minimum time to wait to start another dart sequence after the previous one finishes"
         )
         (range 0 100.00)
      )
      (max_secs_between_sequences
         float
         (help
            "In seconds, the maximum time to wait to start another dart sequence after the previous one finishes"
         )
         (range 0 100.00)
      )
      (scale_with_distance
         bool
         (help
            "Sets whether the dart radius scales with the distance to the character - meaning this dart sequence looks the same regardless of distance"
         )
      )
      (reference_distance
         float
         (help
            "When scale_with_distance is true, this distance is used as a reference to scale up the radius."
         )
      )
   )
   (types)
)
(CharForeTwist
   (description
      "Does all interpolation for the forearm. Assumes: <ul>

        <li>foretwist1 and forearm are under upperarm.</li>

        <li>foretwist2 is under foretwist1 and that hand is under forearm.</li>

        <li>on the left hand offset rotation is usually 90 on the left, and -90 on the right.</li>

        </ul>

        Feeds the bones when executed."
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ftwist)
   (editor
      (hand
         object
         (class Trans)
         (help "The hand bone")
      )
      (twist2
         object
         (class Trans)
         (help "The twist2 bone")
      )
      (offset float (help "Usually 180 for right hand, 0 for left hand"))
      (bias
         float
         (help
            "Biases the angle before dividing by 3, typically 45 on the left hand, -45 on the right."
         )
      )
   )
   (types)
)
(CharHair
   (description "Hair physics, deals with strands of hair")
   (allowed_dirs RndDir)
   (superclasses CharPollable)
   (ext hair)
   (editor
      (stiffness
         float
         (range 0 1)
         (help "stiffness of each strand")
      )
      (torsion
         float
         (range 0 1)
         (help "rotational stiffness of each strand")
      )
      (inertia
         float
         (range 0 1)
         (help "Inertia of the hair, zero means none")
      )
      (gravity
         float
         (range 0 10)
         (help "Gravity of the hair, one is normal")
      )
      (weight
         float
         (range 0 1)
         (help "Gravity of the hair, one is normal")
      )
      (friction
         float
         (range 0 1)
         (help "Hair friction against each other")
      )
      (min_slack
         float
         (help "If using sides, determines how far in it could go")
      )
      (max_slack
         float
         (help "If using sides, determines how far out it could go")
      )
      (strands
         (array
            (struct
               (root
                  object
                  (class Trans)
                  (help "The root Trans for the hair strand")
                  (refresh strands)
               )
               (angle float (help "Angle in degrees of starting flip"))
               (points
                  (array
                     (struct
                        (bone
                           object
                           (class Trans)
                           (read_only 1)
                           (help "hair bone we set the transform of")
                        )
                        (length float (help "the length of this strand bone"))
                        (radius float (help "collision radius"))
                        (outer_radius
                           float
                           (help
                              "if > radius, is the distance the hair bone should start aligning itself with the collision primitive, so that once touching it, it will be totally flattened against it."
                           )
                        )
                        (collides
                           (array object (class CharCollide))
                           (help "things to collide against")
                        )
                        (side_length
                           float
                           (help
                              "if >= 0 the base length to the side modified by min_slack and max_slack"
                           )
                        )
                     )
                     (fixed_size 1)
                  )
               )
               (show_spheres bool (help "show the points as spheres"))
               (show_collide bool (help "show the collision shapes"))
               (show_pose
                  bool
                  (help
                     "Show the original pose when hilit, good for adjusting angle to match the pose"
                  )
               )
               (hookup_flags
                  bitfield
                  (list
                     (
                        "kHairBack"
                        "kHairChest"
                        "kHairFace"
                        "kHairForehead"
                        "kHairHead"
                        "kHairLeftShoulder"
                        "kHairRightShoulder"
                        "kHairNeck"
                        "kHairLeftThigh"
                        "kHairRightThigh"
                        "kHairLeftHip"
                        "kHairRigh2hip"
                     )
                  )
                  (help "Which collision volumes to hook up to this strand for collision")
               )
            )
         )
      )
      (simulate
         bool
         (help "Simulate physics or not")
         (no_test)
      )
      (wind
         object
         (class Wind)
         (help "wind object to use")
      )
      (set_cloth
         script
         (script {$this set_cloth 1})
         (help "Sets this as cloth, all sides true.")
      )
      (unset_cloth
         script
         (script {$this set_cloth 0})
         (help "Sets this as cloth, all sides true.")
      )
      (hookup
         script
         (script {$this hookup})
         (help "Re-hookup the hair to the collision volumes")
      )
      (freeze_pose
         script
         (script {$this freeze_pose})
         (help "freeze the current pose for resetting")
      )
   )
   (types)
   (init
      {do
         ($ww {find_obj {$this dir} world.wind})
         {if $ww
            {set [wind] $ww}
         }
      }
   )
)
(CharIKFoot
   (description "Remedial foot skate ik, not yet ready for prime time.")
   (allowed_dirs Character)
   (superclasses CharIKHand)
   (ext ikfoot)
   (editor
      (data
         object
         (class Trans)
         (help "which bone to use to get the IK data from")
      )
      (data_index int (help "Which element index to use (x=0, y=1, z=2)"))
   )
   (types)
)
(CharIKHand
   (description
      "Pins a hand bone to another RndTransformable, bending the elbow to make it reach.  Optionally aligns orientations and stretches"
   )
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext ikhand)
   (editor
      (hand
         object
         (class Trans)
         (help "The hand to be moved, must be child of elbow")
      )
      (finger
         object
         (class Trans)
         (help
            "If non null, will be the thing that actually hits the target, the hand will be moved into such a location as to make it hit.  You probably always want to turn on orientation in this case, as otherwise, the hand will be in a somewhat random orientation, which will probably mean that the finger will miss the mark."
         )
      )
      (targets
         (array
            (struct
               (target
                  object
                  (class Trans)
                  (help "Where to move the hand to")
               )
               (extent
                  float
                  (help "Distance along the negative z axis of the transform to snap to")
               )
            )
         )
         (help "Targets for the hand")
      )
      (orientation bool (help "Orient the hand to the dest"))
      (stretch bool (help "Stretch the hand to the dest"))
      (scalable
         bool
         (help "Recalculate bone length every frame, needed for bones which scale")
      )
      (move_elbow
         bool
         (help
            "Moves the elbow and shoulder to position the hand, if false, just teleports the hand"
         )
      )
      (elbow_swing
         float
         (help
            "Range to swing the elbow in radians to hit target, better looking suggest .7"
         )
      )
      (always_ik_elbow
         bool
         (help "Turn this on to do IK calcs even if weight is 0")
      )
      (constrain_wrist
         bool
         (help "Constrain the wrist rotation to be believable")
      )
      (wrist_radians
         float
         (help "Constrain wrist rotation to this angle (in radians)")
      )
      (elbow_collide
         object
         (class CharCollide)
         (help "Collision sphere that elbow won't enter.")
      )
      (clockwise
         bool
         (help "Choose the clockwise solution for the collision detection")
      )
   )
   (types)
)
(CharIKFingers
   (description "Pins fingers to world positions")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext ikfingers)
   (editor
      (is_right_hand bool (help "Does this run the right or left hand?"))
      (output_trans
         object
         (class Trans)
         (help "This trans will be set to the desired hand position.")
      )
      (keyboard_ref_bone
         object
         (class Trans)
         (help
            "A keyboard bone so we can calculate in local space. use rh/lh targets."
         )
      )
      (hand_keyboard_offset
         (vector
            (x float)
            (y float)
            (z float)
         )
         (help "Starting hand offset from keyboard.")
      )
      (hand_thumb_rotation
         float
         (help "how much to rotate the hand (radians) when thumb is engaged")
      )
      (hand_pinky_rotation
         float
         (help "how much to rotate the hand (radians) when pinky is engaged")
      )
      (hand_move_forward
         float
         (help "how much to move forward when pinky or thumb is engaged")
      )
      (hand_dest_offset
         float
         (help
            "x offset for right/left hands from average destination position for fingers"
         )
      )
   )
   (types)
)
(CharBoneTwist
   (description "Rotate a bone to point towards targets")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext .bonetwist)
   (editor
      (bone
         object
         (class Trans)
         (help "Bone to move")
      )
      (targets
         (array object (class Trans))
         (help "Targets to average to point bone at")
      )
   )
   (types)
)
(CharIKHead
   (description
      "Puts a head bone into a position, doing IK on the spine to achieve it."
   )
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext ikhead)
   (editor
      (head
         object
         (class Trans)
         (help "The head bone which will be moved to the target")
      )
      (spine
         object
         (class Trans)
         (help "The first spine bone in the chain to be moved")
      )
      (mouth
         object
         (class Trans)
         (help "If non null, will be the thing that actually hits the target")
      )
      (target
         object
         (class Trans)
         (help "The target to hit")
      )
      (target_radius
         float
         (help "allowable head movement relative to the target")
      )
      (head_mat
         float
         (help "how much to blend the original world space head matrix in")
      )
      (offset
         object
         (class Trans)
         (help "Another bone to get the same world space delta")
      )
      (offset_scale
         (vector
            (x float)
            (y float)
            (z float)
         )
         (help
            "World space axis scaling to apply to delta before applying to offset bone."
         )
      )
   )
   (types)
)
(CharIKMidi
   (description
      "Moves an RndTransformable (bone) to another RndTransformable (spot) over time, blending from where it was relative to the parent of the spot."
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ikmidi)
   (editor
      (bone
         object
         (class Trans)
         (help "The bone to move")
      )
      (cur_spot
         object
         (class Trans)
         (help "Spot to go to, zero indexed")
         (no_test)
      )
      (anim_blend_weightable
         object
         (class CharWeightable)
         (help "Weightable to change animation between frets")
      )
      (anim_blend_max float (help "Max weight for animation change"))
   )
   (types
      (musician
         (parser guitar_fret_pos)
         (editor (parser symbol (help "Name of the midi parser to hook into")))
         (enter
            {if {exists [parser]}
               {[parser] add_sink $this}
            }
         )
         (exit {handle ([parser] remove_sink $this)})
         (game_over {handle ([parser] remove_sink $this)})
      )
   )
)
(CharIKSliderMidi
   (description
      "Moves an RndTransformable (bone) to a percentage of the way between two spots."
   )
   (allowed_dirs Character)
   (superclasses CharPollable CharWeightable)
   (ext ikslide)
   (editor
      (target
         object
         (class Trans)
         (help "The bone to move")
      )
      (first_spot
         object
         (class Trans)
         (help "Spot at 0%")
         (no_test)
      )
      (second_spot
         object
         (class Trans)
         (help "Spot at 100%")
         (no_test)
      )
      (tolerance
         float
         (help "Only move if percentage changes more than this (0.0 - 1.0)")
      )
   )
   (types
      (musician
         (parser keyboard_rh_pos)
         (editor (parser symbol (help "Name of the midi parser to hook into")))
         (enter
            {if {exists [parser]}
               {[parser] add_sink $this}
            }
         )
         (exit {handle ([parser] remove_sink $this)})
         (game_over {handle ([parser] remove_sink $this)})
      )
   )
)
(CharIKRod
   (description
      "<p>Rigs a bone between two other bones and sets the

        orientation from that.</p>

        <p>When you set up all the bone pointers, the rig xfm will be

        computed, an inverse from that to the dst bone will be computed,

        and everything will come from that. So the dst bone will maintain

        the exact same position in that pose. That makes it easy to author

        the bones.</p>"
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ikrod)
   (editor
      (left_end
         object
         (class Trans)
         (help "Left end of the rod")
      )
      (right_end
         object
         (class Trans)
         (help "Right end of the rod")
      )
      (dest_pos
         float
         (help "Fraction of the way dest is from left (0) to right(1)")
      )
      (side_axis
         object
         (class Trans)
         (help "Take the z axis from this bone rather than from rod end delta")
      )
      (vertical bool (help "Force the dest to be vertically upright"))
      (dest
         object
         (class Trans)
         (help "The bone to set")
      )
   )
   (types)
)
(CharIKScale
   (description "Rescales a local position of a bone")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext ikscale)
   (editor
      (dest
         object
         (class Trans)
         (help "The bone to be scaled")
      )
      (scale float (help "Scale to apply"))
      (capture_before
         script
         (script {$this capture_before})
         (refresh scale)
         (help
            "Call after posing normally, captures data with which to auto compute scale"
         )
      )
      (capture_after
         script
         (script {$this capture_after})
         (refrest scale)
         (help
            "Call after posing deformed, computes scale based on ratio of capture_before capture to now."
         )
      )
      (secondary_targets
         (array object (class Trans))
         (help "Apply remainder weight to these targets")
      )
      (auto_weight
         bool
         (help "Automatically determine weight from top & bottom heights")
      )
      (bottom_height
         float
         (help "If dest starts out at or below this height, weight will be 0")
      )
      (top_height
         float
         (help "If dest starts out at or above this height, weight will be 1")
      )
   )
   (types)
)
(CharLipSync
   (description
      "A full lipsync animation, basically a changing set of weights for a set of named visemes.  Sampled at 30hz"
   )
   (allowed_dirs ObjectDir)
   (superclasses)
   (ext lipsync)
   (editor
      (frames
         int
         (help "how many keyframes")
         (read_only 1)
      )
      (duration
         float
         (help "duration in seconds")
         (read_only 1)
      )
      (visemes
         (array string (read_only 1))
         (help "viseme names")
         (read_only 1)
      )
      (prop_anim
         object
         (class PropAnim)
         (help "PropAnim to control this lipsync")
      )
   )
   (types
      (band
         (import_dta
            {do
               ($p {{$this dir} get_path_name})
               {set $p
                  {sprint {file_get_path $p} "/" {file_get_base {$this name}} ".dta"}
               }
               {search_replace $p "/run/" "/art/" $p}
               {$this parse $p}
            }
         )
         (editor
            (import_dta
               script
               (script {$this import_dta})
               (help "Imports the corresponding .dta from proj/art/songs/....")
            )
         )
      )
      (vignette
         (prop_anim "")
         (exp_banger_oohface_01 0.00)
         (exp_banger_roar_01 0.00)
         (exp_banger_slackjawed_01 0.00)
         (exp_banger_teethgrit_01 0.00)
         (exp_dramatic_happy_eyesclosed_01 0.00)
         (exp_dramatic_happy_eyesopen_01 0.00)
         (exp_dramatic_mouthopen_01 0.00)
         (exp_dramatic_pouty_01 0.00)
         (exp_rocker_bassface_aggressive_01 0.00)
         (exp_rocker_bassface_cool_01 0.00)
         (exp_rocker_shout_eyesclosed_01 0.00)
         (exp_rocker_shout_eyesopen_01 0.00)
         (exp_rocker_shout_quick_01 0.00)
         (exp_rocker_slackjawed_01 0.00)
         (exp_rocker_smile_intense_01 0.00)
         (exp_rocker_smile_mellow_01 0.00)
         (exp_rocker_soloface_01 0.00)
         (exp_rocker_teethgrit_happy_01 0.00)
         (exp_rocker_teethgrit_pained_01 0.00)
         (exp_spazz_eyesclosed_01 0.00)
         (exp_spazz_snear_intense_01 0.00)
         (exp_spazz_snear_mellow_01 0.00)
         (exp_spazz_tongueout_front_01 0.00)
         (exp_spazz_tongueout_side_01 0.00)
         (brow_angry 0.00)
         (brow_dramatic 0.00)
         (brow_happy 0.00)
         (brow_pouty 0.00)
         (eye_left_squint 0.00)
         (eye_lids_closed 0.00)
         (eye_right_squint 0.00)
         (eye_squint 0.00)
         (eye_wide_eyed 0.00)
         (mouth_apprehensive_smile 0.00)
         (mouth_dumbstruck 0.00)
         (mouth_frown 0.00)
         (mouth_lower_teeth_grit 0.00)
         (mouth_ooh 0.00)
         (mouth_pursed 0.00)
         (mouth_side_pursed 0.00)
         (mouth_slackjawed_intense 0.00)
         (mouth_slackjawed_mellow 0.00)
         (mouth_smile_intense 0.00)
         (mouth_smile_intense_open 0.00)
         (mouth_smile_mellow 0.00)
         (mouth_smirk_left 0.00)
         (mouth_smirk_right 0.00)
         (mouth_snear_intense 0.00)
         (mouth_sneer_mellow 0.00)
         (mouth_upper_teeth_grit 0.00)
         (brow_down 0.00)
         (viseme_list
            (exp_banger_oohface_01
               exp_banger_roar_01
               exp_banger_slackjawed_01
               exp_banger_teethgrit_01
               exp_dramatic_happy_eyesclosed_01
               exp_dramatic_happy_eyesopen_01
               exp_dramatic_mouthopen_01
               exp_dramatic_pouty_01
               exp_rocker_bassface_aggressive_01
               exp_rocker_bassface_cool_01
               exp_rocker_shout_eyesclosed_01
               exp_rocker_shout_eyesopen_01
               exp_rocker_shout_quick_01
               exp_rocker_slackjawed_01
               exp_rocker_smile_intense_01
               exp_rocker_smile_mellow_01
               exp_rocker_soloface_01
               exp_rocker_teethgrit_happy_01
               exp_rocker_teethgrit_pained_01
               exp_spazz_eyesclosed_01
               exp_spazz_snear_intense_01
               exp_spazz_snear_mellow_01
               exp_spazz_tongueout_front_01
               exp_spazz_tongueout_side_01
               brow_angry
               brow_dramatic
               brow_happy
               brow_pouty
               eye_left_squint
               eye_lids_closed
               eye_right_squint
               eye_squint
               eye_wide_eyed
               mouth_apprehensive_smile
               mouth_dumbstruck
               mouth_frown
               mouth_lower_teeth_grit
               mouth_ooh
               mouth_pursed
               mouth_side_pursed
               mouth_slackjawed_intense
               mouth_slackjawed_mellow
               mouth_smile_intense
               mouth_smile_intense_open
               mouth_smile_mellow
               mouth_smirk_left
               mouth_smirk_right
               mouth_snear_intense
               mouth_sneer_mellow
               mouth_upper_teeth_grit
               brow_down
            )
         )
         (editor
            (exp_banger_oohface_01 float (range 0 1))
            (exp_banger_roar_01 float (range 0 1))
            (exp_banger_slackjawed_01 float (range 0 1))
            (exp_banger_teethgrit_01 float (range 0 1))
            (exp_dramatic_happy_eyesclosed_01 float (range 0 1))
            (exp_dramatic_happy_eyesopen_01 float (range 0 1))
            (exp_dramatic_mouthopen_01 float (range 0 1))
            (exp_dramatic_pouty_01 float (range 0 1))
            (exp_rocker_bassface_aggressive_01 float (range 0 1))
            (exp_rocker_bassface_cool_01 float (range 0 1))
            (exp_rocker_shout_eyesclosed_01 float (range 0 1))
            (exp_rocker_shout_eyesopen_01 float (range 0 1))
            (exp_rocker_shout_quick_01 float (range 0 1))
            (exp_rocker_slackjawed_01 float (range 0 1))
            (exp_rocker_smile_intense_01 float (range 0 1))
            (exp_rocker_smile_mellow_01 float (range 0 1))
            (exp_rocker_soloface_01 float (range 0 1))
            (exp_rocker_teethgrit_happy_01 float (range 0 1))
            (exp_rocker_teethgrit_pained_01 float (range 0 1))
            (exp_spazz_eyesclosed_01 float (range 0 1))
            (exp_spazz_snear_intense_01 float (range 0 1))
            (exp_spazz_snear_mellow_01 float (range 0 1))
            (exp_spazz_tongueout_front_01 float (range 0 1))
            (exp_spazz_tongueout_side_01 float (range 0 1))
            (brow_angry float (range 0 1))
            (brow_dramatic float (range 0 1))
            (brow_happy float (range 0 1))
            (brow_pouty float (range 0 1))
            (eye_left_squint float (range 0 1))
            (eye_lids_closed float (range 0 1))
            (eye_right_squint float (range 0 1))
            (eye_squint float (range 0 1))
            (eye_wide_eyed float (range 0 1))
            (mouth_apprehensive_smile float (range 0 1))
            (mouth_dumbstruck float (range 0 1))
            (mouth_frown float (range 0 1))
            (mouth_lower_teeth_grit float (range 0 1))
            (mouth_ooh float (range 0 1))
            (mouth_pursed float (range 0 1))
            (mouth_side_pursed float (range 0 1))
            (mouth_slackjawed_intense float (range 0 1))
            (mouth_slackjawed_mellow float (range 0 1))
            (mouth_smile_intense float (range 0 1))
            (mouth_smile_intense_open float (range 0 1))
            (mouth_smile_mellow float (range 0 1))
            (mouth_smirk_left float (range 0 1))
            (mouth_smirk_right float (range 0 1))
            (mouth_snear_intense float (range 0 1))
            (mouth_sneer_mellow float (range 0 1))
            (mouth_upper_teeth_grit float (range 0 1))
            (brow_down float (range 0 1))
         )
      )
   )
   (init {$this set_type band})
)
(CharLipSyncDriver
   (description "Drives lip sync animation")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext lipdrv)
   (editor
      (bones
         object
         (class CharBonesObject)
         (help "The CharBones object to add or blend into.")
      )
      (lipsync
         object
         (class CharLipSync)
         (help "The lipsync file to use")
      )
      (clips
         object
         (class ObjectDir)
         (help "pointer to the visemes")
      )
      (song_owner
         object
         (class CharLipSyncDriver)
         (help "Will use this song if set, except for blinks")
         (no_test)
      )
      (loop
         bool
         (help "should we loop this song, resets on song change")
         (no_test)
      )
      (song_offset
         float
         (help "offset within song in seconds, resets on song change")
         (no_test)
      )
      (override_options
         object
         (class ObjectDir)
         (help
            "an optional clipset that provides list of clips to override face with - viseme clipset is used otherwise"
         )
      )
      (apply_override_additively
         bool
         (help
            "is the override clip applied addtively on top of face mocap?  If false, it will blend."
         )
      )
      (override_clip
         object
         (class CharClip)
         (dir_prop clips)
         (help
            "default clip to be used as the override - maybe be overriden programatically"
         )
      )
      (override_weight
         float
         (help
            "weight to blend override clip. this is mostly here for testing, because its likely to be set programatically."
         )
      )
      (alternate_driver
         object
         (class CharDriver)
         (help "This will be used instead of the song, if set")
      )
      (test_clip
         object
         (class CharClip)
         (dir_prop clips)
         (help "Test charclip to apply, does nothing else")
      )
      (test_weight float (help "weight to apply this clip with"))
   )
   (types
      (band
         (play_blink
            {set [lipsync] {{$this dir} find "blinktrack.lipsync"}}
            {set [loop] 1}
            {set [song_offset] {random_float 0 1000}}
         )
         (play_smile
            {set [lipsync] {{$this dir} find "smile.lipsync"}}
            {set [loop] 1}
         )
         (play_song)
      )
   )
)
(CharFaceServo
   (description "BonesMeshes for facial blending")
   (allowed_dirs Character)
   (superclasses CharPollable CharBonesMeshes)
   (ext faceservo)
   (editor
      (clips
         object
         (class ObjectDir)
         (help "pointer to visemes, must contain Blink and Base")
         (no_test)
      )
      (clip_type
         symbol
         (help "Which clip type it can support")
         (list {get_clip_types})
      )
      (blink_clip_left
         symbol
         (list {object_list [clips] CharClip})
         (help "Blink clip, used to close the left eye")
      )
      (blink_clip_left2
         symbol
         (list {object_list [clips] CharClip})
         (help "A second clip that contributes to closing the left eye")
      )
      (blink_clip_right
         symbol
         (list {object_list [clips] CharClip})
         (help "Blink clip, used to close the right eye")
      )
      (blink_clip_right2
         symbol
         (list {object_list [clips] CharClip})
         (help "A second clip that contributes to closing the right eye")
      )
   )
   (types)
)
(CharLookAt
   (description
      "Makes a source point at dest by rotating a pivot, points along Y axis of source"
   )
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext lookat)
   (editor
      (pivot
         object
         (class Trans)
         (help "The thing that pivots")
      )
      (source
         object
         (class Trans)
         (help
            "If non null, the bone which looks at along its Y axis, otherwise equal to the pivot"
         )
      )
      (target
         object
         (class Trans)
         (help "The thing to look at")
      )
      (half_time float (help "Seconds of lag when moving the source"))
      (min_yaw
         float
         (help "Degrees of min allowable yaw, looking left")
         (range -80 80)
      )
      (max_yaw
         float
         (help "Degrees of max allowable yaw, looking right")
         (range -80 80)
      )
      (min_pitch
         float
         (help "Degrees of min allowable pitch, looking down")
         (range -80 80)
      )
      (max_pitch
         float
         (help "Degrees of max allowable pitch, looking up")
         (range -80 80)
      )
      (min_weight_yaw
         float
         (help "Degrees of yaw to start auto-weight, -1 means no auto-weight")
      )
      (max_weight_yaw
         float
         (help
            "Degrees of yaw to stop auto-weight, must be greater than mMinWeightYaw"
         )
      )
      (weight_yaw_speed
         float
         (help "Max speed in weight/sec that the auto-weight can change")
      )
      (allow_roll
         bool
         (help
            "If true allows rolling, if false, keeps the local pivot z axis down to prevent rolling.  Eyeballs can't roll, for instance, but heads can."
         )
      )
      (source_radius
         float
         (help "radius in degrees of filtered source motion that's allowed through")
      )
      (show_range
         bool
         (help "Graphically show the extreme ranges of motion")
         (no_test)
      )
      (test_range
         bool
         (help "Graphically show range of motion with user specified values")
         (no_test)
      )
      (test_range_pitch
         float
         (help "if test_range is on, adjusts current pitch")
         (range 0 1)
      )
      (test_range_yaw
         float
         (help "if test_range is on, adjusts current yaw")
         (range 0 1)
      )
      (enable_jitter
         bool
         (help
            "If enabled, high frequency noise is added to pitch and/or yaw each frame"
         )
         (no_test)
      )
      (yaw_jitter_limit
         float
         (help
            "if enable_jitter is on, random noise from [-yaw_jitter_limit, yaw_jitter_limit] (in degrees) is applied to the yaw of the lookat"
         )
         (range 0 10)
      )
      (pitch_jitter_limit
         float
         (help
            "if enable_jitter is on, random noise from [-pitch_jitter_limit, pitch_jitter_limit] (in degrees) is applied to the pitch of the lookat"
         )
         (range 0 10)
      )
   )
   (types
      (drum_head
         (enter
            {set [weight]
               {switch {{$this dir} get clip_mode}
                  ((1 2) 0)
                  0.80
               }
            }
         )
      )
   )
)
(CharMirror
   (description
      "Duplicates or mirrors another character's motions, given

        the matching bone servo."
   )
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext mirr)
   (editor
      (servo
         object
         (class CharServoBone)
         (help "The servo to change")
      )
      (mirror_servo
         object
         (class CharServoBone)
         (help "The servo we want to mirror")
      )
   )
   (types)
)
(CharNeckTwist
   (description "Does all interpolation for the neck.")
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext ntwist)
   (editor
      (head
         object
         (class Trans)
         (help "The head bone, must be descendent of neck")
      )
      (twist
         object
         (class Trans)
         (help "The twist bone, neck must be parent of")
      )
   )
   (types)
)
(CharPollable
   (description
      "Workhorse unit of the Character system, most Character things inherit from this."
   )
   (allowed_dirs)
   (superclasses Poll)
   (types)
)
(CharPollGroup
   (description
      "Group of Charpollable, polled in the order given, use when the automatic CharPollable sorting is not correct or sufficient."
   )
   (allowed_dirs Character)
   (superclasses CharPollable CharWeightable)
   (ext pgrp)
   (editor
      (polls
         (array object (class CharPollable))
         (help "Ordered list of CharPollables, will be polled in this order.")
      )
      (changed_by
         object
         (class CharPollable)
         (help
            "Explicit thing I am changed by, to force sorting, if set, ignores polls"
         )
      )
      (changes
         object
         (class CharPollable)
         (help "Explicit thing I change, to force sorting, if set, ignores polls")
      )
      (sort
         script
         (help "sort the pollables")
         (script {$this sort_polls})
         (refresh polls)
      )
   )
   (types)
)
(CharPosConstraint
   (description
      "Forces the targets to be within a world space bounding box relative to source."
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext const)
   (editor
      (source
         object
         (class Trans)
         (help "Bone to be higher than")
      )
      (targets
         (array object (class Trans))
         (help "Bones to constrain")
      )
      (box
         (struct
            (min_x float)
            (max_x float)
            (min_y float)
            (max_y float)
            (min_z float)
            (max_z float)
         )
         (help "Bounding box, make min > max to ignore that dimension")
      )
   )
   (types)
)
(CharServoBone
   (description
      "Sets bone transforms and regulates Character center to a spot."
   )
   (allowed_dirs Character)
   (superclasses CharPollable CharBonesMeshes)
   (ext servo)
   (editor
      (regulate
         object
         (class Waypoint)
         (help "Waypoint to regulate to")
         (no_test)
      )
      (move_self
         bool
         (help "Move ourselves around when playing animations")
         (no_test)
      )
      (clip_type
         symbol
         (help "What degrees of freedom we can accomodate")
         (list {get_clip_types})
         (no_test)
      )
   )
   (types)
)
(CharSleeve
   (description
      "Animates top and bottom sleeve bones. Both must have the same local xfm when transformed, and the parent bone must point along the X axis.  The local positions of both bones must only have z be non null."
   )
   (allowed_dirs Character)
   (ext sleeve)
   (editor
      (sleeve
         object
         (class Trans)
         (help "The sleeve bone")
      )
      (top_sleeve
         object
         (class Trans)
         (help "The top sleeve bone, has zero range")
      )
      (inertia
         float
         (help "Intertia 0-1, .5 is default")
         (range 0 10000)
      )
      (gravity float (help "Force of gravity, 1 is normal"))
      (range
         float
         (help "forward and backward range of the sleeve")
         (range 0 10000)
      )
      (pos_length
         float
         (help "how much longer it can stretch than its length")
         (range 0 10000)
      )
      (neg_length
         float
         (help "how much negative length it can go")
         (range 0 10000)
      )
      (stiffness
         float
         (help "how stiff it is for length and range, 1 is max")
         (range 0 1)
      )
   )
   (types)
)
(CharTransCopy
   (description "Copies local xfm from one bone to another at poll time")
   (allowed_dirs RndDir)
   (superclasses CharPollable)
   (ext tcopy)
   (editor
      (src
         object
         (class Trans)
         (help "Object to copy the local xfm from")
      )
      (dest
         object
         (class Trans)
         (help "Object to copy the local xfm to")
      )
   )
   (types)
)
(CharTransDraw
   (description
      "Defers drawing translucent parts of characters until this object is drawn"
   )
   (superclasses Draw)
   (ext td)
   (editor
      (chars
         (array
            object
            (class Character)
            (obj_flags no_null)
         )
         (help "The Characters whose translucent bits we will draw")
      )
   )
   (types)
)
(CharUpperTwist
   (description
      "<p>Does all interpolation for the upperarm, assuming

        upperArm, upperTwist1 and 2 are under clavicle. Rotation about x is

        evenly distributed from clavicle->twist1->twist2->upperarm</p>

        Feeds the bones when executed."
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext utwist)
   (editor
      (upper_arm
         object
         (class Trans)
         (help "The upper arm bone")
      )
      (twist1
         object
         (class Trans)
         (help "The upper arm twist1 bone")
      )
      (twist2
         object
         (class Trans)
         (help "The upper arm twist2 bone")
      )
   )
   (types)
)
(CharWalk
   (description
      "Given a set of turns, walks, and stops, makes a character

        walk along waypoints, finishing up with a certain facing. There

        must be looping transitions for the walks, and transitions from

        turns to walks. Transitions from walks to stops are not needed as

        you may have to stop on a dime anyway. Instead the beat track is

        used to align walks and stops, so both have to be beat aligned to

        2 beats, and the right foot needs to fall on the even beats."
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext walk)
   (editor)
   (types)
)
(CharWeightable
   (description
      "Base class for any object that can have weight set on it,

        or have a Weightable parent from which it gets that state."
   )
   (allowed_dirs)
   (editor
      (weight float (help "Weight to blend in by"))
      (weight_owner
         object
         (class CharWeightable)
         (help "object to get weight from")
         (no_test)
      )
   )
   (types)
)
(CharWeightSetter
   (description
      "Sets its own weight by pushing flags through a driver to

        see what fraction of them it has."
   )
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext weight)
   (editor
      (driver
         object
         (class CharDriver)
         (help "The Driver to monitor")
      )
      (flags
         int
         (help "Which clip flags to look for")
         (list
            ("kLeftArm"
               "kRightArm"
               "kLeftLeg"
               "kRightLeg"
               (
                  "kLookAtCam"
                  "Forces character's eyes to look at the camera.  Won't happen if cam is out of character's view cone though..."
               )
               "kDisableLipSync"
            )
         )
      )
      (base
         object
         (class CharWeightable)
         (help "If driver not set, uses this to get base weight")
      )
      (min_weights
         (array object (class CharWeightSetter))
         (help "Weight can't be greater than this weightable")
      )
      (max_weights
         (array object (class CharWeightSetter))
         (help "Weight can't be less than this weightable")
      )
      (offset float (help "Constant offset to apply to the weight."))
      (scale float (help "Constant scale to apply to the weight."))
      (base_weight
         float
         (help "The base weight that the real weight is derived from")
      )
      (beats_per_weight
         float
         (help "how many beats it should take to change the weight from 0 to 1")
      )
   )
   (types
      (drummer_play
         (lhand_weight 1)
         (rhand_weight 1)
         (enter
            {set [base_weight] 1}
            {handle (drums_left_hand add_sink $this)}
            {handle (drums_right_hand add_sink $this)}
         )
         (exit
            {set [base_weight] 1}
            {handle (drums_left_hand remove_sink $this)}
            {handle (drums_right_hand remove_sink $this)}
         )
         (get_hand_weight
            ($group)
            {switch $group
               (hihat_fast 0.80)
               (snare_fast 0.50)
               (cymbal_r_grab 0.00)
               (cymbal_l_grab 0.00)
               (cymbal_l_crash 0.50)
               (cymbal_l_crash_big 0.20)
               (cymbal_r_crash 0.50)
               (cymbal_l_crash_fast 0.50)
               (floortom 0.50)
               (floortom_fast 0.50)
               (cymbal_l_side 0.20)
               (cymbal_l_side_fast 0.10)
               (cymbal_r_side 0.20)
               (cymbal_r_side_fast 0.10)
               (ride 0.65)
               (ride_fast 0.45)
               (ride_side_l 0.25)
               (ride_side_r 0.25)
               (cymbal_l 0.50)
               (cymbal_r 0.50)
               (tom_l 0.75)
               (tom_r 0.75)
               (tom_r_fast 0.50)
               (tom_l_fast 0.50)
               1
            }
         )
         (drum_lhand
            ($group $length)
            {set [lhand_weight] {$this get_hand_weight $group}}
            {set [base_weight] {* [lhand_weight] [rhand_weight]}}
         )
         (drum_rhand
            ($group $length)
            {set [rhand_weight] {$this get_hand_weight $group}}
            {set [base_weight] {* [lhand_weight] [rhand_weight]}}
         )
      )
   )
)
(OutfitLoader
   (description
      "Loads new outfits into a character by merging, much like a milo file merge."
   )
   (allowed_dirs ObjectDir)
   (superclasses)
   (ext outfit)
   (editor
      (directory
         file
         (dir 1)
         (help "Directory to look in.")
      )
      (categories
         (array
            (struct
               (name
                  symbol
                  (read_only 1)
                  (help "Name of the category")
               )
               (selected_outfit
                  symbol
                  (refresh categories)
                  (list
                     {$this prop_handle (categories {elem $milo_prop_path 1} list_outfits)}
                  )
                  (post_sync {milo update_objects})
                  (help "Selected outfit")
               )
               (shown_outfit
                  symbol
                  (read_only 1)
                  (help "Shown outfit")
               )
               (desired_outfit
                  symbol
                  (read_only 1)
                  (help "Desired outfit")
               )
               (path
                  file
                  (dir 1)
                  (help "Path to override top level directory, if set.")
                  (read_only 1)
               )
            )
            (header [categories {elem $milo_prop_path 1} name])
         )
         (fixed_size 1)
         (help "All the outfit categories")
      )
      (reset
         script
         (script
            {$this reset}
            {$this start_load}
         )
         (help "Resets state, needed if you change typedef")
      )
      (start_load
         script
         (script {$this start_load})
         (help "Load the current state")
      )
      (disable_all
         bool
         (help "Disables ALL outfitloaders, for debugging ONLY!")
         (no_test)
      )
   )
   (types)
)
(FileMerger
   (description "Merges files into ObjectDirs, much like a milo file merge.")
   (allowed_dirs ObjectDir)
   (superclasses)
   (ext fm)
   (editor
      (mergers
         (array
            (struct
               (name symbol (help "Name of the merger, just for identification"))
               (selected string (help "The file you want to merge"))
               (dir
                  object
                  (class ObjectDir)
                  (help "Dir to merge into, proxy, for instance")
               )
               (proxy
                  bool
                  (help
                     "If true, merges the Dir in as a proxy, rather than the individual objects"
                  )
               )
               (subdirs
                  int
                  (list
                     (
                        ("kFMNoSubdirs" "don't merge subdir contents over")
                        ("kFMMergeAll" "merge all subdir contents")
                        (
                           "kFMMergeInlined"
                           "merge only inlined subdir contents, ignore shared subdirs"
                        )
                        ("kFMMoveAll" "move all subdirs over into the dst")
                        (
                           "kFMMergeInlinedMoveShared"
                           "merge contents of inlined subdirs, move shared ones."
                        )
                     )
                  )
                  (help "How to treat subdirs in the source")
               )
               (loaded
                  string
                  (read_only 1)
                  (help "currently loaded file")
               )
               (loaded_objects
                  (array object class (Object))
                  (help "loaded objects that will be deleted when file changes")
                  (read_only 1)
               )
               (loaded_subdirs
                  (array object class (ObjectDir))
                  (help "moved subdirs that will be removed when file changes")
                  (read_only 1)
               )
               (preclear bool (help "Delete the old objects right at StartLoad time"))
            )
            (header
               {sprint
                  [mergers {elem $milo_prop_path 1} name]
                  " - "
                  [mergers {elem $milo_prop_path 1} loaded]
               }
            )
         )
         (help "Array of file mergers")
      )
      (start_load
         script
         (script {$this start_load})
         (help "Load the current state")
      )
      (disable_all
         bool
         (help "Disables ALL filemergers , for debugging ONLY!")
         (no_test)
      )
   )
   (types
      (main
         (change_files
            ($async $loading)
            {if_else
               {&&
                  $loading
                  {|| $loading_venue $banddirector {exists game}}
               }
               {$this clear_selections}
               {{$this dir} set_file_merger}
            }
         )
         (on_pre_clear
            ($cat)
            {switch $cat
               (
                  (torso legs hands feet)
                  {{$this dir} pre_clear $cat $this}
               )
            }
         )
         (on_pre_merge
            ($cat $from $to)
            {switch $cat
               (
                  (guitar drum bass mic keyboard rigging)
                  {{$this dir} install_filter $from $to $from $cat}
               )
               (stick_left
                  {set
                     [mergers
                        {$this merger_index $cat 0}
                        dir
                     ]
                     {{$this dir} find stick_left_clips}
                  }
               )
               (stick_right
                  {set
                     [mergers
                        {$this merger_index $cat 0}
                        dir
                     ]
                     {{$this dir} find stick_right_clips}
                  }
               )
               (drum_pedal_left
                  {set
                     [mergers
                        {$this merger_index $cat 0}
                        dir
                     ]
                     {{$this dir} find drum_L-foot}
                  }
               )
               (drum_pedal_right
                  {set
                     [mergers
                        {$this merger_index $cat 0}
                        dir
                     ]
                     {{$this dir} find drum_R-foot}
                  }
               )
               (guitar_fret
                  {set
                     [mergers
                        {$this merger_index $cat 0}
                        dir
                     ]
                     {{$this dir} find fret_left}
                  }
               )
               (
                  (body_add_clips body_add_base)
                  {set
                     [mergers
                        {$this merger_index $cat 0}
                        dir
                     ]
                     {{$this dir} find body_add}
                  }
               )
               (
                  (head
                     eyebrows
                     torso
                     legs
                     hands
                     wrist
                     rings
                     feet
                     hair
                     facehair
                     earrings
                     glasses
                     piercings
                  )
                  {{$this dir} install_filter $from $to "" $cat}
               )
            }
         )
         (on_post_merge
            ($cat $to $final)
            {with {$this dir}
               {if {== $cat rigging}
                  {switch [instrument_type]
                     (
                        (guitar bass)
                        {foreach $name
                           (fret.dmidi
                              strum.dmidi
                              string_hi.dmidi
                              string_low.dmidi
                              zBassOffset.drv
                              fret_add.drv
                           )
                           {if {&& {exists $name} {exists bone.servo}}
                              {$name set bones bone.servo}
                           }
                        }
                        {if {exists main.drv}
                           {if {exists right_hand.weight}
                              {right_hand.weight set driver main.drv}
                           }
                           {if {exists left_hand.weight}
                              {left_hand.weight set driver main.drv}
                           }
                        }
                     )
                     (drum
                        {if {exists bone_drumbase.mesh}
                           {set $char {bone_pelvis.mesh trans_parent}}
                           {bone_drumbase.mesh set_trans_parent $char}
                        }
                        {foreach $name
                           (floortom.dmidi
                              hihat.dmidi
                              kick.dmidi
                              left_crash.dmidi
                              left_tom.dmidi
                              ride.dmidi
                              right_crash.dmidi
                              right_tom.dmidi
                              snare.dmidi
                              main_add.drv
                           )
                           {if {&& {exists $name} {exists bone.servo}}
                              {$name set bones bone.servo}
                           }
                        }
                        {if {exists limbs.blender}
                           {limbs.blender set dest bone.servo}
                           {foreach $name (left_foot.dmidi left_hand.dmidi right_foot.dmidi right_hand.dmidi)
                              {if {exists $name}
                                 {$name set bones limbs.blender}
                              }
                           }
                        }
                        {if {exists main.drv}
                           {foreach $weight
                              (left_foot.weight
                                 left_hand.weight
                                 right_foot.weight
                                 right_hand.weight
                                 right_hand_ik.weight
                                 left_hand_ik.weight
                              )
                              {if {exists $weight}
                                 {$weight set driver main.drv}
                              }
                           }
                        }
                     )
                     (keyboard
                        {if {exists bone_keyboard_base.mesh}
                           {set $char {bone_pelvis.mesh trans_parent}}
                           {bone_keyboard_base.mesh set_trans_parent $char}
                        }
                        {foreach $name (main_add.drv)
                           {if {&& {exists $name} {exists bone.servo}}
                              {$name set bones bone.servo}
                           }
                        }
                        {if {exists limbs.blender}
                           {limbs.blender set dest bone.servo}
                           {foreach $name (left_hand.dmidi right_hand.dmidi)
                              {if {exists $name}
                                 {$name set bones limbs.blender}
                              }
                           }
                        }
                        {if {exists main.drv}
                           {foreach $weight
                              (left_hand.weight
                                 right_hand.weight
                                 left_hand_idle.weight
                                 right_hand_idle.weight
                              )
                              {if {exists $weight}
                                 {$weight set driver main.drv}
                              }
                           }
                        }
                        {if {exists rh_target.ikslide}
                           {rh_target.ikslide reset}
                        }
                        {if {exists lh_target.ikslide}
                           {lh_target.ikslide reset}
                        }
                     )
                     (mic
                        {if {exists main.drv}
                           {if {exists mic_in_hand.weight}
                              {mic_in_hand.weight set driver main.drv}
                           }
                        }
                     )
                  }
               }
               {if {|| $final {! {has_any_substr $cat ("directed_cut")}}}
                  {$this on_post_merge $cat $to $final}
               }
            }
         )
      )
      (crowd_anim
         (change_files
            ($async $loading)
            {if $loading
               {$this select male_tempo ""}
               {$this select female_tempo ""}
            }
         )
         (load_tempo
            ($tempo $async $coordinator)
            {with_file_root
               {file_root}
               {if_else $tempo
                  {do
                     {$this select
                        female_tempo
                        {sprint "char/crowd/anim/female_" $tempo ".milo"}
                     }
                     {$this select
                        male_tempo
                        {sprint "char/crowd/anim/male_" $tempo ".milo"}
                     }
                  }
                  {do
                     {$this select male_tempo ""}
                     {$this select female_tempo ""}
                  }
               }
               {if_else $coordinator
                  {$coordinator add_outfit_loader $this}
                  {$this start_load $async}
               }
            }
         )
      )
      (world
         (change_files
            ($async $loading)
            {if {&& $loading $banddirector}
               {$banddirector set merger $this}
               {if {exists game}
                  {$banddirector load_game_song 0}
               }
            }
         )
         (on_load_failed
            ($cat)
            {if $banddirector
               {$banddirector on_file_loaded $cat {object}}
            }
         )
         (on_pre_merge
            ($cat $from $to)
            {if $banddirector
               {$banddirector on_file_loaded $cat $from}
            }
         )
         (on_post_merge
            ($cat $to $final)
            {if {&& {! [loading_load]} {|| $final [async_load]}}
               {{$this dir} sync_objects}
            }
         )
         (check_sync
            ($filename $cat)
            {if {&& {exists milo} {!= $filename ""} {! {has_substr $filename "none.milo"}}}
               {milo p4_checksync $filename}
               {if {== $cat songs}
                  {milo p4_checklocked $filename 1}
               }
            }
         )
      )
      (venue_extra
         (change_files
            ($async $loading)
            {handle ($bandwardrobe select_extras $this)}
         )
         (on_pre_merge
            ($cat $from $to)
            {handle
               ($bandwardrobe on_extra_loaded $from $to)
            }
         )
         (on_post_merge
            ($cat $to $final)
            {$to sync_objects}
         )
      )
   )
)
(ClipCollide
   (description "Analyzes character clips in a venue")
   (milo_no_save)
   (allowed_dirs ObjectDir)
   (superclasses)
   (ext vv)
   (editor
      (character
         object
         (class Character)
         (help "Pointer to the character to move around")
         (no_test)
      )
      (pick_character
         string
         (list ("" ""))
         (help "Changes the character to one of the listed ones")
         (no_test)
      )
      (waypoint
         object
         (class Waypoint)
         (help "Waypoint to stand at")
         (no_test)
      )
      (position
         symbol
         (list (front back left right))
         (help "Where in the waypoint to stand")
         (no_test)
      )
      (clip
         object
         (class CharClip)
         (dir_prop clips)
         (list {$this list_clips})
         (help "Clip to test")
         (no_test)
      )
      (demonstrate
         script
         (help "Run the animation")
         (script {$this demonstrate})
         (no_test)
      )
      (collide
         script
         (help "Run the collision")
         (script
            {$this clear_report}
            {$this collide}
         )
         (refresh pick_report)
         (no_test)
      )
      (test_chars
         script
         (help "Test all the characters against all the waypoints in this venue")
         (script
            {$this clear_report}
            {$this test_chars}
         )
         (refresh pick_report)
         (no_test)
      )
      (test_waypoints
         script
         (help "Test the current character against all the waypoints in the venue")
         (script
            {$this clear_report}
            {$this test_waypoints}
         )
         (refresh pick_report)
         (no_test)
      )
      (test_clips
         script
         (help "Test all clips for the current character and waypoint")
         (script
            {$this clear_report}
            {$this test_clips}
         )
         (refresh pick_report)
         (no_test)
      )
      (pick_report
         string
         (list {$this list_report})
         (help "Pick a report entry to look at")
         (refresh waypoint position clip)
         (no_test)
      )
      (world_lines
         bool
         (help "show red world lines")
         (no_test)
      )
      (move_camera
         bool
         (help "move the camera when you pick a report")
         (no_test)
      )
      (mode
         symbol
         (list ())
         (help "mode to run in")
         (no_test)
      )
   )
   (types)
)
(PatchDir
   (description "Directory for tattoo/clothing patches")
   (types)
)
(PatchLayer
   (description "Layer for tattoo/clothing patches")
   (types)
)
(Waypoint
   (description
      "A waypoint for character movement. Characters walk to

   these, start themselves out from these, etc."
   )
   (allowed_dirs ObjectDir)
   (superclasses Trans)
   (ext way)
   (editor
      (flags int (help "Flags for this waypoint, should be a bitfield per app"))
      (radius
         float
         (help "Radius within we can stop from a walk, or be tethered to")
      )
      (y_radius
         float
         (help
            "If positive, makes this shape a box with radius the x axis X half width, and y_radius the Y axis half width"
         )
      )
      (ang_radius float (help "Angular slop in degrees away from y axis"))
      (strict_radius_delta
         float
         (help
            "how much beyond radius you will never leave, it will forcibly pull you back, ignored if <= 0"
         )
      )
      (strict_ang_delta
         float
         (help "degrees beyond ang radius you can never rotate past, if >= 0")
      )
      (connections
         (array object (class Waypoint))
         (help "Waypoints we can walk to")
      )
   )
   (types)
)
(PanelDir
   (description
      "Top-level UI Object,

    contains UI components and an optional camera"
   )
   (superclasses RndDir)
   (allowed_dirs)
   (editor
      (cam
         object
         (class Cam)
         (help "Camera to use in game, else standard UI cam")
         (post_sync {milo update_camera_buttons})
      )
      (use_specified_cam
         bool
         (help
            "Forces the usage of the 'cam' property to render in milo. This is a milo only feature."
         )
      )
      (postprocs_before_draw
         bool
         (help
            "Trigger postprocs before drawing this panel.
If checked, this panel will not be affected by the postprocs."
         )
      )
      (front_view_only_panels
         (array file)
         (help "Additional panels to display in front of this panel.")
         (post_sync
            {handle ($this enter)}
            {milo update_objects}
         )
         (hide {$this is_proxy})
      )
      (back_view_only_panels
         (array file)
         (help "Additional panels to display behind this panel.")
         (post_sync
            {handle ($this enter)}
            {milo update_objects}
         )
         (hide {$this is_proxy})
      )
      (show_view_only_panels
         bool
         (help "Whether or no this panel displays its view only panels")
      )
   )
   (types
      (shell
         (editor
            (focus_scale
               float
               (range 1 10)
               (help "Scale factor when buttons are focused")
            )
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use when this panel is on screen")
               (post_sync {$this update_postproc})
            )
            (refresh_postproc
               script
               (script {$this update_postproc})
               (help "Refresh postprocessor selection on the tool")
            )
         )
         (focus_scale 1)
         (postprocess "")
         (update_postproc
            {if $edit_mode
               {if_else [postprocess]
                  {[postprocess] select}
                  {rnd reset_postproc}
               }
            }
         )
         (play_cascade
            ($start_button $delay)
            {if $start_button
               {do
                  ($comp)
                  {$start_button stop_anim "enter_anim"}
                  {$start_button stop_anim "exit_anim"}
                  {set $comp {$start_button get nav_down}}
                  {while {&& {!= $comp ""} {!= $comp $start_button}}
                     {$comp stop_anim "enter_anim"}
                     {$comp stop_anim "exit_anim"}
                     {set $comp {$comp get nav_down}}
                  }
                  {if {exists cascade_intro}
                     {delete cascade_intro}
                  }
                  {$start_button play_anim enter_anim}
                  {set $comp {$start_button get nav_down}}
                  {thread_task
                     0
                     (name cascade_intro)
                     (script
                        {set $i 0}
                        {if {|| {== $comp ""} {== $comp $start_button}}
                           {$task exit}
                        }
                        {$task sleep $delay}
                        {$comp play_anim enter_anim}
                        {set $comp {$comp get nav_down}}
                        {$task loop}
                     )
                  }
               }
            }
         )
         (play_exit
            ($start_button)
            {if $start_button
               {do
                  ($comp)
                  {if {exists cascade_intro}
                     {delete cascade_intro}
                  }
                  {if {$start_button is_anim_playing "enter_anim"}
                     {$start_button play_anim "exit_anim"}
                  }
                  {set $comp {$start_button get nav_down}}
                  {while {&& {!= $comp ""} {!= $comp $start_button}}
                     {if {$comp is_anim_playing "enter_anim"}
                        {$comp play_anim "exit_anim"}
                     }
                     {set $comp {$comp get nav_down}}
                  }
               }
            }
         )
         (kill_cascade
            ($start_button)
            {if $start_button
               {do
                  ($comp)
                  {if {exists cascade_intro}
                     {delete cascade_intro}
                  }
                  {if_else {$start_button is_anim_playing "enter_anim"}
                     {$start_button stop_anim "enter_anim"}
                     {if_else {$start_button is_anim_playing "exit_anim"}
                        {$start_button stop_anim "exit_anim"}
                        {do
                           {$comp play_anim "exit_anim"}
                           {$comp stop_anim "exit_anim"}
                        }
                     }
                  }
                  {set $comp {$start_button get nav_down}}
                  {while {&& {!= $comp ""} {!= $comp $start_button}}
                     {if_else {$comp is_anim_playing "enter_anim"}
                        {$comp stop_anim "enter_anim"}
                        {if_else {$comp is_anim_playing "exit_anim"}
                           {$comp stop_anim "exit_anim"}
                           {do
                              {$comp play_anim "exit_anim"}
                              {$comp stop_anim "exit_anim"}
                           }
                        }
                     }
                     {set $comp {$comp get nav_down}}
                  }
               }
            }
         )
      )
   )
)
(UIComponent
   (description
      "Base class of all UI components, 

   defines navigation and component state"
   )
   (superclasses Draw Trans Poll)
   (allowed_dirs)
   (editor
      (resource_name
         string
         (list
            {if_else {$this get_resources_path}
               {file_list {sprint {$this get_resources_path} "/*.milo"}}
               ("")
            }
         )
         (help "path to resource file for this component")
         (no_test)
      )
      (open_resource
         script
         (script
            {set $resourcePath
               {sprint
                  {file_root}
                  "/"
                  {$this get_resources_path}
                  "/"
                  [resource_name]
                  ".milo"
               }
            }
            {set $execCmd {sprint "cmd /c start " $resourcePath}}
            {system_exec $execCmd}
         )
         (help
            "opens the current resource file for this component - will open in a new milo window"
         )
      )
      (nav_right
         object
         (list
            {do
               ($dir {$this dir})
               ($list ())
               {if {$dir is_a PanelDir}
                  {set $list {$dir get_focusable_components}}
               }
               {insert_elem $list 0 ""}
               $list
            }
         )
         (read_only {! {$this can_have_focus}})
      )
      (nav_down
         object
         (list
            {do
               ($dir {$this dir})
               ($list ())
               {if {$dir is_a PanelDir}
                  {set $list {$dir get_focusable_components}}
               }
               {insert_elem $list 0 ""}
               $list
            }
         )
         (read_only {! {$this can_have_focus}})
      )
      (set_focus
         script
         (script {{$this dir} set_focus $this})
         (read_only {! {$this can_have_focus}})
      )
      (enable script (script {{$this dir} enable $this}))
      (disable script (script {{$this dir} disable $this}))
   )
   (types)
   (select_frames 30)
   (resources_path "")
)
(UIFontImporter
   (description
      "Class supporting font importing.  To be included in font resource file classes."
   )
   (superclasses)
   (allowed_dirs)
   (editor
      (allowed_chars
         (indent
            (UPPER_CASE_A_Z bool (help "include uppercase letters"))
            (lower_case_a_z bool (help "include lowercase letters"))
            (numbers_0_9 bool (help "include the number 0-9"))
            (punctuation bool (help "include punctuation characters"))
            (UPPER_EURO bool (help "include uppercase euro chars"))
            (lower_euro bool (help "include lowercase euro chars"))
            (plus string (help "type in extra characters to include here"))
            (minus string (help "type in characters to exclude here"))
         )
      )
      (font_info
         (indent
            (font_name
               string
               (help "name of the font")
               (read_only 1)
               (refresh bitmap_save_name)
            )
            (pitch_and_family
               int
               (help "pitch and family of font - comes from font picker")
               (read_only 1)
            )
            (font_charset
               int
               (help "character set for this font - comes from font picker")
               (read_only 1)
            )
            (font_pct_size
               float
               (range 0.00 0.75)
               (percent 1)
               (help "default font size in percent screen height")
               (refresh bitmap_save_name font_point_size font_pixel_size)
            )
            (font_point_size
               int
               (help "the equivalent point size")
               (refresh bitmap_save_name)
               (read_only 1)
            )
            (font_pixel_size
               int
               (help "the equivalent pixel size")
               (refresh bitmap_save_name)
               (read_only 1)
            )
            (bold
               bool
               (help "bold variation?")
               (refresh bitmap_save_name)
            )
            (italics
               bool
               (help "italic variation?")
               (refresh bitmap_save_name)
            )
            (font_supersample
               int
               (list
                  ("kFontSuperSample_None" "kFontSuperSample_2x" "kFontSuperSample_4x")
               )
               (refresh bitmap_save_name)
               (help
                  "our own supersampling that draws the font texture at 2 or 4x and scales down like in photoshop.  Might improve anti-aliasing at small font sizes."
               )
            )
            (font_picker
               script
               (script
                  {$this show_font_picker}
                  {milo update_open_editor $this}
               )
            )
            (bitmap_save_path string (help "path to save bitmap to (i.e. ui/image/)"))
            (bitmap_save_name
               string
               (help "name of the bitmap file (i.e. Arial(12).BMP)")
            )
         )
      )
      (padding
         (indent
            (left int (help "pixels of padding on the left side of each character"))
            (right int (help "pixels of padding on the left side of each character"))
            (top int (help "pixels of padding on the left side of each character"))
            (bottom int (help "pixels of padding on the left side of each character"))
         )
      )
      (misc
         (indent
            (fill_with_safe_white
               bool
               (help "fill texture with safe white color (235)")
            )
         )
      )
      (mat_variations
         (array object (class Mat))
         (help "A list of materials we will expose for this font")
         (post_sync
            {milo invalidate_listers_and_trees}
            {milo update_objects}
         )
      )
      (handmade_font
         object
         (class Font)
         (help
            "If you want to handmake a font texture, assign it here and the importer will no longer try to generate textures"
         )
         (post_sync
            {milo invalidate_listers_and_trees}
            {milo update_objects}
         )
         (no_test)
      )
      (generate_ng
         script
         (script
            {$this generate}
            {milo invalidate_listers_and_trees}
            {milo update_objects}
            {milo reload_textures}
         )
         (help
            "generates the font/textures/materials for NG platform using the current import settings"
         )
      )
      (generate_og
         script
         (script
            {$this generate_og}
            {milo invalidate_listers_and_trees}
            {milo update_objects}
            {milo reload_textures}
         )
         (help
            "generates the font/textures/materials for OG platform using the current import settings"
         )
      )
      (last_genned_ng
         bool
         (read_only 1)
         (help "was the texture for this font last genned for an NG platform?")
      )
      (reference_kerning
         object
         (class Font)
         (help
            "A font which we'll transfer the kerning info from for any gen-ed fonts"
         )
      )
      (gened_fonts
         (indent
            (gened_fonts
               (array object (class Font))
               (read_only 1)
               (help
                  "the font(s) we've gen-ed for this resource file.  We will maintain a connection to these objects when you re-generate"
               )
            )
            (forget
               script
               (script
                  {$this forget_gened_fonts}
                  {milo update_open_editor $this}
               )
               (help
                  "forget about our gen-ed fonts.  Next time you generate, you'll get new objects!"
               )
            )
            (highlight
               script
               (script
                  {foreach_int $i 0 {size [gened_fonts]}
                     {set $curFont {$this get (gened_fonts $i)}}
                     {$curFont iterate_refs
                        $ref
                        {if {$ref is_a Text}
                           {milo set_highlights ($ref)}
                        }
                     }
                  }
               )
               (help
                  "highlights the Text objects for all the gen-ed fonts the importer is attached to"
               )
            )
         )
      )
      (open_bitmap
         script
         (script
            {set $execCmd {sprint "cmd /c start " {$this get_bitmap_path}}}
            {system_exec $execCmd}
         )
         (help "opens the generated font texture with windows explorer")
      )
      (p4_edit_bitmap
         script
         (script
            {set $execCmd {sprint "p4 edit " {$this get_bitmap_path}}}
            {system_exec $execCmd}
         )
         (help "opens the generated font texture with windows explorer")
      )
      (sync_with_resource
         (indent
            (resource_name
               string
               (list
                  {if_else {$this get_resources_path}
                     {file_list {sprint {$this get_resources_path} "/*.milo"}}
                     ("")
                  }
               )
               (help
                  "You can pull in all the importer settings from another resource file by selecting it above and hitting the sync button below"
               )
               (no_test)
            )
            (sync
               script
               (script
                  {milo record $this "sync UIFontImporter with resource file"}
                  {$this sync_with_resource}
                  {milo invalidate_listers_and_trees}
                  {milo update_objects}
               )
               (help
                  "will pull in all the importer settings from another resource file, specified by 'resource_name' above"
               )
            )
         )
      )
   )
   (default_bitmap_path "ui/resource/image")
)
(UIButton
   (description
      "Simple button, basically just a 

   label that can be selected"
   )
   (superclasses UILabel)
   (allowed_dirs PanelDir)
   (ext but)
   (init {set [resource_name] "default"})
   (types)
   (resources_path "resource/fonts/")
)
(UILabel
   (description "Simple label, provides localization of tokens")
   (superclasses UIComponent)
   (allowed_dirs PanelDir UIListDir)
   (ext lbl)
   (editor
      (text_token
         symbol
         (help "Localization token if localize is true")
         (no_test)
         (list {$this token_list})
      )
      (sync_reload_tokens
         script
         (script {sync_reload_locale})
         (help "Perforce sync and reload locale files")
      )
      (get_magnu_tokens
         script
         (script {magnu_refresh_strings})
         (help "Query Magnu for the latest localization tokens")
      )
      (add_token
         script
         (script {add_token})
         (help "Add new token in Magnu")
      )
      (icon
         string
         (help "Single-character icon")
         (no_test)
      )
      (edit_text
         string
         (help "Milo-only preview text")
         (no_test)
      )
      (text_size
         float
         (range 0.00 5)
         (percent 1)
         (help
            "Text size in percentage of screen height (i.e. 50% is half the screen height for the largest glyph)"
         )
         (no_cdb)
      )
      (font_mat_variation
         symbol
         (list {$this get_material_variations})
         (help
            "the material variation to use, populated from those setup in the resource file.  selecting none gives you the default material."
         )
      )
      (alignment
         int
         (list
            (
               "kTopLeft"
               "kTopCenter"
               "kTopRight"
               "kMiddleLeft"
               "kMiddleCenter"
               "kMiddleRight"
               "kBottomLeft"
               "kBottomCenter"
               "kBottomRight"
            )
         )
         (help "Text alignment")
      )
      (caps_mode
         int
         (list ("kCapsModeNone" "kForceLower" "kForceUpper"))
         (help "Text case setting")
      )
      (markup bool (help "Support markup?"))
      (leading float (help "Space between lines"))
      (kerning float (help "Additional kerning applied to text object"))
      (italics
         float
         (range 0 0.5) ;was 100
         (help "Italics for text object")
      )
      (fit_type
         int
         (list ("kFitWrap" "kFitJust" "kFitEllipsis"))
         (help "How to fit text in the width/height specified")
      )
      (preserve_trunc_text
         string
         (help "Optional text to append after truncation with kFitEllipsis")
      )
      (width
         float
         (range 0 1000)
         (help "Width of label")
      )
      (height
         float
         (range 0 1000)
         (help "Height of label")
      )
      (alpha
         float
         (range 0 1)
         (help "Controls transparency of label")
      )
      (color_override
         object
         (class UIColor)
         (help "Color override for this instance")
      )
      (adjust_height
         script
         (script
            {$this adjust_height}
            {if {exists milo}
               {milo update_open_editor $this}
            }
         )
      )
      (fixed_length
         int
         (range 0 1000)
         (help "Preallocated size of internal text object")
      )
      (reserve_lines
         int
         (range 0 100)
         (help "Preallocated number of lines in internal text object")
      )
      (use_highlight_mesh
         bool
         (help "whether or not to use highlight mesh (if available)")
         (read_only {! {$this has_highlight_mesh}})
      )
      (alt_font_resource_name
         string
         (list
            {if_else {$this get_resources_path}
               {file_list {sprint {$this get_resources_path} "/*.milo"}}
               ("")
            }
         )
         (help "path to alt font resource file for this component")
         (no_test)
      )
      (open_alt_font_resource
         script
         (script
            {set $resourcePath
               {sprint
                  {file_root}
                  "/"
                  {$this get_resources_path}
                  "/"
                  [alt_font_resource_name]
                  ".milo"
               }
            }
            {set $execCmd {sprint "cmd /c start " $resourcePath}}
            {system_exec $execCmd}
         )
         (help
            "opens the current resource file for this component - will open in a new milo window"
         )
      )
      (alt_text_size
         float
         (range 0.00 5)
         (percent 1)
         (help
            "Text size of alternate style in percentage of screen height (i.e. 50% is half the screen height for the largest glyph)"
         )
         (no_cdb)
      )
      (alt_mat_variation
         symbol
         (list {$this get_altmaterial_variations})
         (help
            "the material variation to use from the alternate font. selecting none gives you the default material."
         )
      )
      (alt_kerning float (help "Additional kerning applied to alt text object"))
      (alt_text_color
         object
         (class UIColor)
         (help "Color to use when in alt style")
      )
      (alt_z_offset
         float
         (help "Z-offset for alt text (to manually match up baselines)")
      )
      (alt_italics
         float
         (range 0 1) ;was 100
         (help "Italics for text object's alt font")
      )
      (alt_alpha
         float
         (range 0 1)
         (help "Controls transparency of label's alt font")
      )
      (alt_style_enabled bool (help "Whether to parse <alt> tags for alt style"))
      (validate
         script
         (script {$this validate})
         (helps "Notifies what is wrong if anything.")
      )
   )
   (init {set [resource_name] "default"})
   (types)
   (resources_path "resource/fonts/")
)
(UILabelDir
   (description "Top-level resource object for UILabels")
   (superclasses UIFontImporter RndDir)
   (types)
   (editor
      (focus_anim object (class Anim))
      (pulse_anim object (class Anim))
      (highlight_mesh_group object (class Group))
      (top_left_highlight_bone object (class Mesh))
      (top_right_highlight_bone object (class Mesh))
      (bottom_left_highlight_bone object (class Mesh))
      (bottom_right_highlight_bone object (class Mesh))
      (focused_background_group object (class Group))
      (unfocused_background_group object (class Group))
      (default_color
         object
         (class UIColor)
         (help "color to use when no other color is defined for a state")
      )
      (normal_color
         object
         (class UIColor)
         (help "color when label is normal")
      )
      (focused_color
         object
         (class UIColor)
         (help "color when label is focused")
      )
      (disabled_color
         object
         (class UIColor)
         (help "color when label is disabled")
      )
      (selecting_color
         object
         (class UIColor)
         (help "color when label is selecting")
      )
      (selected_color
         object
         (class UIColor)
         (help "color when label is selected")
      )
      (allow_edit_text
         bool
         (help "allow non-localized text with this resource?")
      )
   )
)
(UIList
   (description
      "Component for displaying 1- or 2-dimensional lists of data.

        Can be oriented horizontally or vertically, can scroll normally or

        circularly, and can have any number of visible elements (even just

        one, a.k.a. a spin button)."
   )
   (superclasses UIComponent)
   (allowed_dirs PanelDir UIListDir)
   (ext lst)
   (editor
      (display_num
         int
         (range 1 50)
         (help "Number of rows/columns")
      )
      (grid_span
         int
         (range 1 50)
         (help "Number \" across\" for a grid.")
      )
      (circular bool (help "Does the list scrolling wrap?"))
      (scroll_time
         float
         (range 0 5)
         (help "Time (seconds) to scroll one step - 0 for instant scrolling")
      )
      (paginate bool (help "Allow scrolling by pages?"))
      (select_to_scroll
         bool
         (help "Does list need to be selected before user can scroll?")
      )
      (min_display
         int
         (range 0 50)
         (help "How far from top of list to start scrolling")
      )
      (scroll_past_min_display bool)
      (max_display
         int
         (range -1 50)
         (help
            "How far down can the highlight travel before scoll? Use -1 for no limit"
         )
      )
      (scroll_past_max_display
         bool
         (help "Allow selected data to move beyond max highlight?")
      )
      (num_data
         int
         (range 1 1000)
         (help "Num data to show (only for milo)")
      )
      (auto_scroll_pause
         float
         (range 0 100)
         (help "Time to pause when auto scroll changes directions (seconds)")
      )
      (auto_scroll_send_messages
         bool
         (help
            "Should this list send UIComponentScroll* messages while auto-scrolling?"
         )
      )
      (auto_scroll script (script {$this auto_scroll}))
      (stop_auto_scroll script (script {$this stop_auto_scroll}))
      (in_anim
         object
         (class Anim)
         (help "animation kicked off before extended entries are updated")
      )
      (out_anim
         object
         (class Anim)
         (help "animation kicked off after extended entries are updated")
      )
      (extended_label_entries
         (array object (class UILabel))
         (help "labels to be filled in by list provider at runtime")
      )
      (extended_mesh_entries
         (array object (class Mesh))
         (help "meshes to be filled in by list provider at runtime")
      )
      (extended_custom_entries
         (array object (class Object))
         (help "custom objects to be filled in by list provider at runtime")
      )
   )
   (init {$this set_type default})
   (types
      (default (resource_file "list.milo"))
      (spin (resource_file "list_spin.milo"))
   )
)
(UIListDir
   (description "Top-level resource object for UILists")
   (superclasses RndDir)
   (types)
   (editor
      (orientation
         int
         (list ("kUIListVertical" "kUIListHorizontal"))
         (help "scroll direction of list")
      )
      (fade_offset
         int
         (range 0 10)
         (help "Number of elements to fade from beginning/end of list")
      )
      (element_spacing
         float
         (range 0 1000)
         (help "spacing between elements")
      )
      (scroll_highlight_change
         float
         (range 0 1)
         (help "point during scroll when highlight changes")
      )
      (test_mode bool (help "draw widgets in preview mode?"))
      (test_num_display
         int
         (range 1 100)
         (help "number of elements to draw")
      )
      (test_num_data
         int
         (range 1 100)
         (help "total number of data elements")
      )
      (test_scroll_time
         float
         (range 0 5)
         (help "test scroll time")
      )
      (test_list_state
         int
         (list
            (
               "kComponentNormal"
               "kComponentFocused"
               "kComponentDisabled"
               "kComponentSelecting"
               "kComponentSelected"
            )
         )
      )
      (test_gap_size
         float
         (range 0 1000)
         (help "test gaps between elements")
      )
      (test_disable_elements bool (help "test disable every other element"))
      (scroll_back script (script {$this test_scroll -1}))
      (scroll_next script (script {$this test_scroll 1}))
   )
)
(UIListWidget
   (description "Base functionality for UIList widgets")
   (allowed_dirs)
   (types)
   (editor
      (draw_order float (help "order this widget will be drawn"))
      (widget_draw_type
         int
         (list
            (
               "kUIListWidgetDrawAlways"
               "kUIListWidgetDrawOnlyFocused"
               "kUIListWidgetDrawFocusedOrManual"
            )
         )
         (help "under what conditions to draw this widget")
      )
      (disabled_alpha_scale
         float
         (range 0 1)
         (help "scale for widget alpha when list is disabled")
      )
      (default_color
         object
         (class UIColor)
         (help "color applied if no state specific color is set ")
      )
      (active_normal_color
         object
         (class UIColor)
         (help "color when element is active and list is normal")
      )
      (active_focused_color
         object
         (class UIColor)
         (help "color when element is active and list is focused")
      )
      (active_disabled_color
         object
         (class UIColor)
         (help "color when element is active and list is disabled")
      )
      (active_selecting_color
         object
         (class UIColor)
         (help "color when element is active and list is selecting")
      )
      (active_selected_color
         object
         (class UIColor)
         (help "color when element is active and list is selected")
      )
      (highlight_normal_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is normal")
      )
      (highlight_focused_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is focused")
      )
      (highlight_disabled_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is disabled")
      )
      (highlight_selecting_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selecting")
      )
      (highlight_selected_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selected")
      )
      (inactive_normal_color
         object
         (class UIColor)
         (help "color when element is inactive and list is normal")
      )
      (inactive_focused_color
         object
         (class UIColor)
         (help "color when element is inactive and list is focused")
      )
      (inactive_disabled_color
         object
         (class UIColor)
         (help "color when element is inactive and list is disabled")
      )
      (inactive_selecting_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selecting")
      )
      (inactive_selected_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selected")
      )
   )
)
(UIListSlot
   (description "Base functionality for UIList slots")
   (allowed_dirs)
   (types)
   (editor
      (slot_draw_type
         int
         (list
            (
               "kUIListSlotDrawAlways"
               "kUIListSlotDrawHighlight"
               "kUIListSlotDrawNoHighlight"
            )
         )
         (help "when to draw the slot")
      )
      (draw_order float (help "order this widget will be drawn"))
      (widget_draw_type
         int
         (list
            (
               "kUIListWidgetDrawAlways"
               "kUIListWidgetDrawOnlyFocused"
               "kUIListWidgetDrawFocusedOrManual"
            )
         )
         (help "under what conditions to draw this widget")
      )
      (disabled_alpha_scale
         float
         (range 0 1)
         (help "scale for widget alpha when list is disabled")
      )
      (default_color
         object
         (class UIColor)
         (help "color applied if no state specific color is set ")
      )
      (active_normal_color
         object
         (class UIColor)
         (help "color when element is active and list is normal")
      )
      (active_focused_color
         object
         (class UIColor)
         (help "color when element is active and list is focused")
      )
      (active_disabled_color
         object
         (class UIColor)
         (help "color when element is active and list is disabled")
      )
      (active_selecting_color
         object
         (class UIColor)
         (help "color when element is active and list is selecting")
      )
      (active_selected_color
         object
         (class UIColor)
         (help "color when element is active and list is selected")
      )
      (highlight_normal_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is normal")
      )
      (highlight_focused_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is focused")
      )
      (highlight_disabled_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is disabled")
      )
      (highlight_selecting_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selecting")
      )
      (highlight_selected_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selected")
      )
      (inactive_normal_color
         object
         (class UIColor)
         (help "color when element is inactive and list is normal")
      )
      (inactive_focused_color
         object
         (class UIColor)
         (help "color when element is inactive and list is focused")
      )
      (inactive_disabled_color
         object
         (class UIColor)
         (help "color when element is inactive and list is disabled")
      )
      (inactive_selecting_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selecting")
      )
      (inactive_selected_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selected")
      )
   )
)
(UIListArrow
   (description "Arrow widget for use with UIList")
   (ext arw)
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (mesh
         object
         (class Mesh)
         (help "arrow mesh to draw/transform")
      )
      (scroll_anim
         object
         (class Anim)
         (help "animation to play on scroll")
      )
      (position
         int
         (list ("kUIListArrowBack" "kUIListArrowNext"))
         (help "whether to position relative to first or last element")
      )
      (show_only_scroll bool (help "show only when list is scrollable"))
      (on_highlight bool (help "position arrow relative to higlight"))
      (draw_order float (help "order this widget will be drawn"))
      (widget_draw_type
         int
         (list
            (
               "kUIListWidgetDrawAlways"
               "kUIListWidgetDrawOnlyFocused"
               "kUIListWidgetDrawFocusedOrManual"
            )
         )
         (help "under what conditions to draw this widget")
      )
      (disabled_alpha_scale
         float
         (range 0 1)
         (help "scale for widget alpha when list is disabled")
      )
      (default_color
         object
         (class UIColor)
         (help "color applied if no state specific color is set ")
      )
      (highlight_normal_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is normal")
      )
      (highlight_focused_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is focused")
      )
      (highlight_disabled_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is disabled")
      )
      (highlight_selecting_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selecting")
      )
      (highlight_selected_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selected")
      )
      (inactive_normal_color
         object
         (class UIColor)
         (help "color when element is inactive and list is normal")
      )
      (inactive_focused_color
         object
         (class UIColor)
         (help "color when element is inactive and list is focused")
      )
      (inactive_disabled_color
         object
         (class UIColor)
         (help "color when element is inactive and list is disabled")
      )
      (inactive_selecting_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selecting")
      )
      (inactive_selected_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selected")
      )
   )
)
(UIListHighlight
   (description "Highlight widget for use with UIList")
   (ext arw)
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (mesh
         object
         (class Mesh)
         (help "arrow mesh to draw/transform")
      )
      (draw_order float (help "order this widget will be drawn"))
      (widget_draw_type
         int
         (list
            (
               "kUIListWidgetDrawAlways"
               "kUIListWidgetDrawOnlyFocused"
               "kUIListWidgetDrawFocusedOrManual"
            )
         )
         (help "under what conditions to draw this widget")
      )
      (disabled_alpha_scale
         float
         (range 0 1)
         (help "scale for widget alpha when list is disabled")
      )
      (default_color
         object
         (class UIColor)
         (help "color applied if no state specific color is set ")
      )
      (highlight_normal_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is normal")
      )
      (highlight_focused_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is focused")
      )
      (highlight_disabled_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is disabled")
      )
      (highlight_selecting_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selecting")
      )
      (highlight_selected_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selected")
      )
      (inactive_normal_color
         object
         (class UIColor)
         (help "color when element is inactive and list is normal")
      )
      (inactive_focused_color
         object
         (class UIColor)
         (help "color when element is inactive and list is focused")
      )
      (inactive_disabled_color
         object
         (class UIColor)
         (help "color when element is inactive and list is disabled")
      )
      (inactive_selecting_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selecting")
      )
      (inactive_selected_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selected")
      )
   )
)
(UIListCustom
   (description "Custom slot for use with UIList")
   (allowed_dirs UIListDir UILabelDir)
   (superclasses)
   (types)
   (editor
      (object
         object
         (class Object)
         (help "custom object to draw/transform")
         (no_test)
      )
      (slot_draw_type
         int
         (list
            (
               "kUIListSlotDrawAlways"
               "kUIListSlotDrawHighlight"
               "kUIListSlotDrawNoHighlight"
            )
         )
         (help "when to draw the slot")
      )
      (draw_order float (help "order this widget will be drawn"))
      (widget_draw_type
         int
         (list
            (
               "kUIListWidgetDrawAlways"
               "kUIListWidgetDrawOnlyFocused"
               "kUIListWidgetDrawFocusedOrManual"
            )
         )
         (help "under what conditions to draw this widget")
      )
      (disabled_alpha_scale
         float
         (range 0 1)
         (help "scale for widget alpha when list is disabled")
      )
      (default_color
         object
         (class UIColor)
         (help "color applied if no state specific color is set ")
      )
      (active_normal_color
         object
         (class UIColor)
         (help "color when element is active and list is normal")
      )
      (active_focused_color
         object
         (class UIColor)
         (help "color when element is active and list is focused")
      )
      (active_disabled_color
         object
         (class UIColor)
         (help "color when element is active and list is disabled")
      )
      (active_selecting_color
         object
         (class UIColor)
         (help "color when element is active and list is selecting")
      )
      (active_selected_color
         object
         (class UIColor)
         (help "color when element is active and list is selected")
      )
      (highlight_normal_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is normal")
      )
      (highlight_focused_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is focused")
      )
      (highlight_disabled_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is disabled")
      )
      (highlight_selecting_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selecting")
      )
      (highlight_selected_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selected")
      )
      (inactive_normal_color
         object
         (class UIColor)
         (help "color when element is inactive and list is normal")
      )
      (inactive_focused_color
         object
         (class UIColor)
         (help "color when element is inactive and list is focused")
      )
      (inactive_disabled_color
         object
         (class UIColor)
         (help "color when element is inactive and list is disabled")
      )
      (inactive_selecting_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selecting")
      )
      (inactive_selected_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selected")
      )
   )
)
(UIListLabel
   (description "Custom slot for use with UIList")
   (allowed_dirs UIListDir UILabelDir)
   (superclasses)
   (types)
   (editor
      (label
         object
         (class UILabel)
         (help "label to draw/transform")
      )
      (slot_draw_type
         int
         (list
            (
               "kUIListSlotDrawAlways"
               "kUIListSlotDrawHighlight"
               "kUIListSlotDrawNoHighlight"
            )
         )
         (help "when to draw the slot")
      )
      (draw_order float (help "order this widget will be drawn"))
      (widget_draw_type
         int
         (list
            (
               "kUIListWidgetDrawAlways"
               "kUIListWidgetDrawOnlyFocused"
               "kUIListWidgetDrawFocusedOrManual"
            )
         )
         (help "under what conditions to draw this widget")
      )
      (disabled_alpha_scale
         float
         (range 0 1)
         (help "scale for widget alpha when list is disabled")
      )
      (default_color
         object
         (class UIColor)
         (help "color applied if no state specific color is set ")
      )
      (active_normal_color
         object
         (class UIColor)
         (help "color when element is active and list is normal")
      )
      (active_focused_color
         object
         (class UIColor)
         (help "color when element is active and list is focused")
      )
      (active_disabled_color
         object
         (class UIColor)
         (help "color when element is active and list is disabled")
      )
      (active_selecting_color
         object
         (class UIColor)
         (help "color when element is active and list is selecting")
      )
      (active_selected_color
         object
         (class UIColor)
         (help "color when element is active and list is selected")
      )
      (highlight_normal_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is normal")
      )
      (highlight_focused_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is focused")
      )
      (highlight_disabled_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is disabled")
      )
      (highlight_selecting_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selecting")
      )
      (highlight_selected_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selected")
      )
      (inactive_normal_color
         object
         (class UIColor)
         (help "color when element is inactive and list is normal")
      )
      (inactive_focused_color
         object
         (class UIColor)
         (help "color when element is inactive and list is focused")
      )
      (inactive_disabled_color
         object
         (class UIColor)
         (help "color when element is inactive and list is disabled")
      )
      (inactive_selecting_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selecting")
      )
      (inactive_selected_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selected")
      )
   )
)
(UIListMesh
   (description "Custom slot for use with UIList")
   (allowed_dirs UIListDir UILabelDir)
   (superclasses)
   (types)
   (editor
      (mesh
         object
         (class Mesh)
         (help "mesh to draw/transform")
      )
      (default_mat
         object
         (class Mat)
         (help "default material")
      )
      (slot_draw_type
         int
         (list
            (
               "kUIListSlotDrawAlways"
               "kUIListSlotDrawHighlight"
               "kUIListSlotDrawNoHighlight"
            )
         )
         (help "when to draw the slot")
      )
      (draw_order float (help "order this widget will be drawn"))
      (widget_draw_type
         int
         (list
            (
               "kUIListWidgetDrawAlways"
               "kUIListWidgetDrawOnlyFocused"
               "kUIListWidgetDrawFocusedOrManual"
            )
         )
         (help "under what conditions to draw this widget")
      )
      (disabled_alpha_scale
         float
         (range 0 1)
         (help "scale for widget alpha when list is disabled")
      )
      (default_color
         object
         (class UIColor)
         (help "color applied if no state specific color is set ")
      )
      (active_normal_color
         object
         (class UIColor)
         (help "color when element is active and list is normal")
      )
      (active_focused_color
         object
         (class UIColor)
         (help "color when element is active and list is focused")
      )
      (active_disabled_color
         object
         (class UIColor)
         (help "color when element is active and list is disabled")
      )
      (active_selecting_color
         object
         (class UIColor)
         (help "color when element is active and list is selecting")
      )
      (active_selected_color
         object
         (class UIColor)
         (help "color when element is active and list is selected")
      )
      (highlight_normal_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is normal")
      )
      (highlight_focused_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is focused")
      )
      (highlight_disabled_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is disabled")
      )
      (highlight_selecting_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selecting")
      )
      (highlight_selected_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selected")
      )
      (inactive_normal_color
         object
         (class UIColor)
         (help "color when element is inactive and list is normal")
      )
      (inactive_focused_color
         object
         (class UIColor)
         (help "color when element is inactive and list is focused")
      )
      (inactive_disabled_color
         object
         (class UIColor)
         (help "color when element is inactive and list is disabled")
      )
      (inactive_selecting_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selecting")
      )
      (inactive_selected_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selected")
      )
   )
)
(UIListSubList
   (description "Custom slot for use with UIList")
   (allowed_dirs UIListDir)
   (superclasses)
   (types)
   (editor
      (list
         object
         (class UIList)
         (help "sub list template")
      )
      (slot_draw_type
         int
         (list
            (
               "kUIListSlotDrawAlways"
               "kUIListSlotDrawHighlight"
               "kUIListSlotDrawNoHighlight"
            )
         )
         (help "when to draw the slot")
      )
      (draw_order float (help "order this widget will be drawn"))
      (widget_draw_type
         int
         (list
            (
               "kUIListWidgetDrawAlways"
               "kUIListWidgetDrawOnlyFocused"
               "kUIListWidgetDrawFocusedOrManual"
            )
         )
         (help "under what conditions to draw this widget")
      )
      (disabled_alpha_scale
         float
         (range 0 1)
         (help "scale for widget alpha when list is disabled")
      )
      (default_color
         object
         (class UIColor)
         (help "color applied if no state specific color is set ")
      )
      (active_normal_color
         object
         (class UIColor)
         (help "color when element is active and list is normal")
      )
      (active_focused_color
         object
         (class UIColor)
         (help "color when element is active and list is focused")
      )
      (active_disabled_color
         object
         (class UIColor)
         (help "color when element is active and list is disabled")
      )
      (active_selecting_color
         object
         (class UIColor)
         (help "color when element is active and list is selecting")
      )
      (active_selected_color
         object
         (class UIColor)
         (help "color when element is active and list is selected")
      )
      (highlight_normal_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is normal")
      )
      (highlight_focused_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is focused")
      )
      (highlight_disabled_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is disabled")
      )
      (highlight_selecting_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selecting")
      )
      (highlight_selected_color
         object
         (class UIColor)
         (help "color when element is highlighted and list is selected")
      )
      (inactive_normal_color
         object
         (class UIColor)
         (help "color when element is inactive and list is normal")
      )
      (inactive_focused_color
         object
         (class UIColor)
         (help "color when element is inactive and list is focused")
      )
      (inactive_disabled_color
         object
         (class UIColor)
         (help "color when element is inactive and list is disabled")
      )
      (inactive_selecting_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selecting")
      )
      (inactive_selected_color
         object
         (class UIColor)
         (help "color when element is inactive and list is selected")
      )
   )
)
(UIColor
   (description "Just a color, used by UI components")
   (ext color)
   (types)
   (editor
      (color
         color
         (help "color")
         (post_sync {milo update_objects})
      )
   )
)
(UIPicture
   (description "A picture object with asynchronously loading texture")
   (superclasses UIComponent)
   (allowed_dirs RndDir)
   (ext pic)
   (types
      (default (tex_file "image/ui_picture_keep.png"))
      (picture_albumart (tex_file "image/blank_album_art_keep.png"))
   )
   (editor
      (tex_file file (help "Path of texture to load"))
      (mesh
         object
         (class Mesh)
         (help "Mesh to show loaded tex on (should have Mat)")
      )
      (in_anim
         object
         (class Anim)
         (help "animation kicked off before texture change")
      )
      (out_anim
         object
         (class Anim)
         (help "animation kicked off after texture change")
      )
   )
)
(UIProxy
   (description
      "A UIProxy object allows artists to position dynamically

        loaded resources (e.g. a character) in Milo. The app will then load

        the appropriate resources into it."
   )
   (superclasses UIComponent)
   (allowed_dirs PanelDir)
   (init {$this set_type default})
   (editor
      (environ
         object
         (class Environ)
         (help "environment to use on it")
      )
   )
   (types (default (file "proxy.milo")))
)
(UISlider
   (description
      "A component with animatable whose frames correspond to a

        range of values. The resources don't have to look like a slider;

        they could easily be a knob, dial, etc."
   )
   (superclasses UIComponent)
   (ext sld)
   (init {$this set_type default})
   (types
      (default
         (resource_file "slider.milo")
         (vertical 0)
         (meshes
            ("slider.mesh"
               (normal "normal.mat")
               (focused "focused.mat")
               (disabled "disabled.mat")
               (selected "selected.mat")
            )
         )
      )
      (audio
         (resource_file "resource/slider_audio.milo")
         (vertical 0)
         (meshes
            ("pod.mesh"
               (normal "slider_pod_normal.mat")
               (focused "slider_pod_focused.mat")
               (disabled "slider_pod_disabled.mat")
               (selected "slider_pod_selected.mat")
            )
            ("slider.mesh"
               (normal "slider_normal.mat")
               (focused "slider_focused.mat")
               (disabled "slider_disabled.mat")
               (selected "slider_selected.mat")
            )
         )
      )
      (generic
         (resource_file "resource/slider_char_creator.milo")
         (vertical 0)
         (meshes
            ("pod.mesh"
               (normal "slider_pod_normal.mat")
               (focused "slider_pod_focused.mat")
               (disabled "slider_pod_disabled.mat")
               (selected "slider_pod_selected.mat")
            )
            ("slider.mesh"
               (normal "slider_normal.mat")
               (focused "slider_focused.mat")
               (disabled "slider_disabled.mat")
               (selected "slider_selected.mat")
            )
         )
      )
   )
   (editor
      (select_to_scroll
         bool
         (help "Does slider need to be selected before user can scroll?")
      )
   )
)
(UITrigger
   (description "Triggers anims based on UI events (enter, exit, etc.)")
   (superclasses EventTrigger)
   (allowed_dirs PanelDir)
   (ext trg)
   (types)
   (editor
      (block_transition
         bool
         (help "Block enter/exit transition during animation?")
      )
      (test_trigger
         script
         (script {$this trigger})
         (label "trigger")
         (help "Trigger the anim")
      )
   )
   (supported_events
      (ui_enter
         ui_enter_forward
         ui_enter_back
         ui_exit
         ui_exit_forward
         ui_exit_back
         transition_complete
      )
   )
)
(Screenshot
   (description
      "Object to draw a screensot in Milo, to help with positioning.

      The screenshot will not be drawn or even loaded in-game."
   )
   (superclasses Draw)
   (ext ss)
   (types)
   (editor
      (tex_path
         file
         (help
            "File containing the screenshot to display.  This file will only be loaded in Milo, not in game."
         )
      )
   )
)
(UIGuide
   (description "a guide used to line up UI elements")
   (ext guide)
   (types)
   (editor
      (type
         int
         (list ("kGuideVertical" "kGuideHorizontal"))
         (help "Horizontal or vertical guide?")
      )
      (pos
         float
         (help
            "position in proportion to screen width (if vertical) or height (if horizontal)"
         )
         (range 0 1)
      )
   )
)
(LabelShrinkWrapper
   (description "a mesh shrink wrapped to selected label")
   (ext lsw)
   (allowed_dirs PanelDir)
   (init {$this set_type default})
   (types
      (default
         (resource_file "label_shrink_wrapper.milo")
         (topleft_bone "bone_top_left.mesh")
         (topright_bone "bone_top_right.mesh")
         (bottomleft_bone "bone_bottom_left.mesh")
         (bottomright_bone "bone_bottom_right.mesh")
      )
      (main
         (resource_file "resource/label_shrink_wrapper_main.milo")
         (topleft_bone "bone_top_left.mesh")
         (topright_bone "bone_top_right.mesh")
         (bottomleft_bone "bone_bottom_left.mesh")
         (bottomright_bone "bone_bottom_right.mesh")
      )
      (main2
         (resource_file "resource/label_shrink_wrapper_main2.milo")
         (topleft_bone "bone_top_left.mesh")
         (topright_bone "bone_top_right.mesh")
         (bottomleft_bone "bone_bottom_left.mesh")
         (bottomright_bone "bone_bottom_right.mesh")
      )
   )
   (editor
      (label
         object
         (class UILabel)
         (help "label to be shrink wrapped")
      )
      (show bool (help "Should this be shown?"))
   )
)
(LabelNumberTicker
   (description
      "a ticker to control counting up or down for a given number based label"
   )
   (ext lnt)
   (allowed_dirs PanelDir)
   (types)
   (editor
      (label
         object
         (class UILabel)
         (help "label to be shrink wrapped")
      )
      (wrapper_text
         symbol
         (help "Localization token to use for wrapper (must include %s)")
      )
      (desired_value int (help "desired value"))
      (anim_time float (help "Time taken for number ticking animation"))
      (anim_delay float (help "delay before number ticking animation"))
      (acceleration
         float
         (help "Higher number accelerates faster, 3 is a good number.")
      )
      (count_up script (script {$this count_up}))
      (tick_trigger
         object
         (class EventTrigger)
         (help "Event to trigger while counting up")
      )
      (tick_every
         int
         (help "Trigger tick_trigger every time the count goes up by this much")
      )
   )
)
(TrackDir
   (description
      "Base class for track system. Contains configuration for

   track speed, length, slot positions.  Manages TrackWidget instances."
   )
   (superclasses PanelDir)
   (allowed_dirs)
   (editor
      (draw_group
         object
         (class Group)
         (help "Should contain everything to draw (except widget resources)")
      )
      (anim_group
         object
         (class Group)
         (help "Animated at rate where frame=y position of now bar")
      )
      (y_per_second
         float
         (range 1 10000)
         (help "World units widgets move per second")
      )
      (top_y float (help "Distance where widgets are pushed onto track"))
      (bottom_y float (help "Distance where widgets are pruned from track"))
      (warn_on_resort
         bool
         (help
            "WARN if widget instances are added out of order? (can be off for prototyping)"
         )
      )
      (TrackTesting
         (struct
            (widget
               object
               (class TrackWidget)
               (help "Widget to test")
            )
            (slot
               int
               (range 0 10)
               (help "Slot to add widgets in")
            )
            (add_widget
               script
               (script {$this add_test_widget [TrackTesting widget] [TrackTesting slot]})
               (help "Add a widget instance to the top of the track")
               (label "add")
            )
            (toggle_running
               script
               (script {$this toggle_running})
               (help "Toggle running the track in test mode")
               (label "toggle")
            )
         )
      )
   )
   (types)
)
(TrackWidget
   (description
      "Any object that is placed on the track and scrolls towards the

   player.  Can have any number of meshes and an environment. Drawn efficiently

   and pruned automatically by TrackDir."
   )
   (superclasses Draw Poll)
   (allowed_dirs RndDir)
   (types)
   (ext wid)
   (editor
      (widget_type
         int
         (list ("kImmediateWidget" "kMultiMeshWidget" "kTextWidget" "kMatWidget"))
         (refresh
            meshes
            allow_rotation
            base_length
            font
            text_obj
            chars_per_inst
            max_text_instances
            mat
         )
      )
      (x_offset float (help "X offset to be applied to all widget instances"))
      (y_offset float (help "Y offset to be applied to all widget instances"))
      (z_offset float (help "Z offset to be applied to all widget instances"))
      (allow_shift
         bool
         (help
            "Allow widget instances to shift their X/Z coordinates in coordination with their smasher during a keyboard lane shift"
         )
      )
      (meshes
         (array object (class Mesh))
         (help "Meshes used to draw widgets, drawn in order")
         (hide {&& {!= [widget_type] 0} {!= [widget_type] 1}})
      )
      (environ
         object
         (class Environ)
         (help "Environment used to draw widget")
      )
      (allow_rotation bool (help "Allow meshes to be rotated/scaled"))
      (base_length
         float
         (range 0.01 1000)
         (help "Length of unscaled geometry, should be 0 if no duration")
         (hide {&& {!= [widget_type] 0} {!= [widget_type] 1}})
      )
      (base_width
         float
         (range 0.01 1000)
         (help "Width of unscaled geometry, should be 0 if no scaling")
         (hide {&& {!= [widget_type] 0} {!= [widget_type] 1}})
      )
      (font
         object
         (class Font)
         (hide {!= [widget_type] 2})
      )
      (text_obj
         object
         (class Text)
         (hide {!= [widget_type] 2})
      )
      (text_alignment
         int
         (list
            (
               "kTopLeft"
               "kTopCenter"
               "kTopRight"
               "kMiddleLeft"
               "kMiddleCenter"
               "kMiddleRight"
               "kBottomLeft"
               "kBottomCenter"
               "kBottomRight"
            )
         )
         (hide {!= [widget_type] 2})
      )
      (chars_per_inst int (hide {!= [widget_type] 2}))
      (max_text_instances int (hide {!= [widget_type] 2}))
      (text_color
         color
         (hide {!= [widget_type] 2})
         (help "Primary color for text instances")
      )
      (alt_text_color
         color
         (hide {!= [widget_type] 2})
         (help "Secondary color for text instances")
      )
      (allow_line_rotation
         bool
         (hide {!= [widget_type] 2})
         (help "Individual lines can have different rotations")
      )
      (mat
         object
         (class Mat)
         (hide {!= [widget_type] 3})
      )
   )
)
(WorldInstance
   (description "Shared instance of a RndDir")
   (types)
   (ext inst)
   (superclasses RndDir)
   (editor
      (instance_file
         file
         (help "Which file we instance, only set in instances")
         (read_only 1)
         (no_test)
      )
      (shared_group
         object
         (class Group)
         (help "Pointer to shared group, if any")
         (read_only 1)
         (no_test)
      )
      (poll_master
         bool
         (help "Am I the guy that polls the shared group")
         (read_only 1)
         (no_test)
      )
   )
)
(LightHue
   (description "Represents a hue translation for LightPresets")
   (types)
   (ext hue)
   (editor
      (path
         file
         (ext "BMP file" bmp)
         (help "BMP file comparable to /system/run/world/hue.bmp")
         (post_sync
            {do
               ($start)
               ($end)
               ($frame)
               {milo get_anim_frame $start $end $frame}
               {milo set_anim_frame $start $end $frame}
            }
         )
      )
   )
)
(LightPreset
   (description
      "Represents an animated sequence of states of certain

        objects in the world. For now, we store states for Spotlight and

        Environment objects."
   )
   (superclasses Anim)
   (types
      (target_animator
         (editor
            (backlight
               object
               (class RndDir)
               (help "backlight object to animate")
            )
            (backlight_event
               symbol
               (list
                  {do
                     ($array {array (none)})
                     {if [backlight]
                        {[backlight] iterate
                           EventTrigger
                           $obj
                           {push_back $array {symbol {$obj name}}}
                        }
                     }
                     {sort $array}
                     $array
                  }
               )
               (help "event trigger to fire for this keyframe")
            )
            (target_1
               (indent
                  (target1
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base1_anim symbol (list {$this get_clip_names}))
                  (base1_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base1_speed float (help "speed multiplier"))
                  (base1_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add1_anim symbol (list {$this get_clip_names}))
                  (add1_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add1_speed float (help "speed multiplier"))
                  (add1_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_2
               (indent
                  (target2
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base2_anim symbol (list {$this get_clip_names}))
                  (base2_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base2_speed float (help "speed multiplier"))
                  (base2_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add2_anim symbol (list {$this get_clip_names}))
                  (add2_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add2_speed float (help "speed multiplier"))
                  (add2_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_3
               (indent
                  (target3
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base3_anim symbol (list {$this get_clip_names}))
                  (base3_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base3_speed float (help "speed multiplier"))
                  (base3_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add3_anim symbol (list {$this get_clip_names}))
                  (add3_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add3_speed float (help "speed multiplier"))
                  (add3_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_4
               (indent
                  (target4
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base4_anim symbol (list {$this get_clip_names}))
                  (base4_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base4_speed float (help "speed multiplier"))
                  (base4_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add4_anim symbol (list {$this get_clip_names}))
                  (add4_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add4_speed float (help "speed multiplier"))
                  (add4_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_5
               (indent
                  (target5
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base5_anim symbol (list {$this get_clip_names}))
                  (base5_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base5_speed float (help "speed multiplier"))
                  (base5_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add5_anim symbol (list {$this get_clip_names}))
                  (add5_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add5_speed float (help "speed multiplier"))
                  (add5_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_6
               (indent
                  (target6
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base6_anim symbol (list {$this get_clip_names}))
                  (base6_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base6_speed float (help "speed multiplier"))
                  (base6_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add6_anim symbol (list {$this get_clip_names}))
                  (add6_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add6_speed float (help "speed multiplier"))
                  (add6_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (test script (script {$this start_anim}))
         )
         (backlight {object})
         (backlight_event none)
         (target1 {object})
         (base1_anim still)
         (base1_amplitude 1)
         (base1_speed 1)
         (base1_phase 0)
         (add1_anim still)
         (add1_amplitude 1)
         (add1_speed 1)
         (add1_phase 0)
         (target2 {object})
         (base2_anim still)
         (base2_amplitude 1)
         (base2_speed 1)
         (base2_phase 0)
         (add2_anim still)
         (add2_amplitude 1)
         (add2_speed 1)
         (add2_phase 0)
         (target3 {object})
         (base3_anim still)
         (base3_amplitude 1)
         (base3_speed 1)
         (base3_phase 0)
         (add3_anim still)
         (add3_amplitude 1)
         (add3_speed 1)
         (add3_phase 0)
         (target4 {object})
         (base4_anim still)
         (base4_amplitude 1)
         (base4_speed 1)
         (base4_phase 0)
         (add4_anim still)
         (add4_amplitude 1)
         (add4_speed 1)
         (add4_phase 0)
         (target5 {object})
         (base5_anim still)
         (base5_amplitude 1)
         (base5_speed 1)
         (base5_phase 0)
         (add5_anim still)
         (add5_amplitude 1)
         (add5_speed 1)
         (add5_phase 0)
         (target6 {object})
         (base6_anim still)
         (base6_amplitude 1)
         (base6_speed 1)
         (base6_phase 0)
         (add6_anim still)
         (add6_amplitude 1)
         (add6_speed 1)
         (add6_phase 0)
         (get_clip_names
            {if_else [target1]
               {[target1] get_clip_names}
               (still)
            }
         )
         (enter
            {if [backlight]
               {if {!= [backlight_event] none}
                  {unless {[backlight] exists [backlight_event]}
                     {set [backlight_event] none}
                     {notify "invalid backlight event on " {$this name} ", clearing!"}
                  }
               }
            }
         )
         (start_anim
            {if {&& [backlight] {!= [backlight_event] none}}
               {[backlight] trigger [backlight_event]}
            }
            {if [target1]
               {[target1] play_anim
                  [base1_anim]
                  [base1_amplitude]
                  [base1_speed]
                  [base1_phase]
                  [add1_anim]
                  [add1_amplitude]
                  [add1_speed]
                  [add1_phase]
               }
            }
            {if [target2]
               {[target2] play_anim
                  [base2_anim]
                  [base2_amplitude]
                  [base2_speed]
                  [base2_phase]
                  [add2_anim]
                  [add2_amplitude]
                  [add2_speed]
                  [add2_phase]
               }
            }
            {if [target3]
               {[target3] play_anim
                  [base3_anim]
                  [base3_amplitude]
                  [base3_speed]
                  [base3_phase]
                  [add3_anim]
                  [add3_amplitude]
                  [add3_speed]
                  [add3_phase]
               }
            }
            {if [target4]
               {[target4] play_anim
                  [base4_anim]
                  [base4_amplitude]
                  [base4_speed]
                  [base4_phase]
                  [add4_anim]
                  [add4_amplitude]
                  [add4_speed]
                  [add4_phase]
               }
            }
            {if [target5]
               {[target5] play_anim
                  [base5_anim]
                  [base5_amplitude]
                  [base5_speed]
                  [base5_phase]
                  [add5_anim]
                  [add5_amplitude]
                  [add5_speed]
                  [add5_phase]
               }
            }
            {if [target6]
               {[target6] play_anim
                  [base6_anim]
                  [base6_amplitude]
                  [base6_speed]
                  [base6_phase]
                  [add6_anim]
                  [add6_amplitude]
                  [add6_speed]
                  [add6_phase]
               }
            }
         )
         (on_set_frame
            {if [backlight]
               {if {exists backlight_color1.env}
                  {[backlight] set color1 {backlight_color1.env get ambient_color}}
               }
               {if {exists backlight_color2.env}
                  {[backlight] set color2 {backlight_color2.env get ambient_color}}
               }
               {if {exists backlight_color3.env}
                  {[backlight] set color3 {backlight_color3.env get ambient_color}}
               }
               {[backlight] update}
            }
         )
      )
   )
   (ext pst)
   (editor
      (locked
         bool
         (refresh keyframes)
         (help "Whether the keyframes are locked (no editing allowed)")
      )
      (manual
         bool
         (refresh keyframes)
         (help "Whether this is a manual keyframe (keyframes controlled by MIDI)")
      )
      (looping bool (help "Whether this preset loops its animation"))
      (category
         symbol
         (list () (LIGHTING_CATEGORIES))
         (help "Category for preset-picking")
      )
      (keyframes
         (array
            (struct
               (description
                  string
                  (refresh keyframes)
                  (help "Description of the keyframe")
               )
               (duration
                  float
                  (help "Duration of the keyframe")
                  (read_only {$this get manual})
               )
               (fade_out float (help "Fade-out time of the keyframe"))
               (entries
                  (indent
                     (spotlight_entries
                        (array (struct (spotlight string (help "Spotlight name"))))
                        (read_only 1)
                     )
                     (spotlight_drawer_entries
                        (array
                           (struct
                              (spotlight_drawer string (help "Spotlight drawer name"))
                              (total float (help "Global intensity scale"))
                              (base_intensity float (help "Intensity of smokeless beam"))
                              (smoke_intensity float (help "Intensity from smoke"))
                              (light_influence
                                 float
                                 (help
                                    "The amount the spotlights will influence the real lighting of the world"
                                 )
                              )
                           )
                        )
                        (read_only 1)
                     )
                     (environment_entries
                        (array
                           (struct
                              (environment string (help "Environment name"))
                              (ambient_color color (help "Ambient color"))
                              (fog_enable bool (help "Fog showing?"))
                              (fog_start float (help "Intensity from smoke"))
                              (fog_end float (help "Intensity from smoke"))
                              (fog_color color (help "Intensity from smoke"))
                           )
                        )
                        (read_only 1)
                     )
                     (light_entries
                        (array
                           (struct
                              (light string (help "Light name"))
                              (position
                                 (vector
                                    (x float)
                                    (y float)
                                    (z float)
                                 )
                                 (help "Light's position")
                              )
                              (color color (help "Light's color"))
                              (range float (help "Falloff distance for point lights"))
                              (type string (help "Light type"))
                              (rotation
                                 (struct
                                    (pitch float)
                                    (roll float)
                                    (yaw float)
                                    (x_scale float)
                                    (y_scale float)
                                    (z_scale float)
                                 )
                                 (help "Light transform")
                              )
                           )
                        )
                        (read_only 1)
                     )
                  )
               )
               (LED
                  (indent
                     (LED_blue
                        int
                        (list
                           (
                              "kStageOff"
                              "kStageOn"
                              "kStageBass"
                              "kStageDrumKick"
                              "kStageDrumSnare"
                              "kStageDrumCrash"
                              "kStageGuitar"
                              "kStageVocal"
                              "kStageSweepLeft_slow"
                              "kStageSweepLeft_medium"
                              "kStageSweepLeft_fast"
                              "kStageSweepRight_slow"
                              "kStageSweepRight_medium"
                              "kStageSweepRight_fast"
                           )
                        )
                        (help "preset for this LED ring")
                     )
                     (LED_blue_pattern
                        int
                        (list
                           (
                              "kStageOne"
                              "kStageTwo"
                              "kStageFour"
                              "kStageOneOffset"
                              "kStageTwoOffset"
                              "kStageFourOffset"
                              "kStageAll"
                           )
                        )
                        (help "pattern for this LED ring")
                     )
                     (LED_green
                        int
                        (list
                           (
                              "kStageOff"
                              "kStageOn"
                              "kStageBass"
                              "kStageDrumKick"
                              "kStageDrumSnare"
                              "kStageDrumCrash"
                              "kStageGuitar"
                              "kStageVocal"
                              "kStageSweepLeft_slow"
                              "kStageSweepLeft_medium"
                              "kStageSweepLeft_fast"
                              "kStageSweepRight_slow"
                              "kStageSweepRight_medium"
                              "kStageSweepRight_fast"
                           )
                        )
                        (help "preset for this LED ring")
                     )
                     (LED_green_pattern
                        int
                        (list
                           (
                              "kStageOne"
                              "kStageTwo"
                              "kStageFour"
                              "kStageOneOffset"
                              "kStageTwoOffset"
                              "kStageFourOffset"
                              "kStageAll"
                           )
                        )
                        (help "pattern for this LED ring")
                     )
                     (LED_red
                        int
                        (list
                           (
                              "kStageOff"
                              "kStageOn"
                              "kStageBass"
                              "kStageDrumKick"
                              "kStageDrumSnare"
                              "kStageDrumCrash"
                              "kStageGuitar"
                              "kStageVocal"
                              "kStageSweepLeft_slow"
                              "kStageSweepLeft_medium"
                              "kStageSweepLeft_fast"
                              "kStageSweepRight_slow"
                              "kStageSweepRight_medium"
                              "kStageSweepRight_fast"
                           )
                        )
                        (help "preset for this LED ring")
                     )
                     (LED_red_pattern
                        int
                        (list
                           (
                              "kStageOne"
                              "kStageTwo"
                              "kStageFour"
                              "kStageOneOffset"
                              "kStageTwoOffset"
                              "kStageFourOffset"
                              "kStageAll"
                           )
                        )
                        (help "pattern for this LED ring")
                     )
                     (LED_yellow
                        int
                        (list
                           (
                              "kStageOff"
                              "kStageOn"
                              "kStageBass"
                              "kStageDrumKick"
                              "kStageDrumSnare"
                              "kStageDrumCrash"
                              "kStageGuitar"
                              "kStageVocal"
                              "kStageSweepLeft_slow"
                              "kStageSweepLeft_medium"
                              "kStageSweepLeft_fast"
                              "kStageSweepRight_slow"
                              "kStageSweepRight_medium"
                              "kStageSweepRight_fast"
                           )
                        )
                        (help "preset for this LED ring")
                     )
                     (LED_yellow_pattern
                        int
                        (list
                           (
                              "kStageOne"
                              "kStageTwo"
                              "kStageFour"
                              "kStageOneOffset"
                              "kStageTwoOffset"
                              "kStageFourOffset"
                              "kStageAll"
                           )
                        )
                        (help "pattern for this LED ring")
                     )
                     (strobe_setting
                        int
                        (list
                           (
                              "kStageStrobeOff"
                              "kStageStrobe6"
                              "kStageStrobe8"
                              "kStageStrobe10"
                              "kStageStrobe12"
                           )
                        )
                        (help "strobe setting to use")
                     )
                  )
               )
               ('Set Keyframe'
                  script
                  (read_only {$this get locked})
                  (label "SET")
                  (script
                     {if {exists milo}
                        {milo record $this 'Set Keyframe'}
                     }
                     {$this set_keyframe {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                  )
                  (refresh keyframes)
                  (help "Sets the keyframe to the current state of the scene")
               )
               ('View Keyframe'
                  script
                  (label "VIEW")
                  (script
                     {$this view_keyframe {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     {if {exists milo}
                        {milo update_objects}
                        {milo invalidate_listers_and_trees}
                     }
                  )
                  (help "Sets the scene to this keyframe")
               )
               (video_venue_postproc
                  object
                  (class PostProc)
                  (help "postproc used in video venues")
               )
               (triggers
                  (array
                     object
                     (class EventTrigger)
                     (obj_flags no_null)
                  )
                  (help "Trigger to fire when keyframe starts blending")
               )
            )
            (header [keyframes {elem $milo_prop_path 1} description])
         )
      )
      (select_triggers
         (array
            object
            (class EventTrigger)
            (obj_flags no_null)
         )
         (help "Triggers to fire upon selection")
      )
      (legacy_fade_in
         float
         (read_only 1)
         (help "How long this preset should fade in from the previous one")
      )
      (platform_only
         int
         (list ("kPlatformNone" "kPlatformPS3" "kPlatformXbox"))
         (help "Limit this shot to given platform")
      )
   )
   (init {$this set category verse})
   (views
      (flags
         ("category" [category])
         ("looping" [looping])
         ("manual" [manual])
         ("platform_only" [platform_only])
      )
   )
)
(EventAnim
   (description "Triggers events on proxy's along a timeline")
   (allowed_dirs RndDir)
   (ext eventanm)
   (superclasses Anim)
   (types)
   (editor
      (start
         (array
            (struct
               (dir object (class RndDir))
               (event
                  object
                  (class EventTrigger)
                  (dir
                     {do
                        ($path {array $milo_prop_path})
                        {set_elem $path {- {size $path} 1} dir}
                        {print "path array is " $path "
"}
                        {$this get $path}
                     }
                  )
               )
            )
         )
         (help "Triggers played first, during StartAnim")
      )
      (end
         (array
            (struct
               (dir object (class RndDir))
               (event
                  object
                  (class EventTrigger)
                  (dir
                     {do
                        ($path {array $milo_prop_path})
                        {set_elem $path {- {size $path} 1} dir}
                        {print "path array is " $path "
"}
                        {$this get $path}
                     }
                  )
               )
            )
         )
         (help "Triggers played when done, during EndAnim")
      )
      (keys
         (array
            (struct
               (time
                  float
                  (help "time for event")
                  (refresh keys)
               )
               (events
                  (array
                     (struct
                        (dir object (class RndDir))
                        (event
                           object
                           (class EventTrigger)
                           (dir
                              {do
                                 ($path {array $milo_prop_path})
                                 {set_elem $path {- {size $path} 1} dir}
                                 {print "path array is " $path "
"}
                                 {$this get $path}
                              }
                           )
                        )
                     )
                  )
               )
            )
         )
         (help
            "Triggers played during a particular keyframe.  Do not set key to zero, hoping it will always get fired on start, put them in start instead."
         )
      )
      (reset_on_end
         bool
         (help
            "Resets all start + keys events when done, during EndAnim, normally should be checked"
         )
      )
   )
)
(WorldDir
   (description "A WorldDir contains world objects.")
   (superclasses PanelDir)
   (allowed_dirs)
   (types
      (world
         (venue arena_01)
         (song)
         (editor
            (venue
               symbol
               (list
                  {file_list
                     "world/venue/*/*/*.milo"
                     1
                     $path
                     {do
                        ($v {file_get_base $path})
                        {has_substr
                           $path
                           {sprint $v "/" $v ".milo"}
                        }
                     }
                  }
               )
               (help "Venue to load, set before hitting load_song")
            )
            (song
               symbol
               (list
                  {if_else {exists fake_songmgr}
                     {fake_songmgr get_song_list}
                     ()
                  }
               )
               (inline_script
                  "load"
                  (script
                     {$this load_and_play_song}
                     {if {exists song.anim}
                        {milo edit song.anim "PropAnim Keys"}
                     }
                     {if $bandwardrobe
                        {$bandwardrobe set shot_set_play_mode 0}
                     }
                  )
               )
               (help "choose a song to preview")
            )
            (edit_song_anim
               script
               (script
                  {if_else {exists song.anim}
                     {milo edit song.anim "PropAnim Keys"}
                     {notify "Could not edit song.anim, no song loaded"}
                  }
               )
               (help "Pop open the song.anim editor")
            )
            (change_play_mode
               script
               (script
                  {if_else $bandwardrobe
                     {milo edit $bandwardrobe BandWardrobe}
                     {notify "Can not change play_mode, no song loaded"}
                  }
               )
               (help "Change the play_mode by editing bandwardrobe")
            )
            (reload_dircuts
               script
               (script
                  {if_else $bandwardrobe
                     {$bandwardrobe set play_mode {$bandwardrobe get play_mode}}
                     {notify "Could not edit bandwardobe, no venue loaded"}
                  }
               )
               (help "Reloads all the directed cuts so you can preview them properly")
            )
            (save_song
               script
               (script {$banddirector save_song})
               (help "Save the song authoring back into its song file!")
            )
            (copy_to_bg
               script
               (script
                  {if_else $banddirector
                     {$banddirector copy_cats coop_bg}
                     {notify "Can not copy to bg, no song loaded"}
                  }
               )
               (help
                  "Copies shot_5 track to shot_bg track, remapping invalid shot categories"
               )
            )
            (copy_to_bk
               script
               (script
                  {if_else $banddirector
                     {$banddirector copy_cats coop_bk}
                     {notify "Can not copy to bg, no song loaded"}
                  }
               )
               (help
                  "Copies shot_5 track to shot_bk track, remapping invalid shot categories"
               )
            )
            (copy_to_gk
               script
               (script
                  {if_else $banddirector
                     {$banddirector copy_cats coop_gk}
                     {notify "Can not copy to bg, no song loaded"}
                  }
               )
               (help
                  "Copies shot_5 track to shot_gk track, remapping invalid shot categories"
               )
            )
            (toggle_camera_overlay
               script
               (script {rnd toggle_overlay camera})
               (help "toggle the camera overlay, just like in game")
            )
         )
         (load_and_play_song
            {$banddirector load_venue [venue]}
            {$banddirector load_song
               {fake_songmgr get_path [song] ".milo"}
               {fake_songmgr get_data [song] genre}
               {fake_songmgr get_data [song] anim_tempo}
               {fake_songmgr get_data [song] vocal_gender}
               1
            }
            {do
               ($song_obj {milo song_object})
               {if $song_obj
                  {$song_obj set song [song]}
                  {milo set anim {milo song_object}}
               }
            }
            {{{$banddirector get merger} dir} enter}
         )
         (on_milo_loaded {milo edit $this "Object Type"})
         (coda_success {handle ($this bre_success)})
         (enter
            {stagekit_reset}
            {set $stagekit 1}
            {if {exists game}
               {game add_sink $world () 3}
            }
            {if $banddirector
               {if $edit_mode
                  {$banddirector set world_event start}
               }
               {$banddirector set world_event start}
            }
         )
         (exit
            {stagekit_reset}
            {set $stagekit 0}
            {if {exists game}
               {game remove_sink $this}
            }
         )
         (intro_start kDataUnhandled)
         (intro_end kDataUnhandled)
         (intro_skip {handle (game intro_end)} kDataUnhandled)
         :
         The
         game
         is
         over,
         ignore
         parsers.
         (game_over {$this delete_free_cam} kDataUnhandled)
         (autosave 0)
         (select_camera
            {if $banddirector
               {handle ($banddirector select_camera)}
            }
         )
         (sync_objects
            {if {exists session_mgr}
               {$this camera_random_seed {session_mgr get_net_random_seed}}
            }
         )
         (post_tool_sync {$this enter})
      )
      (venue
         (editor
            ('start crowd'
               script
               (help "Animates the crowd")
               (script
                  {$this iterate
                     WorldCrowd
                     $crowd
                     {$crowd iterate_frac
                        (1
                           {main.drv play_group
                              great
                              {| 2 48 512}
                           }
                        )
                     }
                  }
               )
            )
            ('stop crowd'
               script
               (help "Stops the crowd")
               (script
                  {$this iterate
                     WorldCrowd
                     $crowd
                     {$crowd iterate_frac (1 {main.drv enter})}
                  }
               )
            )
            (band_logo_mats
               (array object (class Mat))
               (help "materials to dynamically apply the band logo to")
            )
            (band_name_labels
               (array object (class UILabel))
               (help "labels to dynamically apply the band name to")
            )
         )
         (first_shot_ok
            ($cat)
            {if $banddirector
               {set $shot_ok.delta_30fps {$banddirector first_shot_ok $cat}}
            }
         )
         VENUE_SETUP_CHARACTERS
         WORLD_OBJECT_VALIDATE
         (setup_midi_parsers
            {foreach $parser WORLD_MIDI_PARSERS
               {handle
                  ({elem $parser 0}
                     add_sink
                     $this
                     ()
                     {elem $parser 1}
                  )
               }
            }
         )
         (remove_midi_parsers
            {foreach $parser WORLD_MIDI_PARSERS
               {handle ({elem $parser 0} remove_sink $this)}
            }
         )
         (enter
            VENUE_SETUP_CHARACTERS_ENTER
            {$this hookup_bandlogo}
            {$this hookup_bandname}
         )
         (hookup_bandlogo
            {if {&& {exists game} {profile_mgr get_primary_profile}}
               {set $theLogoTex {{profile_mgr get_primary_profile} get_band_logo_tex}}
               {if $theLogoTex
                  {foreach_int $i 0 {$this size (band_logo_mats)}
                     {set $logoMat {$this get (band_logo_mats $i)}}
                     {if $logoMat
                        {$logoMat set diffuse_tex $theLogoTex}
                     }
                  }
               }
            }
         )
         (hookup_bandname
            {if {&& {exists game} {profile_mgr has_primary_profile}}
               {do
                  ($primaryProfile {profile_mgr get_primary_profile})
                  ($primaryProfileUser {$primaryProfile get_associated_user})
                  {foreach_int $i 0 {$this size (band_name_labels)}
                     {set $bandNameLabel {$this get (band_name_labels $i)}}
                     {if $bandNameLabel
                        {$bandNameLabel set_band_name $primaryProfileUser}
                     }
                  }
               }
            }
         )
         (band_logo_mats ())
         (band_name_labels ())
      )
      (shell
         (postprocess)
         (update_postproc
            {if $edit_mode
               {if_else [postprocess]
                  {[postprocess] select}
                  {rnd reset_postproc}
               }
            }
         )
         (editor
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use when this panel is on screen")
               (post_sync {$this update_postproc})
            )
            (refresh_postproc
               script
               (script {$this update_postproc})
               (help "Refresh postprocessor selection on the tool")
            )
         )
      )
      (facetest
         (editor)
         (enter
            {do
               ($song
                  {if_else $tool_song
                     {$tool_song song_name}
                     ""
                  }
               )
               {if_else $song
                  {do
                     ($lip {$this find "lipsync_dir"})
                     {$lip set
                        proxy_file
                        {sprint "songs/" $song "/lipsync.milo"}
                     }
                     {foreach $name (song part2 part3 part4)
                        {do
                           ($lipsync "")
                           {set $lipsync {$lip find {sprint $name ".lipsync"}}}
                           {{{object $name} find song.lipdrv} set lipsync $lipsync}
                           {set $singalong {{object $name} find singalong.weight}}
                           {$singalong set weight 1.00}
                        }
                     }
                  }
                  {notify "To preview lipsync: pick a song to preview in the Anim bar"}
               }
            }
         )
      )
      (closet
         (enter
            {if $bandwardrobe
               {$bandwardrobe enter_closet
                  $this
                  {if_else {exists closet_mgr}
                     {closet_mgr get_user_slot}
                     0
                  }
               }
            }
            {$this hookup_bandlogo}
            {$this hookup_bandname}
         )
         (hookup_bandlogo
            {if {&& {exists game} {profile_mgr get_primary_profile}}
               {set $theLogoTex {{profile_mgr get_primary_profile} get_band_logo_tex}}
               {if $theLogoTex
                  {foreach_int $i 0 {$this size (band_logo_mats)}
                     {set $logoMat {$this get (band_logo_mats $i)}}
                     {if $logoMat
                        {$logoMat set diffuse_tex $theLogoTex}
                     }
                  }
               }
            }
         )
         (hookup_bandname
            {if {&& {exists game} {profile_mgr has_primary_profile}}
               {do
                  ($primaryProfile {profile_mgr get_primary_profile})
                  ($primaryProfileUser {$primaryProfile get_associated_user})
                  {foreach_int $i 0 {$this size (band_name_labels)}
                     {set $bandNameLabel {$this get (band_name_labels $i)}}
                     {if $bandNameLabel
                        {$bandNameLabel set_band_name $primaryProfileUser}
                     }
                  }
               }
            }
         )
         (editor
            (band_logo_mats
               (array object (class Mat))
               (help "materials to dynamically apply the band logo to")
            )
            (band_name_labels
               (array object (class UILabel))
               (help "labels to dynamically apply the band name to")
            )
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use when this panel is on screen")
               (post_sync {$this update_postproc})
            )
            (refresh_postproc
               script
               (script {$this update_postproc})
               (help "Refresh postprocessor selection on the tool")
            )
         )
         (postprocess)
         (update_postproc
            {if $edit_mode
               {if_else [postprocess]
                  {[postprocess] select}
                  {rnd reset_postproc}
               }
            }
         )
         (band_logo_mats ())
         (band_name_labels ())
      )
      (vignette_shell
         (scene0)
         (postprocess {object})
         (editor
            (simulate
               script
               (script
                  {set $world_simulate 1}
                  {set $world_simulate_loop 0}
                  {$this enter}
               )
               (help
                  "simulate the world or not, remember to set Milo camera view to world.cam to see it properly"
               )
            )
            (unsimulate
               script
               (script
                  {set $world_simulate 0}
                  {set $world_simulate_loop 0}
                  {$this enter}
               )
               (help "simulate the world or not")
            )
            (scene0
               object
               (class WorldDir)
               (help "the vignette scene to loop")
            )
            (trigger_outro
               script
               (script
                  {if_else $world_simulate
                     {$this vignette_outro}
                     {notify
                        "you can only trigger an outro while simulating vignette, so hit the 'simulate' button above"
                     }
                  }
               )
               (help "trigger the outro camshot if this vignette has one")
            )
            (edit_lipsync
               script
               (script
                  {do
                     ($clips {find_obj [scene0] clips})
                     {if_else $clips
                        {milo edit $clips "Object List"}
                        {notify "No clips to edit"}
                     }
                  }
               )
               (help "pop open directory with lipsync objects")
            )
            (save_and_preview_lipsync
               script
               (script
                  {if_else [scene0]
                     {[scene0] preview_lipsync 1}
                     {notify "No scene to preview!"}
                  }
               )
               (help "save and preview lipsync PropAnim changes")
            )
         )
         (on_milo_loaded
            {milo edit $this "Object Type"}
            {set $world_simulate 0}
            {milo tool_script_string "{set $world_simulate 0}"}
            {set $world_simulate_loop 0}
            {milo tool_script_string "{set $world_simulate_loop 0}"}
         )
         (enter
            {if {exists game}
               {set $world_simulate 1}
            }
            {if_else $world_simulate
               {do
                  {if_else {exists world.cam}
                     {set [cam] world.cam}
                     {notify "can not find world.cam!"}
                  }
                  {set $in_vignette_outro 0}
                  {if {== $this $world}
                     {$this kick_scene}
                  }
               }
               {do
                  {if [scene0]
                     {[scene0] set showing 0}
                  }
               }
            }
            {if {exists meta_performer}
               {profile_mgr add_sink $this (primary_profile_changed_msg)}
            }
         )
         (exit
            {handle ([scene0] vignette_end)}
            {if {exists meta_performer}
               {profile_mgr remove_sink $this primary_profile_changed_msg}
            }
         )
         (vignette_outro
            {if [scene0]
               {set $cam {[scene0] find_shot vignette_outro}}
               {if_else $cam
                  {do
                     {set $in_vignette_outro 1}
                     {handle_type ([scene0] force_camera $this)}
                  }
                  {handle_type ($this send_outro_finished_msg)}
               }
            }
         )
         (send_outro_finished_msg
            {if_else {exists game}
               {{$this get owner_panel} vignette_outro_done}
               {do
                  {set $in_vignette_outro 0}
                  {set $world_simulate 0}
                  {$this enter}
               }
            }
         )
         (primary_profile_changed_msg
            {handle ([scene0] hookup_bandlogo)}
            {handle ([scene0] hookup_bandname)}
         )
         (kick_scene
            {if [scene0]
               {[scene0] set showing 1}
               {$bandwardrobe enter_vignette [scene0]}
               {handle ([scene0] vignette_start)}
               {handle_type ($this next_camera)}
            }
         )
         (next_camera
            {if_else $in_vignette_outro
               {handle_type ($this send_outro_finished_msg)}
               {handle_type ([scene0] force_camera $this)}
            }
         )
      )
      (vignette_transition
         (trans0)
         (trans1)
         (trans2)
         (trans3)
         (trans4)
         (trans5)
         (trans6)
         (trans7)
         (trans8)
         (trans9)
         (trans10)
         (trans11)
         (trans12)
         (trans13)
         (trans14)
         (trans15)
         (trans16)
         (trans17)
         (trans18)
         (trans19)
         (trans_index -1)
         (new_index 0)
         (postprocess {object})
         (editor
            (simulate_and_loop
               script
               (script
                  {set $world_simulate 1}
                  {set $world_simulate_loop 1}
                  {$this enter}
               )
               (help
                  "for previewing only, this will loop the transition over and over..."
               )
            )
            (simulate
               script
               (script
                  {set $world_simulate 1}
                  {set $world_simulate_loop 0}
                  {$this enter}
               )
               (help
                  "simulate the world or not, remember to set Milo camera view to world.cam to see it properly"
               )
            )
            (unsimulate
               script
               (script
                  {set $world_simulate 0}
                  {set $world_simulate_loop 0}
                  {$this enter}
               )
               (help "simulate the world or not")
            )
            (create_triggers
               script
               (script
                  {unless {exists "vignette_start.trig"}
                     {set $startTrig {new EventTrigger}}
                     {$startTrig set_name "vignette_start.trig" $this}
                     {$startTrig insert (trigger_events 0) vignette_seq_start}
                  }
                  {unless {exists "vignette_end.trig"}
                     {set $startTrig {new EventTrigger}}
                     {$startTrig set_name "vignette_end.trig" $this}
                     {$startTrig insert (trigger_events 0) vignette_seq_end}
                     {$startTrig insert (triggers_to_reset 0) vignette_start.trig}
                  }
                  {milo invalidate_listers_and_trees}
                  {milo update_objects}
               )
               (help "This button creates start and end triggers for this vignette")
            )
            (share_textures
               script
               (script {$this update_shared_textures})
               (help
                  "consolidates shared textures in all scenes into a common subdir.  You may run this multiple times if changes to your scenes have been made"
               )
            )
            (trans0
               object
               (class WorldDir)
               (help "transition 0")
            )
            (trans1
               object
               (class WorldDir)
               (help "transition 1")
            )
            (trans2
               object
               (class WorldDir)
               (help "transition 2")
            )
            (trans3
               object
               (class WorldDir)
               (help "transition 3")
            )
            (trans4
               object
               (class WorldDir)
               (help "transition 4")
            )
            (trans5
               object
               (class WorldDir)
               (help "transition 5")
            )
            (trans6
               object
               (class WorldDir)
               (help "transition 6")
            )
            (trans7
               object
               (class WorldDir)
               (help "transition 7")
            )
            (trans8
               object
               (class WorldDir)
               (help "transition 8")
            )
            (trans9
               object
               (class WorldDir)
               (help "transition 9")
            )
            (trans10
               object
               (class WorldDir)
               (help "transition 10")
            )
            (trans11
               object
               (class WorldDir)
               (help "transition 11")
            )
            (trans12
               object
               (class WorldDir)
               (help "transition 12")
            )
            (trans13
               object
               (class WorldDir)
               (help "transition 13")
            )
            (trans14
               object
               (class WorldDir)
               (help "transition 14")
            )
            (trans15
               object
               (class WorldDir)
               (help "transition 15")
            )
            (trans16
               object
               (class WorldDir)
               (help "transition 16")
            )
            (trans17
               object
               (class WorldDir)
               (help "transition 17")
            )
            (trans18
               object
               (class WorldDir)
               (help "transition 18")
            )
            (trans19
               object
               (class WorldDir)
               (help "transition 19")
            )
            (trans_index int (help "which one I'm on right now"))
            (new_index
               bool
               (help "is a new trans_index spooled up")
               (read_only 1)
            )
         )
         (on_milo_loaded
            {milo edit $this "Object Type"}
            {set $world_simulate 0}
            {milo tool_script_string "{set $world_simulate 0}"}
            {set $world_simulate_loop 0}
            {milo tool_script_string "{set $world_simulate_loop 0}"}
         )
         (update_shared_textures
            {set $inputFiles {array 0}}
            {foreach_int $i 0 20
               {set $propName {symbol {sprint "trans" $i}}}
               {unless {== [$propName] }
                  {set $newInputPath {[$propName] get_path_name}}
                  {if {has_substr $newInputPath "_ao."}
                     {search_replace $newInputPath "_ao." "." $newInputPath}
                  }
                  {push_back $inputFiles $newInputPath}
               }
            }
            {print "we have " {size $inputFiles} " input files
"}
            {set $path {$this get_path_name}}
            {set $baseName {file_get_base $path}}
            {set $subdirPath ""}
            {if {has_substr $path "_"}
               {set $subdirPath {file_get_path $path}}
               {set $subdirPath
                  {sprint
                     $subdirPath
                     "/"
                     {substr $baseName 0 {find_substr $baseName "_"}}
                     "/"
                     {substr $baseName {+ {find_substr $baseName "_"} 1} {strlen $baseName}}
                     "/shared_textures.milo"
                  }
               }
               {print "found subdir path: " $subdirPath "
"}
            }
            {set $error 0}
            {if {== {strlen $subdirPath} 0}
               {notify
                  "Error figuring out path to common texture subdir.  please tell a programmer!"
               }
               {set $error 1}
            }
            {if {< {size $inputFiles} 2}
               {notify
                  "You must have at least 2 scenes in this transition to use the texture sharing tool!"
               }
               {set $error 1}
            }
            {unless $error
               {milo find_and_share_textures $inputFiles $subdirPath}
            }
         )
         (enter
            {if {exists game}
               {set $world_simulate 1}
            }
            {if $world_simulate
               {if_else {exists world.cam}
                  {set [cam] world.cam}
                  {notify "can not find world.cam!"}
               }
            }
            {$this do_transition
               {if_else {&& {== $this $world} $world_simulate}
                  0
                  -1
               }
            }
         )
         (get_trans
            ($which)
            {if_else {&& {<= $which 19} {>= $which 0}}
               {do
                  ($prop {symbol {sprint "trans" $which}})
                  [$prop]
               }
               {object}
            }
         )
         (next_camera
            {do
               ($which {+ [trans_index] 1})
               ($trans {$this get_trans $which})
               ($last_trans {$this get_trans {- $which 1}})
               {handle ($last_trans vignette_end)}
               {if_else $trans
                  {$this do_transition $which}
                  {do
                     {handle ($this vignette_seq_end)}
                     {if_else {exists game}
                        {ui transition_camshot_done}
                        {do
                           {set [trans_index] -1}
                           {unless $world_simulate_loop
                              {set $world_simulate 0}
                           }
                           {$this enter}
                        }
                     }
                  }
               }
            }
         )
         (select_camera
            {if [new_index]
               {set [new_index] 0}
               {do
                  ($which [trans_index])
                  ($scene {$this get_trans $which})
                  {foreach_int $i 0 20
                     {do
                        ($trans {$this get_trans $i})
                        {if $trans
                           {$trans set_showing 0}
                        }
                     }
                  }
                  {if $scene
                     {$bandwardrobe enter_vignette $scene}
                     {handle ($scene vignette_start)}
                     {if {== $which 0}
                        {handle ($this vignette_seq_start)}
                     }
                     {handle_type ($scene force_camera $this)}
                  }
               }
            }
         )
         (do_transition
            ($which)
            {set [trans_index] $which}
            {set [new_index] 1}
         )
      )
      (vignette_scene
         (on_milo_loaded
            {milo edit $this "Object Type"}
            {set $world_simulate 0}
            {milo tool_script_string "{set $world_simulate 0}"}
            {set $world_simulate_loop 0}
            {milo tool_script_string "{set $world_simulate_loop 0}"}
         )
         (validate
            {unless {find_obj $this player_hints.obj}
               {notify
                  {path_name $this}
                  "vignette_scene needs player_hints set, use the set_player_hints button"
               }
            }
         )
         (hookup_bandlogo
            {if {&& {exists game} {profile_mgr get_primary_profile}}
               {set $theLogoTex {{profile_mgr get_primary_profile} get_band_logo_tex}}
               {if $theLogoTex
                  {foreach_int $i 0 {$this size (band_logo_mats)}
                     {set $logoMat {$this get (band_logo_mats $i)}}
                     {if $logoMat
                        {$logoMat set diffuse_tex $theLogoTex}
                     }
                  }
               }
            }
         )
         (hookup_bandname
            {if {&& {exists game} {profile_mgr has_primary_profile}}
               {do
                  ($primaryProfile {profile_mgr get_primary_profile})
                  ($primaryProfileUser {$primaryProfile get_associated_user})
                  {foreach_int $i 0 {$this size (band_name_labels)}
                     {set $bandNameLabel {$this get (band_name_labels $i)}}
                     {if $bandNameLabel
                        {$bandNameLabel set_band_name $primaryProfileUser}
                     }
                  }
               }
            }
         )
         (vignette_start
            {set [cam] world.cam}
            {$this set_showing 1}
            {set $firstVignetteCam 1}
            {$this hookup_bandlogo}
            {$this hookup_bandname}
            kDataUnhandled
         )
         (force_camera
            ($wrld)
            {do
               ($cam)
               {if_else $in_vignette_outro
                  {set $cam {$this find_shot vignette_outro}}
                  {do
                     {if $firstVignetteCam
                        {set $cam {$this find_shot vignette_intro}}
                        {set $firstVignetteCam 0}
                     }
                  }
               }
               {unless $cam
                  {set $cam {$this find_shot vignette}}
               }
               {if_else $cam
                  {do
                     {if {find_elem (vignette_transition vignette_shell) {$wrld get_type}}
                        {$cam set looping 0}
                     }
                     {$wrld force_shot $cam}
                  }
                  {notify {path_name $this} " scene could not find camshot!
"}
               }
            }
         )
         (enter
            {unless {$this is_proxy}
               {if_else $bandwardrobe
                  {$bandwardrobe enter_vignette $this}
                  {notify {path_name $this} " does not subdir vignette_chars, it must!"}
               }
               {if_else $world_simulate
                  {do
                     {handle ($this vignette_start)}
                     {handle_type ($this force_camera $this)}
                  }
                  {handle ($this vignette_end)}
               }
            }
         )
         (exit)
         (add_shot_target
            ($shot $char $grp)
            {if {&& {exists $char} $grp}
               {set $foundIdx -1}
               {foreach_int $i 0 {$shot size (targets)}
                  {if {== {$shot get (targets $i target)} $char}
                     {set $foundIdx $i}
                  }
               }
               {if {== $foundIdx -1}
                  {$shot insert (targets 0) ()}
                  {$shot set (targets 0 target) $char}
                  {$shot set
                     (targets 0 to pitch)
                     0.00
                  }
                  {$shot set
                     (targets 0 to roll)
                     0.00
                  }
                  {$shot set
                     (targets 0 to yaw)
                     0.00
                  }
                  {$shot set
                     (targets 0 to x_scale)
                     1.00
                  }
                  {$shot set
                     (targets 0 to y_scale)
                     1.00
                  }
                  {$shot set
                     (targets 0 to z_scale)
                     1.00
                  }
                  {$shot set
                     (targets 0 to x)
                     0.00
                  }
                  {$shot set
                     (targets 0 to y)
                     0.00
                  }
                  {$shot set
                     (targets 0 to z)
                     0.00
                  }
                  {$shot set (targets 0 teleport) 1}
                  {$shot set (targets 0 teleport) 1}
                  {$shot set (targets 0 anim_group) {$grp name}}
               }
            }
         )
         (auto_setup_vignette
            {do
               ($shot "")
               {if_else
                  {||
                     {== {$this get_path_name} ""}
                     {has_substr {$this get_path_name} "_ao.milo"}
                  }
                  {do
                     {if_else {has_substr {$this get_path_name} "_ao.milo"}
                        {notify
                           "Don't run setup_vignette on _ao files! Please go to the non-AO file for this..."
                        }
                        {notify
                           "This is a new file - please save it and reload in milo before running this!"
                        }
                     }
                  }
                  {do
                     {unless {exists player0}
                        {$this insert (subdirs 0) "world/shared/vignette_chars.milo"}
                     }
                     {foreach_int $i 0 {$this size (subdirs)}
                        {if {== {$this get (subdirs $i)} "world/shared/chars.milo"}
                           {$this remove (subdirs $i)}
                           {$this insert (subdirs $i) "world/shared/vignette_chars.milo"}
                           {notify
                              "replaced subdir 'world/shared/chars.milo' with 'world/shared/vignette_chars.milo'.
Please save and reload this file!"
                           }
                        }
                     }
                     {set $clipsPath
                        {sprint
                           {file_get_path {$this get_path_name}}
                           "/"
                           {file_get_base {$this get_path_name}}
                           "_clips.milo"
                        }
                     }
                     {unless {exists clips}
                        {if_else {file_exists $clipsPath}
                           {do
                              {set $clipsDir {new CharClipSet}}
                              {$clipsDir set_name "clips" $this}
                              {$clipsDir set proxy_file $clipsPath}
                              {milo invalidate_listers_and_trees}
                              {milo update_objects}
                           }
                           {do
                              {set $newDir {new CharClipSet}}
                              {$newDir set_name "clips" $this}
                              {$newDir perforce_save $clipsPath}
                              {print "creating new clipset in P4: " $clipsPath "
"}
                              {$newDir set proxy_file $clipsPath}
                              {milo invalidate_listers_and_trees}
                              {milo update_objects}
                           }
                        }
                     }
                     {set $shot ""}
                     {set $num_shots 0}
                     {$this iterate_self
                        BandCamShot
                        $s
                        {set $shot $s}
                        {set $num_shots {+ $num_shots 1}}
                     }
                     {if {== $shot ""}
                        {set $shot {new BandCamShot}}
                        {$shot set_name "BandCamShot.shot" $this}
                        {$shot set category "vignette"}
                        {$shot insert (keyframes 0) ()}
                        {$shot set (keyframes 0 duration) 80.00}
                        {milo invalidate_listers_and_trees}
                        {milo update_objects}
                     }
                     {set $spotDrawer ""}
                     {$this iterate_self SpotlightDrawer $d {set $spotDrawer $d}}
                     {unless {== $spotDrawer ""}
                        {set [spotlight_drawer] $spotDrawer}
                     }
                     {set $windObj ""}
                     {$this iterate_self Wind $w {set $windObj $w}}
                     {if {== $windObj ""}
                        {set $windObj {new Wind}}
                        {$windObj set_name "Wind.wind" $this}
                     }
                     {set $postProc ""}
                     {$this iterate_self PostProc $p {set $postProc $p}}
                     {$this iterate_self
                        BandCamShot
                        $shot
                        {$shot set_type band3}
                        {if_else {== {$shot size (next_shots)} 0}
                           {$shot set anims_during_nextshots 0}
                           {$shot set anims_during_nextshots 1}
                        }
                        {if {&& {exists clips} {== {$shot size (keyframes)} 1}}
                           {set $clipLength 80}
                           {clips iterate_self
                              CharClip
                              $clip
                              {set $clipLength {$clip get length_beats}}
                           }
                           {$shot set (keyframes 0 duration) {- $clipLength 1}}
                        }
                        {unless {== $postProc ""}
                           {$shot set postprocess $postProc}
                        }
                        {foreach_int $i 0 4
                           {set $playerName {symbol {sprint "player" $i}}}
                           {set $clipGrp
                              {find_obj $this clips $playerName}
                           }
                           {if_else $clipGrp
                              {do
                                 {set $foundIdx -1}
                                 {foreach_int $i 0 {$shot size (hide_list)}
                                    {if {== {{$shot get (hide_list $i)} name} $playerName}
                                       {set $foundIdx $i}
                                    }
                                 }
                                 {unless {== $foundIdx -1}
                                    {$shot remove (hide_list $foundIdx)}
                                 }
                                 {$this add_shot_target $shot $playerName $clipGrp}
                              }
                              {do
                                 {set $foundIdx -1}
                                 {foreach_int $i 0 {$shot size (targets)}
                                    {if {== {$shot get (targets $i target)} $playerName}
                                       {set $foundIdx $i}
                                       {$shot set (targets $foundIdx hide) 1}
                                    }
                                 }
                                 {if {== $foundIdx -1}
                                    {$shot insert (targets 0) ()}
                                    {$shot set (targets 0 target) $playerName}
                                    {$shot set (targets 0 hide) 1}
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         )
         (preview_lipsync
            ($save)
            {if {exists clips}
               {$bandwardrobe enter_vignette $this}
               {if $save
                  {clips perforce_resave}
               }
            }
         )
         (editor
            (simulate
               script
               (script
                  {set $world_simulate 1}
                  {set $world_simulate_loop 0}
                  {$this enter}
               )
               (help
                  "simulate the world or not, remember to set Milo camera view to world.cam to see it properly"
               )
            )
            (unsimulate
               script
               (script
                  {set $world_simulate 0}
                  {set $world_simulate_loop 0}
                  {$this enter}
               )
               (help "simulate the world or not")
            )
            (create_triggers
               script
               (script
                  {unless {exists "vignette_start.trig"}
                     {set $startTrig {new EventTrigger}}
                     {$startTrig set_name "vignette_start.trig" $this}
                     {$startTrig insert (trigger_events 0) vignette_start}
                  }
                  {unless {exists "vignette_end.trig"}
                     {set $startTrig {new EventTrigger}}
                     {$startTrig set_name "vignette_end.trig" $this}
                     {$startTrig insert (trigger_events 0) vignette_end}
                     {$startTrig insert (triggers_to_reset 0) vignette_start.trig}
                  }
                  {milo invalidate_listers_and_trees}
                  {milo update_objects}
               )
               (help "This button creates start and end triggers for this vignette")
            )
            (band_logo_mats
               (array object (class Mat))
               (help "materials to dynamically apply the band logo to")
            )
            (band_name_labels
               (array object (class UILabel))
               (help "labels to dynamically apply the band name to")
            )
            (setup_vignette
               script
               (reflect 0)
               (script {$this auto_setup_vignette})
               (help
                  "makes sure this milo file meets vignette requirements (sets up BandCamShot, etc.)"
               )
            )
            (extras
               (indent
                  (extra_to_add
                     symbol
                     (list
                        {do
                           {set $result {file_list "world/shared/extras/*.milo"}}
                           $result
                        }
                     )
                     (help "an extra you'd like like to add to the scene")
                  )
                  (extra_clip
                     object
                     (class CharClipGroup)
                     (dir
                        {if_else {exists clips}
                           clips
                           $this
                        }
                     )
                     (help "clip to assign to the extra you are adding")
                  )
                  (add_extra
                     script
                     (script
                        {set $error 0}
                        {if {== [extra_to_add] ""}
                           {set $error 1}
                           {notify "Please select an extra from 'extra_to_add' first!"}
                        }
                        {if_else {== [extra_clip] {object}}
                           {do
                              {notify "Please select a clip group under 'extra_clip' before adding!"}
                              {set $error 1}
                           }
                           {set $clipGroup {[extra_clip] name}}
                        }
                        {$this iterate_self
                           BandCamShot
                           $shot
                           {unless $error
                              {foreach_int $i 0 {$shot size (targets)}
                                 {if {== {$shot get (targets $i anim_group)} $clipGroup}
                                    {notify
                                       "Can't add because "
                                       {$shot get (targets $i target)}
                                       " is already using the clip "
                                       $clipGroup
                                    }
                                    {set $error 1}
                                 }
                              }
                           }
                        }
                        {set $extraSubdirPath
                           {sprint "world/shared/extras/" [extra_to_add] ".milo"}
                        }
                        {print "extra path: " $extraSubdirPath "
"}
                        {unless $error
                           {foreach_int $i 0 {$this size (subdirs)}
                              {set $subdir {$this get (subdirs $i)}}
                              {if {has_substr $subdir {sprint "/" [extra_to_add]}}
                                 {notify
                                    "the extra "
                                    [extra_to_add]
                                    " has already be imported into this scene!"
                                 }
                                 {set $error 1}
                              }
                           }
                        }
                        {unless $error
                           {$this insert (subdirs 0) $extraSubdirPath}
                           {if $bandwardrobe
                              {$bandwardrobe enter_vignette $this}
                           }
                           {$this iterate_self
                              BandCamShot
                              $shot
                              {$this add_shot_target $shot [extra_to_add] [extra_clip]}
                           }
                           {milo invalidate_listers_and_trees}
                           {milo update_objects}
                           {notify "success!"}
                        }
                     )
                     (help
                        "bring the selected extra into the scene and hook him into all the camshots with the selected clip"
                     )
                  )
                  (extra_to_remove
                     symbol
                     (list
                        {do
                           {set $result {array 0}}
                           {foreach_int $i 0 {$this size (subdirs)}
                              {set $subdir {$this get (subdirs $i)}}
                              {if {has_substr $subdir "extras/"}
                                 {push_back $result {file_get_base $subdir}}
                              }
                           }
                           {insert_elem $result 0 ""}
                           $result
                        }
                     )
                     (help "the name of the extra you'd like to remove")
                  )
                  (remove_extra
                     script
                     (script
                        {set $error 0}
                        {if {== [extra_to_remove] ""}
                           {set $error 1}
                           {notify "please select an extra under 'extra_to_remove'"}
                        }
                        {unless $error
                           {$this iterate_self
                              BandCamShot
                              $shot
                              {set $removeIdx -1}
                              {foreach_int $i 0 {$shot size (targets)}
                                 {if {== {$shot get (targets $i target)} [extra_to_remove]}
                                    {set $removeIdx $i}
                                 }
                              }
                              {unless {== $removeIdx -1}
                                 {$shot remove (targets $removeIdx)}
                              }
                           }
                           {set $removeIdx -1}
                           {foreach_int $i 0 {$this size (subdirs)}
                              {if {has_substr {$this get (subdirs $i)} [extra_to_remove]}
                                 {set $removeIdx $i}
                              }
                           }
                           {if_else {== $removeIdx -1}
                              {notify "ERROR: couldn't find subdir-ed extra to remove.  tell a coder!"}
                              {do
                                 {$this remove (subdirs $removeIdx)}
                                 {$this set extra_to_remove ""}
                                 {milo invalidate_listers_and_trees}
                                 {milo update_objects}
                                 {notify "success!"}
                              }
                           }
                        }
                     )
                     (help
                        "will remove the extra selected in 'extra_to_remove' from the scene + any camshot target"
                     )
                  )
               )
            )
            (setup_ao
               script
               (reflect 0)
               (script
                  {set $log ""}
                  {unless {== {$this get inline_subdir} kInlineAlways}
                     {$this set inline_subdir kInlineAlways}
                     {milo save}
                     {set $log {sprint $log "setup inlining!
"}}
                  }
                  {if_else {has_substr {$this get_path_name} "_ao.milo"}
                     {notify "This IS the AO file, only run this on scene file itself"}
                     {do
                        {set $aoFile {$this get_path_name}}
                        {search_replace $aoFile ".milo" "_ao.milo" $aoFile}
                        {unless {file_exists $aoFile}
                           {set $subdirPath {$this get_path_name}}
                           {set $aoName {sprint {file_get_base {$this get_path_name}} "_ao"}}
                           {milo_recurse_pattern
                              $dir
                              "test/world/vignette/ao_template.milo"
                              {with $dir
                                 {$this set_name $aoName $this}
                                 {$this insert (subdirs 0) $subdirPath}
                                 {$this set cam world.cam}
                                 {$this perforce_save $aoFile}
                              }
                           }
                           {milo_recurse_pattern
                              $dir
                              $aoFile
                              {with $dir
                                 {$this update_sphere}
                                 {$this perforce_resave}
                              }
                           }
                           {set $log
                              {sprint $log "created ao file: " $aoFile "
"}
                           }
                        }
                        {if_else {== $log ""}
                           {notify "AO was already setup correctly!"}
                           {notify {sprint "AO setup complete.  Did the following:
" $log}}
                        }
                     }
                  }
               )
               (help
                  "Sets up inlines, creates _ao file if necessary, and fixes up any top-level files still referencing the non-AO file"
               )
            )
            (reinline_ao
               script
               (reflect 0)
               (script
                  {if_else {has_substr {$this get_path_name} "_ao.milo"}
                     {notify "This IS the AO file, only run this on scene file itself"}
                     {do
                        {set $aoFile {$this get_path_name}}
                        {search_replace $aoFile ".milo" "_ao.milo" $aoFile}
                        {if_else {file_exists $aoFile}
                           {do
                              {milo save}
                              {set_alwaysinlined_enabled 0}
                              {milo_recurse_pattern
                                 $dir
                                 $aoFile
                                 {set_alwaysinlined_enabled 1}
                                 {$dir perforce_resave}
                                 {notify "reinlined " $aoFile "
 AO was NOT recalculated though..."}
                              }
                              {set_alwaysinlined_enabled 1}
                           }
                           {notify
                              "ao file doesn't exist yet for this scene. you can create one with the 'setup_ao' button"
                           }
                        }
                     }
                  }
               )
               (help "re-inlines the ao file associated with this scene")
            )
            (open_ao
               script
               (reflect 0)
               (script
                  {if_else {has_substr {$this get_path_name} "_ao.milo"}
                     {notify "This IS the AO file, only run this on scene file itself"}
                     {do
                        {set $aoFile {$this get_path_name}}
                        {search_replace $aoFile ".milo" "_ao.milo" $aoFile}
                        {if_else {file_exists $aoFile}
                           {do
                              {set $execCmd {sprint "cmd /c start " $aoFile}}
                              {system_exec $execCmd}
                           }
                           {notify
                              "ao file doesn't exist for this scene.  you can create one with the 'setup_ao' button."
                           }
                        }
                     }
                  }
               )
               (help
                  "opens the ao file in a separate milo window. you can recalulate AO there..."
               )
            )
            (edit_lipsync
               script
               (reflect 0)
               (script
                  {if {exists clips}
                     {milo edit clips "Object List"}
                  }
               )
               (help "pop open directory with lipsync objects")
            )
            (toggle_lipsync_scrubfix
               script
               (reflect 0)
               (script
                  {if_else {! $toggledScrubFix}
                     {do
                        {set $toggledScrubFix 1}
                        {set $fastForwardAmt 0.00}
                        {$this iterate_self
                           BandCamShot
                           $shot
                           {foreach_int $i 0 {$shot size (targets)}
                              {if {!= {$shot get (targets $i fast_forward)} 0.00}
                                 {set $fastForwardAmt {$shot get (targets $i fast_forward)}}
                                 {print "got fast forward: " $fastForwardAmt "
"}
                              }
                           }
                        }
                        {if {!= $fastForwardAmt 0.00}
                           {set $global_animbar_frameoffset {* -1 $fastForwardAmt}}
                           {milo set_anim_reset}
                        }
                        {notify
                           "lipsync scrubfix is on.  Don't forget to hit me again when you're done!"
                        }
                     }
                     {do
                        {set $toggledScrubFix 0}
                        {set $global_animbar_frameoffset 0.00}
                        {notify "lipsync scrubfix is off!
"}
                     }
                  }
               )
               (help
                  "If lipsync scrubbing is skipping around, then toggle this button.  Its because the camshot has fastforward set on it, which adjusts timing of the camshot relative to the character animation"
               )
            )
            (save_lipsync
               script
               (reflect 0)
               (script {$this preview_lipsync 1})
               (help "save and preview lipsync PropAnim changes")
            )
            (preview_lipsync
               script
               (reflect 0)
               (script {$this preview_lipsync 0})
               (help "Just preview lipsync PropAnim changes")
            )
            (create_face_cams
               script
               (script
                  {foreach $p (player0 player1 player2 player3)
                     {if {exists $p}
                        {set $tpName {sprint {$p name} "_head.tp"}}
                        {if_else {! {exists $tpName}}
                           {do
                              {set $tp {new TransProxy}}
                              {$tp set_name $tpName $this}
                              {$tp set proxy $p}
                              {$tp set part "bone_head.mesh"}
                              {set $newCam {new Cam}}
                              {set $camName {sprint {$p name} "_head.cam"}}
                              {$newCam set_name $camName $this}
                              {$newCam set_trans_parent $tp}
                              {$newCam set_local_pos 0 40 0}
                              {$newCam set_local_rot 0 -90 180}
                              {milo update_objects}
                           }
                           {do
                              {set $camName {sprint {$p name} "_head.cam"}}
                              {if {exists $camName}
                                 {$camName set_local_pos 0 40 0}
                                 {$camName set_local_rot 0 -90 180}
                              }
                           }
                        }
                     }
                  }
               )
            )
            (set_player_hints
               script
               (help
                  "Set hints for which user/instrument should be assigned to each player, importance1 is MOST important, importance4 is least.  Humans are more important than AIs"
               )
               (script
                  {unless {exists player_hints.obj}
                     {do
                        ($obj {new Object})
                        {$obj set_name player_hints.obj $this}
                        {$obj set_type vignette_hints}
                     }
                  }
                  {milo edit player_hints.obj "Object Type"}
               )
            )
            (create_retargetting
               script
               (help "Create and edit (or just edit) the retargetting object")
               (script
                  {unless {exists BandRetargetVignette.brv}
                     {do
                        ($obj {new BandRetargetVignette})
                        {$obj set_name BandRetargetVignette.brv $this}
                     }
                  }
                  {milo edit BandRetargetVignette.brv "BandRetargetVignette"}
               )
            )
            (edit_eyes_propanim
               script
               (help
                  "if necessary, creates a propanim to drive the eyes of the players and hooks into all the camshots.  Then opens the propanim editor..."
               )
               (script
                  {if_else $bandwardrobe
                     {do
                        {unless {exists eye_interests.anim}
                           {set $newPropanim {new PropAnim}}
                           {$newPropanim set_name "eye_interests.anim" $this}
                           {set $temp {array 0}}
                           {set $num_frames 80}
                           {if {exists clips}
                              {clips iterate_self
                                 CharClip
                                 $clip
                                 {set $num_frames {$clip get length_beats}}
                              }
                           }
                           {foreach $prop
                              (player0_forced_focus
                                 player0_enable_blinks
                                 player0_force_blink
                                 player1_forced_focus
                                 player1_enable_blinks
                                 player1_force_blink
                                 player2_forced_focus
                                 player2_enable_blinks
                                 player2_force_blink
                                 player3_forced_focus
                                 player3_enable_blinks
                                 player3_force_blink
                              )
                              {set $propArr {array ($prop)}}
                              {if_else {has_substr {sprint $prop} "forced_focus"}
                                 {do
                                    {$newPropanim add_keys $bandwardrobe $propArr 6}
                                    {$newPropanim set_key_val $bandwardrobe $propArr 0 {symbol ""}}
                                    {$newPropanim set_key_val $bandwardrobe $propArr $num_frames {symbol ""}}
                                 }
                                 {do
                                    {$newPropanim add_keys $bandwardrobe $propArr 3}
                                    {$newPropanim set_key_val
                                       $bandwardrobe
                                       $propArr
                                       0
                                       {has_substr {sprint $prop} "enable_blinks"}
                                    }
                                    {$newPropanim set_key_val
                                       $bandwardrobe
                                       $propArr
                                       $num_frames
                                       {has_substr {sprint $prop} "enable_blinks"}
                                    }
                                 }
                              }
                           }
                           {$this iterate_self
                              BandCamShot
                              $shot
                              {set $found 0}
                              {foreach_int $i 0 {$shot size (anims)}
                                 {if {== {$shot get (anims $i)} $newPropanim}
                                    {set $found 1}
                                 }
                              }
                              {unless $found
                                 {$shot insert (anims {$shot size (anims)}) $newPropanim}
                              }
                           }
                        }
                        {if {exists eye_interests.anim}
                           {milo edit eye_interests.anim}
                        }
                     }
                     {notify {path_name $this} " does not subdir vignette_chars, it must!"}
                  }
               )
            )
         )
         (postprocess {object})
         (band_logo_mats ())
         (band_name_labels ())
         (extra_to_add "")
         (extra_clip {object})
         (extra_to_remove "")
      )
      (drum_tester
         (use_tempo medium)
         (use_genre rocker)
         (tour_endings 0)
         (tour_ending_venue big_club)
         (directed_cut)
         (enter
            {do
               ($char {object BandCharacter})
               {$char set in_closet 1}
               {$char set_context venue}
               {milo set anim $char}
            }
         )
         (sync_objects
            {do
               ($char {object BandCharacter})
               {$char sync_objects}
            }
         )
         (on_milo_loaded
            {if {exists BandCharacter}
               {milo edit {object BandCharacter} "Character"}
            }
            {milo edit $this "Object Type"}
         )
         (editor
            (use_tempo
               symbol
               (help "song tempo")
               (list (slow medium fast))
            )
            (use_genre
               symbol
               (help "song genre")
               (list (rocker dramatic banger spazz))
            )
            (directed_cut
               symbol
               (help "choose a directed cut")
               (list {{$this find BandCharacter} list_dircuts})
            )
            (tour_ending_venue
               symbol
               (help "which tour endings")
               (list (arena big_club festival))
            )
            (tour_endings bool (help "load only tour endings"))
            (load_anims
               script
               (help "loads clips according to current settings")
               (script
                  {do
                     ($char {object BandCharacter})
                     {$char set tempo [use_tempo]}
                     {$char set genre [use_genre]}
                     {$char load_dircut [directed_cut]}
                     {$char set in_tour_ending [tour_endings]}
                     {if [tour_endings]
                        {$char set test_tour_ending_venue [tour_ending_venue]}
                     }
                     {$char start_load 0}
                  }
               )
            )
            (create_e3_filter
               script
               (help
                  "creates a special group filter named 'e3_filter' that will only contain clips that haven't had their viseme group set yet"
               )
               (script
                  {do
                     ($char {object BandCharacter})
                     {set $charDriver {$char get (CharacterTesting driver)}}
                     {if $charDriver
                        {set $clipsDir {$charDriver get clips}}
                        {if $clipsDir
                           {with $clipsDir
                              {if {exists e3_filter}
                                 {delete {object e3_filter}}
                              }
                           }
                           {set $newGroup {new CharClipGroup}}
                           {$newGroup set_name "e3_filter" $clipsDir}
                           {$clipsDir iterate_self
                              CharClip
                              $clip
                              {if {== {$clip get viseme_group} normal}
                                 {$newGroup add_clip $clip}
                              }
                           }
                        }
                     }
                  }
               )
            )
            (load_female
               script
               (help "load female prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_female01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
            (load_male
               script
               (help "load male prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_male01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
            (sit_down
               script
               (script
                  {set $char {$this find BandCharacter}}
                  {$char set_play 4096}
                  {set $drv {$char find main.drv}}
                  {if $drv
                     {$drv play still}
                  }
               )
               (help "Makes the drummer sit down by playing still pose")
            )
         )
      )
      (guitar_tester
         (use_tempo medium)
         (use_genre rocker)
         (tour_endings 0)
         (tour_ending_venue big_club)
         (directed_cut)
         (enter
            {do
               ($char {object BandCharacter})
               {$char set in_closet 1}
               {$char set_context venue}
               {milo set anim $char}
            }
         )
         (sync_objects
            {do
               ($char {object BandCharacter})
               {$char sync_objects}
            }
         )
         (on_milo_loaded
            {if {exists BandCharacter}
               {milo edit {object BandCharacter} "Character"}
            }
            {milo edit $this "Object Type"}
         )
         (editor
            (use_tempo
               symbol
               (help "song tempo")
               (list (slow medium fast))
            )
            (use_genre
               symbol
               (help "song genre")
               (list (rocker dramatic banger spazz))
            )
            (directed_cut
               symbol
               (help "choose a directed cut")
               (list {{$this find BandCharacter} list_dircuts})
            )
            (tour_ending_venue
               symbol
               (help "which tour endings")
               (list (arena big_club festival))
            )
            (tour_endings bool (help "load only tour endings"))
            (load_anims
               script
               (help "loads clips according to current settings")
               (script
                  {do
                     ($char {object BandCharacter})
                     {$char set tempo [use_tempo]}
                     {$char set genre [use_genre]}
                     {$char load_dircut [directed_cut]}
                     {$char set in_tour_ending [tour_endings]}
                     {if [tour_endings]
                        {$char set test_tour_ending_venue [tour_ending_venue]}
                     }
                     {$char start_load 0}
                  }
               )
            )
            (create_e3_filter
               script
               (help
                  "creates a special group filter named 'e3_filter' that will only contain clips that haven't had their viseme group set yet"
               )
               (script
                  {do
                     ($char {object BandCharacter})
                     {set $charDriver {$char get (CharacterTesting driver)}}
                     {if $charDriver
                        {set $clipsDir {$charDriver get clips}}
                        {if $clipsDir
                           {with $clipsDir
                              {if {exists e3_filter}
                                 {delete {object e3_filter}}
                              }
                           }
                           {set $newGroup {new CharClipGroup}}
                           {$newGroup set_name "e3_filter" $clipsDir}
                           {$clipsDir iterate_self
                              CharClip
                              $clip
                              {if {== {$clip get viseme_group} normal}
                                 {$newGroup add_clip $clip}
                              }
                           }
                        }
                     }
                  }
               )
            )
            (load_female
               script
               (help "load female prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_female01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
            (load_male
               script
               (help "load male prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_male01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
            (strum_and_fret
               script
               (help "Makes the character strum and fret so the arms aren't all wacky")
               (script
                  {set $char {$this find BandCharacter}}
                  {set $strum_drv {$char find strum.dmidi}}
                  {set $fret_drv {$char find fret.dmidi}}
                  {if $strum_drv
                     {$strum_drv play strum_open_01 48}
                  }
                  {if $fret_drv
                     {$fret_drv play open 48}
                  }
               )
            )
            (fret_hi
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret20.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand high on the neck")
            )
            (fret_med_hi
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret15.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand med-high on the neck")
            )
            (fret_med
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret10.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand med on the neck")
            )
            (fret_med_low
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret05.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand med-low on the neck")
            )
            (fret_low
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret01.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand low on the neck")
            )
         )
      )
      (bass_tester
         (use_tempo medium)
         (use_genre rocker)
         (tour_endings 0)
         (tour_ending_venue big_club)
         (directed_cut)
         (enter
            {do
               ($char {object BandCharacter})
               {$char set in_closet 1}
               {$char set_context venue}
               {milo set anim $char}
            }
         )
         (sync_objects
            {do
               ($char {object BandCharacter})
               {$char sync_objects}
            }
         )
         (on_milo_loaded
            {if {exists BandCharacter}
               {milo edit {object BandCharacter} "Character"}
            }
            {milo edit $this "Object Type"}
         )
         (editor
            (use_tempo
               symbol
               (help "song tempo")
               (list (slow medium fast))
            )
            (use_genre
               symbol
               (help "song genre")
               (list (rocker dramatic banger spazz))
            )
            (directed_cut
               symbol
               (help "choose a directed cut")
               (list {{$this find BandCharacter} list_dircuts})
            )
            (tour_ending_venue
               symbol
               (help "which tour endings")
               (list (arena big_club festival))
            )
            (tour_endings bool (help "load only tour endings"))
            (load_anims
               script
               (help "loads clips according to current settings")
               (script
                  {do
                     ($char {object BandCharacter})
                     {$char set tempo [use_tempo]}
                     {$char set genre [use_genre]}
                     {$char load_dircut [directed_cut]}
                     {$char set in_tour_ending [tour_endings]}
                     {if [tour_endings]
                        {$char set test_tour_ending_venue [tour_ending_venue]}
                     }
                     {$char start_load 0}
                  }
               )
            )
            (create_e3_filter
               script
               (help
                  "creates a special group filter named 'e3_filter' that will only contain clips that haven't had their viseme group set yet"
               )
               (script
                  {do
                     ($char {object BandCharacter})
                     {set $charDriver {$char get (CharacterTesting driver)}}
                     {if $charDriver
                        {set $clipsDir {$charDriver get clips}}
                        {if $clipsDir
                           {with $clipsDir
                              {if {exists e3_filter}
                                 {delete {object e3_filter}}
                              }
                           }
                           {set $newGroup {new CharClipGroup}}
                           {$newGroup set_name "e3_filter" $clipsDir}
                           {$clipsDir iterate_self
                              CharClip
                              $clip
                              {if {== {$clip get viseme_group} normal}
                                 {$newGroup add_clip $clip}
                              }
                           }
                        }
                     }
                  }
               )
            )
            (load_female
               script
               (help "load female prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_female01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
            (load_male
               script
               (help "load male prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_male01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
            (strum_and_fret
               script
               (help "Makes the character strum and fret so the arms aren't all wacky")
               (script
                  {set $char {$this find BandCharacter}}
                  {set $strum_drv {$char find strum.dmidi}}
                  {set $fret_drv {$char find fret.dmidi}}
                  {if $strum_drv
                     {$strum_drv play strum_open_01 48}
                  }
                  {if $fret_drv
                     {$fret_drv play open 48}
                  }
               )
            )
            (fret_hi
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret11.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand high on the neck")
            )
            (fret_med_hi
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret08.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand med-high on the neck")
            )
            (fret_med
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret05.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand med on the neck")
            )
            (fret_med_low
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret03.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand med-low on the neck")
            )
            (fret_low
               script
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {handle
                        ({$char find fret.ikmidi}
                           set
                           cur_spot
                           {$char find spot_neck_fret01.mesh}
                        )
                     }
                  }
               )
               (help "set the fret hand low on the neck")
            )
         )
      )
      (mic_tester
         (use_tempo medium)
         (use_genre rocker)
         (tour_endings 0)
         (tour_ending_venue big_club)
         (directed_cut)
         (enter
            {do
               ($char {object BandCharacter})
               {$char set in_closet 1}
               {$char set_context venue}
               {milo set anim $char}
            }
         )
         (sync_objects
            {do
               ($char {object BandCharacter})
               {$char sync_objects}
            }
         )
         (on_milo_loaded
            {if {exists BandCharacter}
               {milo edit {object BandCharacter} "Character"}
            }
            {milo edit $this "Object Type"}
         )
         (editor
            (use_tempo
               symbol
               (help "song tempo")
               (list (slow medium fast))
            )
            (use_genre
               symbol
               (help "song genre")
               (list (rocker dramatic banger spazz))
            )
            (directed_cut
               symbol
               (help "choose a directed cut")
               (list {{$this find BandCharacter} list_dircuts})
            )
            (tour_ending_venue
               symbol
               (help "which tour endings")
               (list (arena big_club festival))
            )
            (tour_endings bool (help "load only tour endings"))
            (load_anims
               script
               (help "loads clips according to current settings")
               (script
                  {do
                     ($char {object BandCharacter})
                     {$char set tempo [use_tempo]}
                     {$char set genre [use_genre]}
                     {$char load_dircut [directed_cut]}
                     {$char set in_tour_ending [tour_endings]}
                     {if [tour_endings]
                        {$char set test_tour_ending_venue [tour_ending_venue]}
                     }
                     {$char start_load 0}
                  }
               )
            )
            (create_e3_filter
               script
               (help
                  "creates a special group filter named 'e3_filter' that will only contain clips that haven't had their viseme group set yet"
               )
               (script
                  {do
                     ($char {object BandCharacter})
                     {set $charDriver {$char get (CharacterTesting driver)}}
                     {if $charDriver
                        {set $clipsDir {$charDriver get clips}}
                        {if $clipsDir
                           {with $clipsDir
                              {if {exists e3_filter}
                                 {delete {object e3_filter}}
                              }
                           }
                           {set $newGroup {new CharClipGroup}}
                           {$newGroup set_name "e3_filter" $clipsDir}
                           {$clipsDir iterate_self
                              CharClip
                              $clip
                              {if {== {$clip get viseme_group} normal}
                                 {$newGroup add_clip $clip}
                              }
                           }
                        }
                     }
                  }
               )
            )
            (load_female
               script
               (help "load female prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_female01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
            (load_male
               script
               (help "load male prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_male01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
         )
      )
      (keyboard_tester
         (use_tempo medium)
         (use_genre rocker)
         (tour_endings 0)
         (tour_ending_venue big_club)
         (directed_cut)
         (enter
            {do
               ($char {object BandCharacter})
               {$char set in_closet 1}
               {$char set_context venue}
               {milo set anim $char}
            }
         )
         (sync_objects
            {do
               ($char {object BandCharacter})
               {$char sync_objects}
            }
         )
         (on_milo_loaded
            {if {exists BandCharacter}
               {milo edit {object BandCharacter} "Character"}
            }
            {milo edit $this "Object Type"}
         )
         (editor
            (cross_hands
               script
               (script
                  {do
                     ($char {object BandCharacter})
                     ($rhslide {$char find rh_target.ikslide})
                     ($lhslide {$char find lh_target.ikslide})
                     ($rhmidi {$char find right_hand.dmidi})
                     ($lhmidi {$char find left_hand.dmidi})
                     {if $rhslide
                        {$rhslide set_fraction 0.00 0.00}
                     }
                     {if $lhslide
                        {$lhslide set_fraction 1.00 0.00}
                     }
                     {if $lhmidi
                        {$lhmidi play up}
                     }
                     {if $rhmidi
                        {$rhmidi play up}
                     }
                  }
               )
            )
            (spread_hands
               script
               (script
                  {do
                     ($char {object BandCharacter})
                     ($rhslide {$char find rh_target.ikslide})
                     ($lhslide {$char find lh_target.ikslide})
                     ($rhmidi {$char find right_hand.dmidi})
                     ($lhmidi {$char find left_hand.dmidi})
                     {if $rhslide
                        {$rhslide set_fraction 1.00 0.00}
                     }
                     {if $lhslide
                        {$lhslide set_fraction 0.00 0.00}
                     }
                     {if $lhmidi
                        {$lhmidi play up}
                     }
                     {if $rhmidi
                        {$rhmidi play up}
                     }
                  }
               )
            )
            (use_tempo
               symbol
               (help "song tempo")
               (list (slow medium fast))
            )
            (use_genre
               symbol
               (help "song genre")
               (list (rocker dramatic banger spazz))
            )
            (directed_cut
               symbol
               (help "choose a directed cut")
               (list {{$this find BandCharacter} list_dircuts})
            )
            (tour_ending_venue
               symbol
               (help "which tour endings")
               (list (arena big_club festival))
            )
            (tour_endings bool (help "load only tour endings"))
            (load_anims
               script
               (help "loads clips according to current settings")
               (script
                  {do
                     ($char {object BandCharacter})
                     {$char set tempo [use_tempo]}
                     {$char set genre [use_genre]}
                     {$char load_dircut [directed_cut]}
                     {$char set in_tour_ending [tour_endings]}
                     {if [tour_endings]
                        {$char set test_tour_ending_venue [tour_ending_venue]}
                     }
                     {$char start_load 0}
                  }
               )
            )
            (create_e3_filter
               script
               (help
                  "creates a special group filter named 'e3_filter' that will only contain clips that haven't had their viseme group set yet"
               )
               (script
                  {do
                     ($char {object BandCharacter})
                     {set $charDriver {$char get (CharacterTesting driver)}}
                     {if $charDriver
                        {set $clipsDir {$charDriver get clips}}
                        {if $clipsDir
                           {with $clipsDir
                              {if {exists e3_filter}
                                 {delete {object e3_filter}}
                              }
                           }
                           {set $newGroup {new CharClipGroup}}
                           {$newGroup set_name "e3_filter" $clipsDir}
                           {$clipsDir iterate_self
                              CharClip
                              $clip
                              {if {== {$clip get viseme_group} normal}
                                 {$newGroup add_clip $clip}
                              }
                           }
                        }
                     }
                  }
               )
            )
            (load_female
               script
               (help "load female prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_female01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
            (load_male
               script
               (help "load male prefab")
               (script
                  {do
                     {set $char {$this find BandCharacter}}
                     {set $inst_type {$char get instrument_type}}
                     {set $name {symbol prefab_male01}}
                     {set $prefab {find_obj {bandchardesc_prefabs} $name}}
                     {if_else $prefab
                        {do
                           {$char set test_prefab $prefab}
                           {$char copy_prefab}
                           {$char set instrument_type $inst_type}
                           {$char start_load 0}
                        }
                        {print "Prefab $name not found."}
                     }
                  }
               )
            )
         )
      )
      (closet_tester
         (editor
            (no_instrument
               script
               (script
                  {if {exists player0}
                     {set $p {object player0}}
                     {$p set instrument_type none}
                     {$p start_load 0}
                  }
               )
               (help "resets to no instrument")
            )
            (make_drummer
               script
               (script
                  {if {exists player0}
                     {set $p {object player0}}
                     {$p set instrument_type drum}
                     {$p start_load 0}
                     {{$p find left_hand.ikhand} set hand }
                     {{$p find right_hand.ikhand} set hand }
                  }
               )
               (help "turn the character into a drummer.")
            )
         )
         (on_milo_loaded
            {if {exists player0}
               {milo edit {object player0} "Character"}
            }
            {milo edit $this "Object Type"}
         )
         (enter
            {if $bandwardrobe
               {$bandwardrobe enter_closet
                  $this
                  {if_else {exists closet_mgr}
                     {closet_mgr get_user_slot}
                     0
                  }
               }
            }
         )
      )
   )
   (editor
      (hide_overrides
         (array
            object
            (list {$this list_objs Draw (subdir_only) (no_null)})
            (help "Subdir objects to hide")
         )
      )
      (bitmap_overrides
         (array
            (struct
               (original
                  object
                  (list {$this list_objs Tex (subdir_only)})
                  (help "Subdir texture to replace")
               )
               (replacement
                  object
                  (list {$this list_objs Tex (curdir_only)})
                  (help "Curdir texture to replace with")
               )
            )
         )
      )
      (mat_overrides
         (array
            (struct
               (mesh
                  object
                  (list {$this list_objs Mesh (subdir_only)})
                  (help "Subdir mesh to modify")
               )
               (mat
                  object
                  (list {$this list_objs Mat (curdir_only)})
                  (help "Curdir material to set")
               )
            )
         )
      )
      (preset_overrides
         (array
            (struct
               (preset
                  object
                  (list {$this list_objs LightPreset (subdir_only)})
                  (help "Subdir preset to modify")
                  (pre_sync
                     {do
                        ($start)
                        ($end)
                        ($frame)
                        {milo get_anim_frame $start $end $frame}
                        {milo set_anim_frame $start $end $frame}
                     }
                  )
                  (post_sync
                     {do
                        ($start)
                        ($end)
                        ($frame)
                        {milo get_anim_frame $start $end $frame}
                        {milo set_anim_frame $start $end $frame}
                     }
                  )
               )
               (hue
                  object
                  (class LightHue)
                  (help "Hue texture to use")
                  (post_sync
                     {do
                        ($start)
                        ($end)
                        ($frame)
                        {milo get_anim_frame $start $end $frame}
                        {milo set_anim_frame $start $end $frame}
                     }
                  )
               )
            )
         )
      )
      (camshot_overrides
         (array
            object
            (list {$this list_objs CamShot (subdir_only) (no_null)})
            (help "Subdir camshots to inhibit")
         )
      )
      (ps3_per_pixel_hides
         (array
            object
            (list {$this list_objs Draw (no_null)})
            (help "Things to hide when ps3_per_pixel on CamShot")
         )
      )
      (ps3_per_pixel_shows
         (array
            object
            (list {$this list_objs Draw (no_null)})
            (help "Things to show when ps3_per_pixel on CamShot")
         )
      )
      (hud_filename
         file
         (help "HUD Preview Dir")
         (ext "Milo files" milo)
      )
      (show_hud
         bool
         (help "Whether to draw the HUD preview")
         (no_test)
      )
      (find_char_interest_objects
         script
         (script
            {foreach $char {object_list $this BandCharacter}
               {if {exists $char}
                  {$char find_interest_objects $this}
               }
            }
            {foreach $char {object_list $this HamCharacter}
               {if {exists $char}
                  {$char find_interest_objects $this}
               }
            }
         )
         (help
            "collects all the interest objects in the scene and assigns them to each character"
         )
      )
      ('test preset animation'
         (indent
            (test_light_preset_1
               object
               (class LightPreset)
               (alias 'test light preset 1')
               (help "The first light preset to start")
            )
            ('select preset 1'
               script
               (help "Starts the selected preset")
               (script {$this start_test_preset [test_light_preset_1]})
            )
            (test_light_preset_2
               object
               (class LightPreset)
               (alias 'test light preset 2')
               (help "The second light preset to start")
            )
            ('select preset 2'
               script
               (help "Starts the selected preset")
               (script {$this start_test_preset [test_light_preset_2]})
            )
            ('reset testing'
               script
               (help "reset all presets")
               (script
                  {$this stop_test_preset}
                  {$this reset_presets}
               )
            )
            (test_animation_time
               float
               (alias 'animation time')
               (range 1 120)
               (help "animation time in beats")
            )
            (forwards
               script
               (help "blend preset 1 into preset 2")
               (script
                  {$this test_preset_blending
                     [test_light_preset_1]
                     [test_light_preset_2]
                     [test_animation_time]
                  }
               )
            )
            (backwards
               script
               (help "blend preset 2 into preset 1")
               (script
                  {$this test_preset_blending
                     [test_light_preset_2]
                     [test_light_preset_1]
                     [test_animation_time]
                  }
               )
            )
         )
         (help "for testing light preset blending")
      )
      (hud
         object
         (class RndDir)
         (help "hud to be drawn last")
      )
   )
)
(Spotlight
   (description "Represents a beam and floorspot for venue modeling")
   (allowed_dirs RndDir)
   (ext spot)
   (editor
      (beam
         (indent
            (length float (help "Length of the beam/cone"))
            (top_radius float (help "Radius at the top of the beam/cone"))
            (bottom_radius float (help "Radius at the bottom of the beam/cone"))
            (top_side_border
               float
               (help
                  "For beams, length of the side transparency border at the top of the beam"
               )
            )
            (bottom_side_border
               float
               (help
                  "For beams, length of the side transparency border at the bottom of the beam"
               )
            )
            (bottom_border float (help "Length of the bottom transparency border"))
            (material
               object
               (class Mat)
               (help "The material to use for the beam/cone")
            )
            (offset float (help "Offset of beam along trajectory"))
            (angle_offset
               (vector
                  (x float)
                  (y float)
               )
               (help "Amount to offset beam rotation (in degrees)")
            )
            (is_cone bool (help "Whether this is a beam or a cone"))
            (ng
               (indent
                  (xsection
                     object
                     (class Tex)
                     (help "cross section intensity override texture")
                  )
                  (brighten float (help "raise or lower intensity compared to og beams"))
                  (expand float (help "expand or shrink the radii compared to og beams"))
                  (shape
                     int
                     (list ("kBeamConic" "kBeamRect" "kBeamSheet" "kBeamQuadXYZ" "kBeamQuadZ"))
                     (help "Shape of the beam")
                  )
                  (sections int (help "Number of divisions along length"))
                  (segments int (help "Number of divisions along width or around cone"))
                  (cutouts
                     (array
                        object
                        (class Draw)
                        (obj_flags no_null)
                     )
                     (help "Objects that create cutout shadow in the beam.")
                  )
                  (slaves
                     (array
                        object
                        (class Light)
                        (obj_flags no_null)
                     )
                     (help "Slave lights for projection lights and shadows")
                  )
               )
            )
         )
      )
      (color color (help "Color of the spotlight"))
      (intensity float (help "Intensity of the spotlight"))
      (color_owner
         object
         (class Spotlight)
         (help "Master for light color and intensity")
         (obj_flags no_null)
         (no_test)
      )
      (light_can
         object
         (class Mesh)
         (help "Optional light can mesh to use")
      )
      (light_can_offset float (help "Offset of light can along beam trajectory"))
      (light_can_sort
         bool
         (help
            "Can't optimize render end of render batching of light can with others"
         )
      )
      (target
         object
         (class Trans)
         (help "Object to target spotlight")
      )
      (target_shadow bool (help "Whether the target should cast a shadow"))
      (spot_target
         object
         (class Trans)
         (help "Reference object for floor height, uses spot target if not set")
      )
      (spot_scale float (help "Scale of the floor disc"))
      (spot_height float (help "Height offset of the floor disc"))
      (spot_material
         object
         (class Mat)
         (help "Material to use for the floor spot")
      )
      (damping_constant
         float
         (help "0-1, controls how fast spotlight moves to reach target")
      )
      (flare_enabled
         bool
         (help "Whether the flare is enabled (keyframed by light presets)")
      )
      (flare_material
         object
         (class Mat)
         (help "Material to use for the flare")
      )
      (flare_size
         (vector
            (x float)
            (y float)
         )
         (help "Size of the flare")
      )
      (flare_range
         (vector
            (x float)
            (y float)
         )
         (help "Range of the flare")
      )
      (flare_steps int (help "Steps for the flare"))
      (flare_offset float (help "Offset of flare along spotlight trajectory"))
      (flare_visibility_test
         bool
         (help "Whether the flare performs a visiblity test (or is always visible)")
      )
      (lens_size float (help "Size of the lens billboard"))
      (lens_offset float (help "Offset of the lens billboard"))
      (lens_material
         object
         (class Mat)
         (help "Material to use for the lens")
      )
      (additional_objects
         (array object (class Draw))
         (help "Additional objects that should be drawn by the spotlight.")
      )
      (animate_orientation_from_preset
         bool
         (help
            "Whether this spotlight position/rotation should be animated by light presets."
         )
      )
      (animate_color_from_preset
         bool
         (help
            "Whether this spotlight coloring should be animated by light presets."
         )
      )
      (propogate_coloring_to_presets
         script
         (script {$this propogate_coloring_to_presets})
         (help
            "Propogate the spotlight's current color state to all light presets in the file."
         )
      )
      (propogate_targeting_to_presets
         script
         (script {$this propogate_targeting_to_presets})
         (help
            "Propogate the spotlight's current target/rotation state to all light presets in the file."
         )
      )
   )
   (types)
   (superclasses Draw Trans Poll)
   (views
      ('Eat it'
         ("Beam Length" [length])
         ("Beam Color" [color])
         ("Beam Intensity" [intensity])
      )
   )
)
(SpotlightDrawer
   (superclasses Draw)
   (description "A SpotlightDrawer draws spotlights.")
   (ext sd)
   (editor
      (ng
         (indent
            (total
               float
               (help "global intensity scale")
               (range 0.00 1.00)
            )
            (base_intensity float (help "intensity of smokeless beam"))
            (smoke_intensity float (help "intensity from smoke"))
            (color
               color
               (help "color of ambient (unlit) fog")
               (range 0.00 1.00)
            )
            (proxy
               object
               (class Draw)
               (help "proxy fog object")
            )
            (light_influence
               float
               (help
                  "The amount the spotlights will influence the real lighting of the world"
               )
               (range 0.00 10.00)
            )
            (select
               script
               (help "Start using these parameters for light cone drawing.")
               (script {$this select})
            )
         )
         (help "ng spotlight rendering parameters")
      )
   )
   (types)
)
(SpotlightEnder
   (superclasses Draw)
   (description
      "Object that ends spotlights, must put after the last spotlight and before anything that would render using those spotlights"
   )
   (allowed_dirs RndDir)
   (ext se)
   (editor)
   (types)
)
(WorldCrowd
   (description
      "A quickly-rendered bunch of instanced characters within an area"
   )
   (allowed_dirs RndDir)
   (ext crd)
   (editor
      (num int (help "Number of characters to place"))
      (characters
         (array
            (struct
               (character
                  object
                  (class Character)
                  (struct characters)
                  (help "The character to use as the archetype")
               )
               (height
                  float
                  (struct characters)
                  (help "The height at which to render the character")
               )
               (density
                  float
                  (struct characters)
                  (help "Density to place this character")
               )
               (radius
                  float
                  (struct characters)
                  (help
                     "Collision radius of the character - characters won't be placed within this range"
                  )
               )
            )
         )
         (help "Character archetypes for the crowd")
      )
      (placement_mesh
         object
         (class Mesh)
         (help "The placement mesh")
      )
      (environ
         object
         (class Environ)
         (help "The environ to render the imposter billboards with")
      )
      (environ_3d
         object
         (class Environ)
         (help "The environ used when rendering the 3D crowd set by a cam shot")
      )
      (focus
         object
         (class Trans)
         (help "Optional crowd facing focus when rotate is set to kCrowdRotateNone")
      )
      (generate
         script
         (script
            {if {exists milo}
               {do
                  {milo clear_highlights}
                  {milo record $this 'Rebuild crowd'}
               }
            }
            {$this rebuild}
         )
         (help "Completely rebuilds the crowd placements")
      )
      ('Assign Random Colors'
         script
         (script
            {if {exists milo}
               {milo record $this 'Set crowd random colors'}
            }
            {$this assign_random_colors}
         )
         (help "Reassigns the random crowd colors")
      )
      (force_3D_crowd
         bool
         (help "Makes crowd be 3D regardless of the CamShot")
         (pre_sync
            {if {exists milo}
               {milo clear_highlights}
            }
         )
      )
      (show_3d_only
         bool
         (help
            "Shows only the 3D crowd, but ONLY in Milo so you can more easily distinguish them from the 2d crowd"
         )
      )
   )
   (types)
   (superclasses Draw)
)
(CamShot
   (description
      "A camera shot. This is an animated camera path with keyframed settings."
   )
   (allowed_dirs PanelDir)
   (ext shot)
   (editor
      (looping bool (help "Whether the animation should loop."))
      (loop_keyframe
         int
         (help "If looping true, which keyframe to loop to.")
         (range 0 {max 0 {- {$this size (keyframes)} 1}})
      )
      (keyframes
         (array
            (struct
               (duration
                  float
                  (help "Duration this keyframe holds steady")
                  (post_sync
                     {if {&& {milo cur_anim} {== $this {milo cur_anim}}}
                        {do
                           ($start)
                           ($end)
                           ($curr)
                           {milo get_anim_frame $start $end $curr}
                        }
                     }
                  )
               )
               (blend
                  float
                  (help "Duration this keyframe blends into the next one")
                  (post_sync
                     {if {&& {milo cur_anim} {== $this {milo cur_anim}}}
                        {do
                           ($start)
                           ($end)
                           ($curr)
                           {milo get_anim_frame $start $end $curr}
                        }
                     }
                  )
                  (refresh keyframes)
               )
               (blend_ease
                  float
                  (help "Amount to ease into this keyframe")
                  (read_only {== [keyframes {elem $milo_prop_path 1} blend] 0})
                  (range 0.00 1000.00)
               )
               (blend_ease_mode
                  int
                  (list
                     (
                        ("kBlendEaseInAndOut" "blend in and out the same amount")
                        ("kBlendEaseIn" "slow rate of change, then fast")
                        ("kBlendEaseOut" "fast rate of change, then slow")
                     )
                  )
                  (help "Amount to ease out to the next keyframe")
                  (read_only {== [keyframes {elem $milo_prop_path 1} blend] 0})
               )
               (set_frame
                  script
                  (refresh keyframes)
                  (script
                     {$this set_pos {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                  )
               )
               (field_of_view
                  float
                  (help
                     "Field of view, in degrees, for this keyframe. Same as setting lens focal length below"
                  )
                  (alias "field of view (deg.)")
                  (refresh keyframes)
                  (range 0.00 360.00)
               )
               (lens_mm
                  float
                  (help
                     "Lens focal length for this keyframe. Same as setting field of view above."
                  )
                  (alias "lens (mm.)")
                  (refresh keyframes)
                  (range 0.00 500.00)
               )
               (lens_preset
                  symbol
                  (list (15mm 20mm 24mm 28mm 35mm 50mm 85mm 135mm 200mm Custom))
                  (refresh keyframes)
                  (help
                     "A preset lens for a 35mm camera that sets the appropriate field of view"
                  )
                  (alias "stock lens")
               )
               (zoom_fov
                  float
                  (help "Field of view adjustment (not affected by target reframing")
               )
               (world_offset
                  (struct
                     (pitch float)
                     (roll float)
                     (yaw float)
                     (x_scale float)
                     (y_scale float)
                     (z_scale float)
                     (x float)
                     (y float)
                     (z float)
                  )
                  (help "Camera position for this keyframe")
               )
               (screen_offset
                  (vector
                     (x float)
                     (y float)
                  )
                  (help "Screen space offset of target for this keyframe")
               )
               (targets
                  (array
                     object
                     (class Trans)
                     (refresh keyframes)
                     (obj_flags no_null)
                  )
                  (help "Target(s) that the camera should look at")
                  (refresh keyframes)
               )
               (parent
                  object
                  (class Trans)
                  (help "Parent that the camera should attach itself to")
                  (refresh keyframes)
               )
               (use_parent_rotation
                  bool
                  (help "Whether to take the parent object's rotation into account")
               )
               (parent_first_frame bool (help "Only parent on the first frame"))
               (focal_target
                  object
                  (class Trans)
                  (help "The focal point when calculated depth of field")
               )
               (blur_depth
                  float
                  (help
                     "0 to 1 scale representing the Depth size of the blur valley (offset from the focal target + focus_blur_multiplier) in the Camera Frustrum. Zero puts everything in Blur. 1 puts everything in the Blur falloff valley."
                  )
                  (read_only {|| {!= $gfx_mode 1} {! [use_depth_of_field]}})
                  (range 0.00 1.00)
               )
               (max_blur
                  float
                  (help "Maximum blurriness")
                  (read_only {|| {!= $gfx_mode 1} {! [use_depth_of_field]}})
                  (range 0.00 1.00)
               )
               (min_blur
                  float
                  (help "Minimum blurriness")
                  (read_only {|| {!= $gfx_mode 1} {! [use_depth_of_field]}})
                  (range 0.00 1.00)
               )
               (focus_blur_multiplier
                  float
                  (help
                     "Multiplier of distance from camere to focal target. Offsets focal point of blur."
                  )
                  (read_only {! [use_depth_of_field]})
               )
               (shake_noisefreq float (help "Noise frequency for camera shake"))
               (shake_noiseamp float (help "Noise amplitude for camera shake"))
               (shake_maxangle
                  (vector
                     (x float)
                     (y float)
                  )
                  (help "Maximum angle for camera shake")
               )
            )
         )
      )
      (category
         symbol
         (list ())
         (help "Category for shot-picking")
      )
      (filter float (help "Filter amount"))
      (clamp_height
         float
         (help "Height above target's base at which to clamp camera")
      )
      (near_plane float (help "Near clipping plane for the camera"))
      (far_plane float (help "Far clipping plane for the camera"))
      (use_depth_of_field
         bool
         (help "Whether to use depth-of-field effect on platforms that support it")
         (refresh)
      )
      (path
         object
         (class TransAnim)
         (help "Optional camera path to use")
      )
      (anims
         (array object (class Anim))
         (help "animatables to be driven with the same frame")
      )
      (platform_only
         int
         (list ("kPlatformNone" "kPlatformPS3" "kPlatformXbox"))
         (help "Limit this shot to given platform")
      )
      (hide_list
         (array
            object
            (class Draw)
            (obj_flags no_null)
         )
         (help
            "List of objects to hide while this camera shot is active, shows them when done"
         )
      )
      (gen_hide_list
         (array
            object
            (class Draw)
            (obj_flags no_null)
         )
         (help
            "Automatically generated list of objects to hide while this camera shot is active, shows them when done.  Not editable"
         )
         (read_only 1)
      )
      (show_list
         (array
            object
            (class Draw)
            (obj_flags no_null)
         )
         (help
            "List of objects to show while this camera shot is active, hides them when done"
         )
      )
      (draw_overrides
         (array object (class Draw))
         (help "List of objects to draw in order instead of whole world")
      )
      (postproc_overrides
         (array object (class Draw))
         (help "List of objects to draw after post-processing")
      )
      (glow_spot
         object
         (class Spotlight)
         (help "The spotlight to get glow settings from")
      )
      (duration
         float
         (help "duration of the camshot")
         (read_only 1)
      )
      (ps3_per_pixel bool (help "global per-pixel setting for PS3"))
      (disabled
         int
         (help "disabled bits")
         (read_only 1)
         (no_test)
      )
      (crowds
         (array
            (struct
               (crowd
                  object
                  (class WorldCrowd)
                  (help "The crowd to show for this shot")
                  (refresh crowds)
               )
               (crowd_rotate
                  int
                  (list
                     (
                        (
                           "kCrowdRotateNone"
                           "Face along the placement mesh, or along focus, if set"
                        )
                        ("kCrowdRotateFace" "Face towards the camera")
                        ("kCrowdRotateAway" "Face away from the camera")
                     )
                  )
                  (help "How to rotate crowd")
               )
               ('set 3D crowd'
                  script
                  (script {$this set_3d_crowd {elem $milo_prop_path 1}})
                  (help "Sets the selected crowd characters to be 3D for this shot")
                  (read_only {! {$this get (crowds {elem $milo_prop_path 1} crowd)}})
               )
               ('add 3D crowd'
                  script
                  (script {$this add_3d_crowd {elem $milo_prop_path 1}})
                  (help "Adds the selected crowd characters to be 3D for this shot")
                  (read_only {! {$this get (crowds {elem $milo_prop_path 1} crowd)}})
               )
               ('clear 3D crowd'
                  script
                  (script {$this clear_3d_crowd {elem $milo_prop_path 1}})
                  (help "Clears the list of 3D crowd characters for this shot")
                  (read_only {! {$this get (crowds {elem $milo_prop_path 1} crowd)}})
               )
               ('set all to 3D'
                  script
                  (script {$this set_all_to_3D {elem $milo_prop_path 1}})
                  (help "Sets all crowd characters to 3D for this shot")
                  (read_only {! {$this get (crowds {elem $milo_prop_path 1} crowd)}})
               )
            )
         )
      )
      ('gen hide list'
         script
         (script
            {if {exists milo}
               {milo record $this gen_hide_list}
            }
            {$this gen_hide_list}
         )
         (refresh hide_list)
         (help "Append occluded objects to this cam shot's hide list")
      )
      ('clear hide list'
         script
         (script
            {if {exists milo}
               {milo record $this clear_hide_list}
            }
            {$this clear_hide_list}
         )
         (refresh hide_list)
         (help "Clear this cam shot's hide list")
      )
   )
   (anim_props (path_frame float (range 0 1)))
   (types)
   (superclasses Anim)
   (init {$this set category NORMAL})
)
(WorldReflection
   (description "Reflects all drawables in draws.")
   (allowed_dirs RndDir)
   (superclasses Draw Trans)
   (ext refl)
   (editor
      (draws
         (array object (class Draw))
         (help "things to draw in the reflection, in this order")
      )
      (vertical_stretch float (help "How far to stretch vertically"))
      (lod_chars
         (array
            object
            (class Character)
            (obj_flags no_null)
         )
         (help "Set LOD to 1 on these reflected characters")
      )
      (hide_list
         (array
            object
            (class Draw)
            (obj_flags no_null)
         )
         (help
            "List of objects to hide in the reflection, shows them when reflection has finished drawing."
         )
      )
      (show_list
         (array
            object
            (class Draw)
            (obj_flags no_null)
         )
         (help
            "List of objects to show in the reflection, hides them when reflection has finished drawing."
         )
      )
   )
   (types)
)
(ColorPalette
   (description "List of primary/secondary colors for OutfitConfig")
   (allowed_dirs RndDir)
   (types)
   (ext pal)
   (editor
      (colors
         (array color (help "Color for materials"))
         (post_sync {palette_sync $this})
      )
   )
)
(BandLabel
   (description "Label with color presets")
   (allowed_dirs PanelDir)
   (superclasses UILabel)
   (ext lbl)
   (init {set [resource_name] "default"})
   (editor
      (in_anim
         object
         (class Anim)
         (help "anim used before label change")
      )
      (out_anim
         object
         (class Anim)
         (help "anim used after label change")
      )
   )
   (types
      (dev
         (resource_file "../ui/label.milo")
         (allow_edit_text 1)
      )
   )
   (resources_path "../ui/resource/fonts/")
)
(BandButton
   (description "Button with app-specific features")
   (allowed_dirs)
   (superclasses UIButton)
   (init {set [resource_name] "default"})
   (types (default (resource_file "../ui/button.milo")))
   (focus_anim_duration 0.10)
   (ext btn)
   (editor)
   (resources_path "../ui/resource/fonts/")
)
(BandHighlight
   (description "Special highlight bar that chases the focus component")
   (allowed_dirs PanelDir)
   (superclasses UIComponent)
   (ext hlit)
   (init {$this set_type default})
   (types
      (default
         (resource_file "highlight.milo")
         (anim_duration 0.10)
         (meshes
            ("highlight.mesh"
               (normal "normal.mat")
               (focused "normal.mat")
               (disabled "disabled.mat")
            )
         )
      )
   )
)
(BandRetargetVignette
   (description "Handles Retargetting IK in a vignette")
   (allowed_dirs ObjectDir)
   (superclasses Poll)
   (ext brv)
   (editor
      (effectors
         (array string)
         (help "All the effectors needed by the scene")
         (read_only 1)
      )
      (player
         symbol
         (list (player0 player1 player2 player3))
         (help "Player to create effector for")
      )
      (bone
         symbol
         (list
            (bone_pelvis
               bone_L-ankle
               bone_R-ankle
               bone_L-foreArm
               bone_L-hand
               bone_R-foreArm
               bone_R-hand
               bone_prop0
               bone_prop1
               bone_prop2
               bone_prop3
               bone_head
            )
         )
         (help "bone on player to create/edit effector for")
      )
      (create_player_ik
         script
         (script
            {do
               ($name {sprint [player] "_" [bone] ".ikf"})
               ($obj {find_obj {$this dir} $name})
               {unless $obj
                  {set $obj {new BandIKEffector}}
                  {$obj set_name $name {$this dir}}
               }
               {unless {$obj size (constraints)}
                  {$obj insert (constraints 0) 0}
               }
               {milo update_objects}
               {milo edit $obj "BandIKEffector"}
            }
         )
         (help "Create/edit the effector for [player] and [bone]")
         (refresh effectors)
      )
      (prop
         object
         (class Trans)
         (help "prop object/bone in scene to constrain")
      )
      (create_prop_ik
         script
         (script
            {if_else [prop]
               {do
                  ($name {sprint {file_get_base {[prop] name}} ".ikf"})
                  ($obj {find_obj {$this dir} $name})
                  {unless $obj
                     {set $obj {new BandIKEffector}}
                     {$obj set_name $name {$this dir}}
                  }
                  {unless {$obj size (constraints)}
                     {$obj insert (constraints 0) 0}
                  }
                  {$obj set (constraints 0 weight) 0}
                  {$obj set effector [prop]}
                  {milo update_objects}
                  {milo edit $obj "BandIKEffector"}
               }
               {notify "Can not create a prop BandIKEffector with no [prop] set!"}
            }
         )
         (help "Create/edit the effector for [prop]")
         (refresh effectors)
      )
   )
   (types)
)
(BandIKEffector
   (description "Does IK on end effectors and props")
   (allowed_dirs ObjectDir)
   (superclasses CharPollable CharWeightable)
   (ext ikf)
   (editor
      (effector
         object
         (class Trans)
         (help "The character end effector or prop to be constrained.")
      )
      (constraints
         (array
            (struct
               (target
                  object
                  (class Trans)
                  (help
                     "The thing the [effector] will keep relative xfm to, or absolute xfm if weight <= 0."
                  )
               )
               (weight
                  float
                  (help
                     "Relative weight for this constraint, is same as radius in feet of full effect.  If zero or negative [effector] will be constrained directly to the [target]"
                  )
               )
            )
         )
      )
      (ground
         object
         (class Trans)
         (help "for pelvis/feet specifies a ground plane height")
      )
      (elbow
         object
         (class BandIKEffector)
         (help "If hand, pointer to elbow object")
      )
      (more
         object
         (class BandIKEffector)
         (help "More constraints to evaluate")
      )
   )
   (types)
)
(PlayerDiffIcon
   (description "Overloaded player/difficulty display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext pdiff)
   (editor
      (num_players
         int
         (range 0 4)
         (help "Number of players")
      )
      (diff
         int
         (range 0 3)
         (help "Difficulty")
      )
   )
   (types
      (default
         (resource_file "resource/fonts/chapter_diff_icons.milo")
         (player_meshes "01.mesh" "02.mesh" "03.mesh" "04.mesh")
         (player_mat "player.mat")
         (no_player_mat "player_none.mat")
         (diff_labels "easy.lbl" "medium.lbl" "hard.lbl" "expert.lbl")
      )
   )
   (init {$this set_type default})
)
(InstrumentDifficultyDisplay
   (description "Song Instrument Difficulty Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext idd)
   (editor
      (has_part bool (help "whether or not instrument has a part to play"))
      (instrument_state
         int
         (list ("kIddHidden" "kIddName" "kIddIcon"))
         (help "how the instrument should be shown")
      )
      (difficulty
         int
         (range 0 6)
         (help "Difficulty")
      )
      (num_vocal_parts
         int
         (range 0 3)
         (help "Number of vocal parts")
      )
      (instrument_type
         symbol
         (list
            (drum
               bass
               guitar
               vocals
               harmony
               keys
               real_guitar
               real_bass
               real_drum
               real_keys
               band
            )
         )
         (help "Type of instrument")
      )
      (instrument_color_override
         object
         (class UIColor)
         (help "Instrument color override for this instance")
      )
   )
   (types
      (default
         (resource_file "resource/instrument_difficulty_display.milo")
         (difficulty_anim "difficulty.anim")
         (vocal_part_mesh "vocal_part.mesh")
         (vocal_part1_mat "vocal_part1.mat")
         (vocal_part2_mat "vocal_part2.mat")
         (vocal_part3_mat "vocal_part3.mat")
         (instrument_label "instrument.lbl")
         (instrument_icon "instrument_icon.lbl")
         (get_track_type_sym
            {if_else {== [instrument_type] real_drum}
               drum
               [instrument_type]
            }
         )
         (get_inst_icon
            {if_else {exists song_mgr}
               {if_else {== [instrument_type] real_drum}
                  {get_font_char_from_score_type 6}
                  {if_else {== [instrument_type] harmony}
                     {do
                        ($num_vocal_parts {$this get num_vocal_parts})
                        {cond
                           ({== $num_vocal_parts 2}
                              {elem
                                 {find $syscfg instrument_icons harmony_2}
                                 1
                              }
                           )
                           ({== $num_vocal_parts 3}
                              {elem
                                 {find $syscfg instrument_icons harmony_3}
                                 1
                              }
                           )
                           {elem
                              {find $syscfg instrument_icons harmony_3}
                              1
                           }
                        }
                     }
                     {cnv_instrumenttoicon [instrument_type]}
                  }
               }
               "G"
            }
         )
         (set_rank
            ($rank)
            {if_else {== $rank 0}
               {do
                  {$this set has_part 0}
                  {$this set num_vocal_parts 0}
               }
               {do
                  ($track_type {$this get_track_type_sym})
                  {$this set has_part 1}
                  {if_else {== $track_type harmony}
                     {if_else {< {$this get num_vocal_parts} 2}
                        {$this set has_part 0}
                        {$this set
                           difficulty
                           {song_mgr rank_tier $rank vocals}
                        }
                     }
                     {$this set
                        difficulty
                        {song_mgr rank_tier $rank $track_type}
                     }
                  }
               }
            }
         )
         (set_song
            ($song)
            {$this set has_part 0}
            {$this set num_vocal_parts 0}
            {do
               ($real_track_type_sym {$this get_track_type_sym})
               ($track_type_sym $real_track_type_sym)
               {if {== $real_track_type_sym harmony}
                  {set $track_type_sym vocals}
               }
               {if
                  {&&
                     {exists song_mgr}
                     {song_mgr part_plays_in_song $song $track_type_sym}
                  }
                  {$this set has_part 1}
                  {$this set
                     difficulty
                     {song_mgr rank_tier_for_song $song $track_type_sym}
                  }
                  {if {== $real_track_type_sym harmony}
                     {$this set num_vocal_parts {song_mgr num_vocal_parts $song}}
                     {if {<= {$this get num_vocal_parts} 1}
                        {$this set has_part 0}
                     }
                  }
               }
            }
         )
         (set_setlist
            {if {exists song_mgr}
               {do
                  ($highest_difficulty -1)
                  ($most_vocal_parts 0)
                  ($has_part 0)
                  {foreach_int $i 0 {meta_performer num_songs}
                     {do
                        ($track_type_sym {$this get_track_type_sym})
                        ($song {meta_performer indexed_song $i})
                        ($difficulty {song_mgr rank_tier_for_song $song $track_type_sym})
                        ($num_vocal_parts 0)
                        {if {song_mgr part_plays_in_song $song $track_type_sym}
                           {set $has_part 1}
                        }
                        {if {> $difficulty $highest_difficulty}
                           {set $highest_difficulty $difficulty}
                        }
                        {if {== $track_type_sym vocals}
                           {set $num_vocal_parts {song_mgr num_vocal_parts $song}}
                           {if {> $num_vocal_parts $most_vocal_parts}
                              {set $most_vocal_parts $num_vocal_parts}
                           }
                        }
                     }
                  }
                  {$this set difficulty $highest_difficulty}
                  {$this set has_part $has_part}
                  {if_else {== {$this get_track_type_sym} vocals}
                     {$this set num_vocal_parts $most_vocal_parts}
                     {$this set num_vocal_parts 0}
                  }
               }
            }
         )
      )
   )
   (init {$this set_type default})
)
(StarDisplay
   (description "Star Display (used for showing stars in different formats)")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext sd)
   (editor
      (force_mixed_mode bool (help "whether or not to force mixed mode (X/Y *)"))
      (show_empty_stars bool (help "whether or not to show empty stars"))
      (show_denominator
         bool
         (help "whether or not to denominator (when applicable)")
      )
      (stars int (help "Current Stars"))
      (total_stars int (help "Total Stars"))
      (alignment
         int
         (list
            (
               "kTopLeft"
               "kTopCenter"
               "kTopRight"
               "kMiddleLeft"
               "kMiddleCenter"
               "kMiddleRight"
               "kBottomLeft"
               "kBottomCenter"
               "kBottomRight"
            )
         )
         (help "star alignment")
      )
      (icon_override
         symbol
         (help "Single-character icon symbol in place of star")
      )
      (empty_icon_override
         symbol
         (help "Single-character icon symbol in place of empty star")
      )
   )
   (anim_props
      (float_stars float (help "Float Stars"))
      (float_total_stars float (help "Float Total Stars"))
   )
   (types
      (default
         (resource_file "resource/star_display.milo")
         (resource_stars_label "stars.lbl")
         (resource_stars_mixed_label "stars_mixed.lbl")
      )
      (music_library
         (resource_file "resource/star_display_ml.milo")
         (resource_stars_label "stars.lbl")
         (resource_stars_mixed_label "stars_mixed.lbl")
      )
      (music_library_header
         (resource_file "resource/star_display_mlhead.milo")
         (resource_stars_label "stars.lbl")
         (resource_stars_mixed_label "stars_mixed.lbl")
      )
   )
   (init {$this set_type default})
)
(ScoreDisplay
   (description "Score Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext scr)
   (editor
      (score int (help "Score"))
      (rank int (help "Rank"))
      (globally bool (help "Globally? (vs Friends)"))
      (text_color object (class UIColor))
   )
   (types
      (default
         (resource_file "resource/score_display.milo")
         (combined_label "combined.lbl")
      )
      (endgame
         (resource_file "resource/score_display_endgame.milo")
         (combined_label "combined.lbl")
      )
      (left_aligned
         (resource_file "resource/score_display_left.milo")
         (combined_label "combined.lbl")
      )
      (battle
         (resource_file "resource/score_display_battle.milo")
         (combined_label "combined.lbl")
      )
      (center_aligned
         (resource_file "resource/score_display_center.milo")
         (combined_label "combined.lbl")
      )
      (leaderboard_default
         (resource_file "resource/leaderb_score_display.milo")
         (combined_label "combined.lbl")
      )
      (leaderboard_left_aligned
         (resource_file "resource/leaderb_score_display_left.milo")
         (combined_label "combined.lbl")
      )
      (leaderboard_center_aligned
         (resource_file "resource/leaderb_score_display_center.milo")
         (combined_label "combined.lbl")
      )
   )
   (init {$this set_type default})
)
(ReviewDisplay
   (description "Review Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext rvw)
   (editor (score int (help "Score")))
   (types
      (default
         (resource_file "resource/review_display.milo")
         (review_anim "review.anim")
         (focus_anim "focus.anim")
      )
   )
   (init {$this set_type default})
)
(ScrollbarDisplay
   (description
      "Scrollbar Display (used for showing a scrollbar associated with a list)"
   )
   (allowed_dirs)
   (superclasses UIComponent)
   (ext sbd)
   (editor
      (scrollbar_list
         object
         (class UIList)
         (help "list used to control scrollbar")
         (refresh scrollbar_height)
      )
      (scrollbar_height
         float
         (help "Height of scrollbar (ignored if list attached)")
         (read_only [list_attached])
      )
      (always_show
         bool
         (help "whether or not to show when there is no scrolling")
      )
      (list_attached
         bool
         (help "whether or not to attach to the list")
         (no_test)
         (refresh scrollbar_height list_x_offset list_y_offset)
      )
      (list_x_offset
         float
         (help "X Offset from list (ignored if list not attached)")
         (read_only {! [list_attached]})
      )
      (list_y_offset
         float
         (help "Y Offset from list (ignored if list not attached)")
         (read_only {! [list_attached]})
      )
      (min_thumb_height float (help "Minimum height for thumb"))
   )
   (types
      (default
         (resource_file "resource/scrollbar_display.milo")
         (thumb_group "thumb.grp")
         (top_bone "scrollbar_bg_bone_top.mesh")
         (bottom_bone "scrollbar_bg_bone_bottom.mesh")
         (thumb_top_bone "scrollbar_bone_top.mesh")
         (thumb_bottom_bone "scrollbar_bone_bottom.mesh")
      )
      (accomplishments
         (resource_file "resource/scrollbar_accomplishments.milo")
         (thumb_group "thumb.grp")
         (top_bone "scrollbar_bg_bone_top.mesh")
         (bottom_bone "scrollbar_bg_bone_bottom.mesh")
         (thumb_top_bone "scrollbar_bone_top.mesh")
         (thumb_bottom_bone "scrollbar_bone_bottom.mesh")
      )
   )
   (init {$this set_type default})
)
(DialogDisplay
   (description "Dialog Display (controls bones associated with a label)")
   (allowed_dirs RndDir)
   (superclasses Poll)
   (ext dd)
   (editor
      (dialog_label
         object
         (class UILabel)
         (help "label used to control dialog bones")
      )
      (top_bone
         object
         (class Mesh)
         (help "top bone used to adjust dialog size")
      )
      (bottom_bone
         object
         (class Mesh)
         (help "bottom bone used to adjust dialog size")
      )
   )
   (types)
)
(CheckboxDisplay
   (description "Checkbox Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext chk)
   (editor (checked bool (help "If box is checked or not")))
   (types
      (default
         (resource_file "resource/checkbox_display.milo")
         (check_mesh "check.mesh")
      )
   )
   (init {$this set_type default})
)
(MeterDisplay
   (description "Meter Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext md)
   (editor
      (show_text bool (help "whether or not to show text"))
      (percentage_text
         bool
         (help "whether or not to show text in percentage form")
         (refresh hide_denominator)
      )
      (hide_denominator
         bool
         (help "whether or not to hide denominator")
         (read_only [percentage_text])
      )
      (wrapper_text symbol (help "Localization token to use for wrapper"))
      (current_value int (help "current value of meter"))
      (max_value int (help "max value of meter"))
      (anim_period float (help "length of value change animation, in seconds"))
   )
   (types
      (default
         (resource_file "resource/meter_display.milo")
         (meter_label "meter.lbl")
         (meter_anim "meter.anim")
      )
      (simple_text
         (resource_file "resource/meter_display_text.milo")
         (meter_label "meter.lbl")
         (meter_anim "meter.anim")
      )
      (campaign_hub
         (resource_file "resource/campaign_hubmeter.milo")
         (meter_label "meter_complete.lbl")
         (meter_anim "meter.anim")
      )
      (campaign_widget
         (resource_file "resource/campaign_widget.milo")
         (meter_label "meter_progress.lbl")
         (meter_anim "meter.anim")
      )
      (campaign
         (resource_file "resource/campaign_topmeter.milo")
         (meter_label "meter_progress.lbl")
         (meter_anim "meter.anim")
         (enter {{{$this get_resource_dir} find "start.trig"} trigger})
      )
      (content_loading
         (resource_file "resource/content_loading_meter.milo")
         (meter_anim "meter.anim")
      )
   )
   (init {$this set_type default})
)
(MiniLeaderboardDisplay
   (description "Mini Leaderboard Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext mld)
   (editor
      (allow_solo_scores
         bool
         (help "whether or not solo scores should be displayed when appropriate")
      )
   )
   (types
      (default
         (resource_file "resource/mini_leaderboard_display.milo")
         (title_label "title.lbl")
         (icons_label "")
         (leaderboard "leaderboard.lst")
         (reset_trigger "")
         (fade_in_trigger "")
         (fade_out_trigger "")
         (pending_group "")
      )
   )
   (init {$this set_type default})
)
(P9TexMesh
   (description "Dynamic Texture Mesh")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext ptm)
   (editor
      (tex_file
         file
         (help "The default tex, and the one for previewing in Milo.")
      )
   )
   (types
      (default
         (resource_file "resource/p9_tex_mesh.milo")
         (mesh "Mesh.mesh")
         (mat "Mat.mat")
         (tex "Tex.tex")
      )
   )
   (init {$this set_type default})
)
(MicInputArrow
   (description "Mic Input Arrow")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext mia)
   (editor
      (test_connect
         script
         (script
            {$this set_mic_connected 1 0}
            {$this set_mic_connected 1 1}
            {$this set_mic_connected 1 2}
         )
      )
      (test_disconnect
         script
         (script
            {$this set_mic_connected 0 0}
            {$this set_mic_connected 0 1}
            {$this set_mic_connected 0 2}
         )
      )
      (test_hidden
         script
         (script
            {$this set_mic_hidden 0}
            {$this set_mic_hidden 1}
            {$this set_mic_hidden 2}
         )
      )
      (test_preview
         script
         (script
            {$this set_mic_preview 0}
            {$this set_mic_preview 1}
            {$this set_mic_preview 2}
         )
      )
      (test_extended
         script
         (script
            {$this set_mic_extended 0}
            {$this set_mic_extended 1}
            {$this set_mic_extended 2}
         )
      )
   )
   (types
      (default
         (resource_file "resource/mic_input_arrow.milo")
         (connected_triggers
            "0_connected.trig"
            "1_connected.trig"
            "2_connected.trig"
         )
         (disconnected_triggers
            "0_disconnected.trig"
            "1_disconnected.trig"
            "2_disconnected.trig"
         )
         (hidden_triggers "0_hidden.trig" "1_hidden.trig" "2_hidden.trig")
         (preview_triggers "0_preview.trig" "1_preview.trig" "2_preview.trig")
         (extended_triggers "0_extended.trig" "1_extended.trig" "2_extended.trig")
         (level_anims "0_miclevel.anim" "1_miclevel.anim" "2_miclevel.anim")
         (mic_energy_normalizer 2.00)
      )
   )
   (init {$this set_type default})
)
(InlineHelp
   (description "Inline Help")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext ihp)
   (editor
      (horizontal bool)
      (spacing float)
      (config
         (array
            (struct
               (action
                  int
                  (list
                     (
                        "kAction_None"
                        "kAction_Confirm"
                        "kAction_Cancel"
                        "kAction_Option"
                        "kAction_Start"
                        "kAction_ViewModify"
                        "kAction_Up"
                        "kAction_Right"
                        "kAction_Down"
                        "kAction_Left"
                        "kAction_PageUp"
                        "kAction_PageDown"
                        "kAction_ExtendedOption1"
                        "kAction_ExtendedOption2"
                        "kAction_ShellOption"
                        "kAction_WiiHomeMenu"
                     )
                  )
               )
               (text_token symbol)
               (secondary_token symbol)
            )
         )
      )
      (text_color object (class UIColor))
      (use_connected_controllers
         bool
         (help
            "Use all connected controllers for button icon, rather than just joined (rare)"
         )
      )
   )
   (types
      (default
         (resource_file "resource/inline_help.milo")
         (text_label "text.lbl")
         (action_chars
            (vocals "" "A" "B" "Y" "S" "s" "" "" "" "" "" "R" "" "" "X")
            (guitar "" "g" "r" "y" "S" "s" "G" "" "G" "" "" "o" "" "" "b")
            (drums "" "A" "B" "Y" "S" "s" "" "" "" "" "" "F" "" "" "X")
            (keys "" "A" "B" "Y" "S" "s" "" "" "" "" "" "O" "" "" "X")
            (real_guitar "" "A" "B" "Y" "S" "s" "" "" "" "" "" "" "" "" "X")
         )
      )
      (start_button
         (resource_file "resource/inline_help_start_large.milo")
         (text_label "text.lbl")
         (action_chars
            (vocals "" "A" "B" "Y" "S" "s" "" "" "" "" "" "R" "" "" "X")
            (guitar "" "g" "r" "y" "S" "s" "G" "" "G" "" "" "o" "" "" "b")
            (drums "" "A" "B" "Y" "S" "s" "" "" "" "" "" "F" "" "" "X")
            (keys "" "A" "B" "Y" "S" "s" "" "" "" "" "" "" "" "" "X")
            (real_guitar "" "A" "B" "Y" "S" "s" "" "" "" "" "" "" "" "" "X")
         )
      )
      (center
         (resource_file "resource/inline_help_center.milo")
         (text_label "text.lbl")
         (action_chars
            (vocals "" "A" "B" "Y" "S" "s" "" "" "" "" "" "R" "" "" "X")
            (guitar "" "g" "r" "y" "S" "s" "G" "" "G" "" "" "o" "" "" "b")
            (drums "" "A" "B" "Y" "S" "s" "" "" "" "" "" "F" "" "" "X")
            (keys "" "A" "B" "Y" "S" "s" "" "" "" "" "" "" "" "" "X")
            (real_guitar "" "A" "B" "Y" "S" "s" "" "" "" "" "" "" "" "" "X")
         )
      )
      (right
         (resource_file "resource/inline_help_right.milo")
         (text_label "text.lbl")
         (action_chars
            (vocals "" "A" "B" "Y" "S" "s" "" "" "" "" "" "R" "" "" "X")
            (guitar "" "g" "r" "y" "S" "s" "G" "" "G" "" "" "o" "" "" "b")
            (drums "" "A" "B" "Y" "S" "s" "" "" "" "" "" "F" "" "" "X")
            (keys "" "A" "B" "Y" "S" "s" "" "" "" "" "" "" "" "" "X")
            (real_guitar "" "A" "B" "Y" "S" "s" "" "" "" "" "" "" "" "" "X")
         )
      )
   )
   (init {$this set_type default})
)
(BandList
   (description "Band specific UIList")
   (allowed_dirs)
   (superclasses UIList)
   (init {$this set_type default})
   (ext lst)
   (editor
      (focus_anim
         object
         (class TransAnim)
         (help
            "Animation to play on a selected entry to transition into and out of focus"
         )
      )
      (pulse_anim
         object
         (class TransAnim)
         (help
            "Animation to play on a selected entry after focus is played - focus anim must exist"
         )
      )
      (reveal_anim
         object
         (class TransAnim)
         (help "animation to play on each entry when list is revealed")
      )
      (reveal_start_delay float (help "delay before playing reveal animation"))
      (reveal_entry_delay
         float
         (help "delay between list entries playing reveal animation")
      )
      (reveal_scale float (help "amount to scale reveal animation"))
      (reveal_sound
         object
         (class Sequence)
         (help "sound to play on each entry when list is revealed")
      )
      (reveal_sound_delay
         float
         (help "delay for sound to play on each entry when list is revealed")
      )
      (conceal_anim
         object
         (class TransAnim)
         (help "animation to play on each entry when list is concealed")
      )
      (conceal_start_delay float (help "delay before playing conceal animation"))
      (conceal_entry_delay
         float
         (help "delay between list entries playing conceal animation")
      )
      (conceal_scale float (help "amount to scale conceal animation"))
      (conceal_sound
         object
         (class Sequence)
         (help "sound to play on each entry when list is concealed")
      )
      (conceal_sound_delay
         float
         (help "delay for sound to play on each entry when list is concealed")
      )
      (reveal script (script {$this reveal}))
      (conceal script (script {$this conceal}))
      (auto_reveal bool (help "Whether or not to start revealed"))
      (highlight_objects
         (array
            (struct
               (target_object
                  object
                  (class Trans)
                  (help "The object to attach to the highlight")
               )
               (x_offset float (help "x offset from list position"))
               (y_offset float (help "y offset from list position"))
               (z_offset float (help "z offset from list position"))
            )
         )
      )
   )
   (types
      (default (resource_file "../ui/list.milo"))
      (spin (resource_file "resource/list/list_spin.milo"))
      (widespinner (resource_file "resource/list/list_widespinner.milo"))
      (widespinner2 (resource_file "resource/list/list_widespinner2.milo"))
      (practice_section
         (resource_file "resource/list/list_practice_section.milo")
      )
      (practice_sel_speed
         (resource_file "resource/list/list_practice_sel_speed.milo")
      )
      (header_performance
         (resource_file "resource/list/list_header_performance.milo")
      )
      (song_select (resource_file "resource/list/list_song_select_browser.milo"))
      (song_select_setlist
         (resource_file "resource/list/list_song_select_setlist.milo")
      )
      (song_select_setlist_scores
         (resource_file "resource/list/list_song_select_setlist_scores.milo")
      )
      (song_select_shortcut
         (resource_file "resource/list/list_song_select_shortcut.milo")
      )
      (standin_list (resource_file "resource/list/list_standins.milo"))
      (standin_slot_list (resource_file "resource/list/list_standin_slots.milo"))
      (band_history_list (resource_file "resource/list/list_band_history.milo"))
      (store_browser (resource_file "resource/list/list_store_browser.milo"))
      (store_filter (resource_file "resource/list/list_store_filter.milo"))
      (store_shortcut (resource_file "resource/list/list_store_shortcut.milo"))
      (store_info (resource_file "resource/list/list_store_info.milo"))
      (store_song (resource_file "resource/list/list_store_song.milo"))
      (store_song_long (resource_file "resource/list/list_store_song_long.milo"))
      (filter_select (resource_file "resource/list/list_filters.milo"))
      (filter_category
         (resource_file "resource/list/list_filter_categories.milo")
      )
      (tour_song_list (resource_file "resource/list/list_tour_songs.milo"))
      (tourdesc_list (resource_file "resource/list/list_tourdescs.milo"))
      (tour_challenge_list
         (resource_file "resource/list/list_tour_challenges.milo")
      )
      (accomplishmentsongs_instrument_list
         (resource_file "resource/list/list_accomplishmentsong_instruments.milo")
      )
      (accomplishmentsongs_source_list
         (resource_file "resource/list/list_accomplishmentsong_sources.milo")
      )
      (accomplishment_list
         (resource_file "resource/list/list_accomplishments.milo")
      )
      (accomplishment_list_row
         (resource_file "resource/list/list_accomplishments_row.milo")
      )
      (accomplishment_award_list
         (resource_file "resource/list/list_accomplishment_awards.milo")
      )
      (accomplishment_entry_list
         (resource_file "resource/list/list_accomplishment_entry.milo")
      )
      (accomplishment_category_list
         (resource_file "resource/list/list_accomplishment_categories.milo")
      )
      (boutiques_list (resource_file "resource/list/list_boutiques.milo"))
      (campaign_leaderboard_goals_list
         (resource_file "resource/list/list_leaderboard_goals.milo")
      )
      (campaign_leaderboard_career_list
         (resource_file "resource/list/list_leaderboard_career.milo")
      )
      (campaign_leaderboard_goals_choice_list
         (resource_file "resource/list/list_leaderboard_goals_choice.milo")
      )
      (campaign_leaderboard_career_choice_list
         (resource_file "resource/list/list_leaderboard_career_choice.milo")
      )
      (quest_list (resource_file "resource/list/list_quests.milo"))
      (campaign_groups_list
         (resource_file "resource/list/list_campaign_groups.milo")
      )
      (quest_filter_list (resource_file "resource/list/list_quest_filters.milo"))
      (character_list (resource_file "resource/list/list_characters.milo"))
      (overshell_friends
         (resource_file "resource/list/list_overshell_friends.milo")
      )
      (overshell_friends_ingame
         (resource_file "resource/list/list_overshell_friends_ingame.milo")
      )
      (overshell_users (resource_file "resource/list/list_overshell_users.milo"))
      (overshell_users_ingame
         (resource_file "resource/list/list_overshell_users_ingame.milo")
      )
      (overshell_menubig
         (resource_file "resource/list/list_overshell_menubig.milo")
      )
      (overshell_menubig_ingame
         (resource_file "resource/list/list_overshell_menubig_ingame.milo")
      )
      (overshell_menu_keep_highlight
         (resource_file "resource/list/list_overshell_menu_keep_highlight.milo")
      )
      (overshell_menu_keep_highlight_ingame
         (resource_file
            "resource/list/list_overshell_menu_keep_highlight_ingame.milo"
         )
      )
      (overshell_menu
         (resource_file "resource/list/list_overshell_menu.milo")
         (dark "song_disc_dark.mat")
         (light "song_disc_light.mat")
         (mat
            ($data)
            {if_else {== {mod $data 2} 0}
               [dark]
               [light]
            }
         )
      )
      (overshell_menu_ingame
         (resource_file "resource/list/list_overshell_menu_ingame.milo")
      )
      (overshell_modifiers
         (resource_file "resource/list/list_overshell_modifiers.milo")
      )
      (overshell_modifiers_ingame
         (resource_file "resource/list/list_overshell_modifiers_ingame.milo")
      )
      (overshell_part_select
         (resource_file "resource/list/list_overshell_part_select.milo")
      )
      (overshell_part_select_ingame
         (resource_file "resource/list/list_overshell_part_select_ingame.milo")
      )
      (credits (resource_file "resource/list/list_credits.milo"))
      (leaderboards (resource_file "resource/list/list_leaderboards.milo"))
      (leaderboards_shortcut
         (resource_file "resource/list/list_leaderboards_shortcut.milo")
      )
      (mini_leaderboard
         (resource_file "resource/list/list_mini_leaderboard.milo")
      )
      (gamertag (resource_file "resource/list/list_gamertag.milo"))
      (band_chooser (resource_file "resource/list/list_band_chooser.milo"))
      (list_bands (resource_file "resource/list/list_bands.milo"))
      (tourproperties_list
         (resource_file "resource/list/list_tourproperties.milo")
      )
      (gamertag_owner_chooser
         (resource_file "resource/list/list_gamertag_owner_chooser.milo")
      )
      (calibration_mode
         (resource_file "resource/list/list_calibration_mode.milo")
      )
      (character_creator_default
         (resource_file "resource/list/list_character_creator.milo")
      )
      (character_creator_gender
         (resource_file "resource/list/list_character_creator_gender.milo")
      )
      (face_options_list (resource_file "resource/list/list_face_options.milo"))
      (face_options_list_row
         (resource_file "resource/list/list_face_options_row.milo")
      )
      (list_finishes (resource_file "resource/list/list_finishes.milo"))
      (trainers (resource_file "resource/list/list_trainers.milo"))
      (lessons_list (resource_file "resource/list/list_lessons.milo"))
      (tattoos_list (resource_file "resource/list/list_tattoos.milo"))
      (assets_list (resource_file "resource/list/list_assets.milo"))
      (award_assets_list (resource_file "resource/list/list_award_assets.milo"))
      (patch_select (resource_file "resource/list/list_patch.milo"))
      (patch_select_row (resource_file "resource/list/list_patch_row.milo"))
      (sticker (resource_file "resource/list/list_sticker.milo"))
      (sticker_row (resource_file "resource/list/list_sticker_row.milo"))
      (layer (resource_file "resource/list/list_layer.milo"))
      (category (resource_file "resource/list/list_category.milo"))
      (main_hub_messages
         (resource_file "resource/list/list_main_hub_messages.milo")
      )
      (trainer_section_select
         (resource_file "resource/list/list_trainer_section_select.milo")
      )
      (band_members (resource_file "resource/list/list_bandinfo_members.milo"))
      (band_roster (resource_file "resource/list/list_bandinfo_roster.milo"))
      (potential_band_members
         (resource_file "resource/list/list_bandinfo_potential_members.milo")
      )
      (music_store_storefront
         (resource_file "resource/list/list_store_storefront.milo")
      )
      (token_redemption_ps3
         (resource_file "resource/list/list_token_redemption_ps3.milo")
      )
   )
)
(BandSwatch
   (description "Special list for selecting colors")
   (allowed_dirs PanelDir)
   (superclasses UIList)
   (init {$this set_type default})
   (ext lst)
   (editor
      (color_palette
         object
         (class ColorPalette)
         (help "Palette containing our color options")
      )
   )
   (types (default (resource_file "swatch.milo")))
)
(Label3d
   (description "3d label")
   (superclasses Trans Draw)
   (ext lbl3d)
   (editor
      (text string (help "string to turn into 3d text"))
      (localize bool (help "Try to localize text"))
      (resource file (help "milo file with letter objects"))
      (max_width
         float
         (help "when length is greater than this value, start scaling the phrase")
      )
      (all_caps bool (help "You know you make me want to SHOUT!"))
      (jitter
         (indent
            (jitter_depth float (help "jitter each letter in depth"))
            (jitter_height float (help "jitter each letter in height"))
         )
      )
   )
   (types)
)
(BandCamShot
   (description "Band specific camera shot")
   (superclasses CamShot)
   (allowed_dirs WorldDir)
   (ext shot)
   (editor
      (targets
         (array
            (struct
               (target
                  symbol
                  (list {$this list_targets})
                  (refresh targets)
                  (help "Symbolic name of target")
                  (no_cdb)
               )
               (target_ptr
                  object
                  (class Trans)
                  (read_only 1)
                  (help "pointer to target")
                  (no_cdb)
               )
               (anim_group
                  symbol
                  (list {$this list_anim_groups [targets {elem $milo_prop_path 1} target]})
                  (help "CharClipGroup to play on character")
                  (no_test)
               )
               (teleport bool (help "do we teleport this character?"))
               (to
                  (struct
                     (pitch float)
                     (roll float)
                     (yaw float)
                     (x_scale float)
                     (y_scale float)
                     (z_scale float)
                     (x float)
                     (y float)
                     (z float)
                  )
                  (help "the transform to teleport the character to")
               )
               (return bool (help "return to original position after shot?"))
               (force_lod
                  int
                  (list ("kLODPerFrame" "kLOD0" "kLOD1" "kLOD2"))
                  (help
                     "Forces LOD, kLODPerFrame is normal behavior of picking per frame, the others force the lod (0 is highest res lod, 2 is lowest res lod)"
                  )
               )
               (self_shadow bool (help "should character cast a self shadow"))
               (hide bool (help "should the target be hidden"))
               (fast_forward
                  float
                  (help "Fast forward chosen animation by this time, in camera units")
               )
               (forward_event
                  symbol
                  (help "Event to fastforward relative to")
                  (list (freeze))
               )
               (env_override
                  object
                  (class Environ)
                  (help "environment override for this target during this shot")
               )
            )
            (header
               {sprint
                  [targets {elem $milo_prop_path 1} target]
                  " - "
                  [targets {elem $milo_prop_path 1} anim_group]
               }
            )
         )
      )
      (zero_time float (help "synchronization time for this camshot"))
      (min_time
         int
         (help
            "30fps reg: minimum time this shot can last, DCuts: time past zero time in which the shot can be interupted"
         )
      )
      (max_time int (help "30fps maximum duration for this shot, 0 is infinite"))
      (anims_during_nextshots
         bool
         (help
            "if checked, anims hooked into this shot will continue to update during its next_shots.
This allows you to author an animation that spans the current and all next shots"
         )
      )
      (next_shots
         (array object (list {$this allowable_next_shots}))
         (help "Next camshots, in order")
      )
      (total_duration
         float
         (help "total duration of this camera plus all next shots")
         (read_only 1)
      )
      (store script (script {$this store}))
      (view
         script
         (script {$this view})
         (help
            "teleports all the targets and starts playing their animations again"
         )
      )
      (view_freeze
         script
         (script {$this view_freeze})
         (help "teleports all the targets and freezes on the first frame")
      )
      (freeze
         script
         (script
            {if {exists milo}
               {milo set_anim_paused 1}
            }
            {$this freeze}
         )
         (help "Freezes any characters in their current state")
      )
   )
   (types
      (band
         (editor
            (flags
               (struct
                  (BIT_kBCSBFacingNull
                     bool
                     (post_sync {$this radio 4096 28672})
                     (help "no facing, center facing, or behind")
                     (refresh flags)
                     (alias facing_null)
                  )
                  (BIT_kBCSBFacingLeft
                     bool
                     (post_sync {$this radio 8192 28672})
                     (help "shot from the left")
                     (refresh flags)
                     (alias facing_left)
                  )
                  (BIT_kBCSBFacingRight
                     bool
                     (post_sync {$this radio 16384 28672})
                     (help "shot from the right")
                     (refresh flags)
                     (alias facing_right)
                  )
                  (BIT_kValidMale
                     bool
                     (help "valid shot for male")
                     (alias valid_male)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kValidFemale
                     bool
                     (help "valid shot for female")
                     (alias valid_female)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kValidBanger
                     bool
                     (help "valid shot for banger")
                     (alias valid_banger)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kValidDramatic
                     bool
                     (help "valid shot for dramatic")
                     (alias valid_dramatic)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kValidRocker
                     bool
                     (help "valid shot for rocker")
                     (alias valid_rocker)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kValidSpazz
                     bool
                     (help "valid shot for spazz")
                     (alias valid_spazz)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kBCSBBassFocus
                     bool
                     (help "does this shot focus on bass")
                     (alias bass_focus)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kBCSBDrumFocus
                     bool
                     (help "does this shot focus on drums")
                     (alias drum_focus)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kBCSBGuitarFocus
                     bool
                     (help "does this shot focus on guitar")
                     (alias guitar_focus)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kBCSBMicFocus
                     bool
                     (help "does this shot focus on vocals")
                     (alias vocal_focus)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kBCSBKeyboardFocus
                     bool
                     (help "does this shot focus on keyboard")
                     (alias keyboard_focus)
                     (hide {! {has_substr [category] "directed_"}})
                  )
                  (BIT_kBCSBCoopBG
                     bool
                     (help "valid for coop_bg")
                     (alias valid_bg)
                  )
                  (BIT_kBCSBCoopBK
                     bool
                     (help "valid for coop_bk")
                     (alias valid_bk)
                  )
                  (BIT_kBCSBCoopGK
                     bool
                     (help "valid for coop_gk")
                     (alias valid_gk)
                  )
               )
            )
            (crowd_density
               float
               (range 0 1)
               (help "density of crowd")
            )
            (crowd_lod
               int
               (range 0 2)
               (help "LOD of crowd texture (0 =  256x512) (1 = 128x256) (2 = 64x128)")
            )
            (crowd_face_camera bool (help "Whether the crowd should face the camera"))
            (crowd_anim
               symbol
               (list
                  (bad
                     great
                     idle
                     ok
                     carry_surfer
                     crowd_reaching
                     crowdlove
                     headbang
                     realtime_idle
                     intro_specific
                  )
               )
               (help "Crowd animation to play, overrides normal excitement level")
            )
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use for this shot")
            )
            (lighting_preset
               object
               (class LightPreset)
               (help
                  "light preset to fire for this camera only, only use in special cases, lighting override must be on, goes back to normal lighting when the shot is done!"
               )
            )
            (lighting_preset_fade_in
               float
               (help "fade in time for the forced lighting preset")
            )
            (lighting_preset_fade_out
               float
               (help "fade out time for the forced lighting preset")
            )
            (worst
               bool
               (help "When using -worst_only with venuetest, only looks at these shots")
            )
         )
         (shot_ok
            ($prev_shot)
            {if_else $banddirector
               {$this test_delta $shot_ok.delta_30fps}
               1
            }
         )
         (start_shot
            {if $banddirector
               {$banddirector set cam_postproc [postprocess]}
               {unless {$banddirector get disable_picking}
                  {if [lighting_preset]
                     {$banddirector force_preset [lighting_preset] [lighting_preset_fade_in]}
                  }
               }
            }
            {if $bandwardrobe
               {$bandwardrobe start_venue_shot $this}
            }
            {foreach_int $idx 0 {size [crowds]}
               {do
                  ($crowd [crowds $idx crowd])
                  {if $crowd
                     {$crowd override_anim [crowd_anim]}
                     {$crowd crowd_update}
                     {$crowd set rotate [crowd_face_camera]}
                     {$crowd set_fullness [crowd_density] [crowd_density]}
                     {$crowd set lod [crowd_lod]}
                  }
               }
            }
         )
         (update_overlay)
         (play_group
            ($char $grp $fwd $units $event)
            {if_else {|| {== {$char get_type} extras} {== {$char get_type} crowd}}
               {if $grp
                  {{$char find main.drv} play_group $grp {| 2 64}}
               }
               {$char play_group $grp 1 0 $fwd $units $event}
            }
         )
         (shot_over
            {if $banddirector
               {$banddirector shot_over $this}
               {if {exists game}
                  {switch [category]
                     (
                        (LOSE WIN WIN_QUICK WIN_FINALE)
                        {handle (game game_outro)}
                     )
                     (
                        (INTRO_VENUE INTRO_QUICK INTRO_MULTI)
                        {$banddirector pick_new_shot}
                     )
                     (
                        (OUTRO_MULTI OUTRO)
                        {$banddirector set_dircut [category]}
                     )
                  }
               }
            }
         )
         (stop_shot
            {if $banddirector
               {$banddirector set cam_postproc {object ""}}
               {if [lighting_preset]
                  {$banddirector force_preset  [lighting_preset_fade_out]}
               }
            }
         )
         (teleport_char
            ($char $ret)
            {unless {|| {== {$char get_type} extras} {== {$char get_type} crowd}}
               {$char cam_teleport $ret}
            }
         )
         (find_target
            ($targ $anonymous)
            {if_else $bandwardrobe
               {if_else $anonymous
                  {$bandwardrobe find_target $targ}
                  {$bandwardrobe find_target $targ $this}
               }
               kDataUnhandled
            }
         )
         (list_targets
            {do
               ($list {object_list {$this dir} Trans 1})
               {if $bandwardrobe
                  {$bandwardrobe sort_targets $list}
               }
               {foreach $p (player0 player1 player2 player3)
                  {remove_elem $list $p}
               }
               {insert_elems
                  $list
                  1
                  (player_bass0 player_drum0 player_guitar0 player_vocals0 player_keyboard0)
               }
               $list
            }
         )
         (list_anim_groups
            ($targ)
            {if_else $bandwardrobe
               {do
                  {set $res
                     {$bandwardrobe list_venue_anim_groups $targ $this}
                  }
                  {if_else {== {type $res} 0}
                     kDataUnhandled
                     $res
                  }
               }
               kDataUnhandled
            }
         )
         (free_dircuts
            (directed_bass_cls
               directed_guitar_cls
               directed_drums_lt
               directed_drums_kd
               directed_all_lt
               directed_crowd
            )
         )
         (dircut_limits)
         (worst 0)
         (postprocess {object})
         (crowd_density 1)
         (crowd_lod 0)
         (crowd_face_camera 0)
         (crowd_anim)
         (lighting_preset {object})
         (lighting_preset_fade_in 0)
         (lighting_preset_fade_out 0)
      )
      (band3
         (editor
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use for this shot")
            )
            (crowd_density
               float
               (range 0 1)
               (help "density of crowd")
            )
            (crowd_lod
               int
               (range 0 2)
               (help "LOD of crowd texture (0 =  256x512) (1 = 128x256) (2 = 64x128)")
            )
            (crowd_face_camera bool (help "Whether the crowd should face the camera"))
            (lighting_preset
               object
               (class LightPreset)
               (help
                  "light preset to fire for this camera only, only use in special cases, lighting override must be on, goes back to normal lighting when the shot is done!"
               )
            )
            (lighting_preset_fade_in
               float
               (help "fade in time for the forced lighting preset")
            )
            (lighting_preset_fade_out
               float
               (help "fade out time for the forced lighting preset")
            )
            (start_movie
               object
               (class TexMovie)
               (help "start movie render-to-texture")
            )
            (stop_movie
               object
               (class TexMovie)
               (help "stop movie render-to-texture")
            )
            (first
               bool
               (help
                  "hack for vignettes - will prefer playing this shot first if checked"
               )
            )
         )
         (postprocess {object ""})
         (crowd_density 1)
         (crowd_lod 0)
         (crowd_face_camera 0)
         (lighting_preset)
         (lighting_preset_fade_in 0)
         (lighting_preset_fade_out 0)
         (start_movie)
         (stop_movie)
         (first 0)
         (shot_over
            {if $world_simulate
               {if
                  {&&
                     $world
                     {||
                        {== [category] vignette}
                        {== [category] vignette_intro}
                        {== [category] vignette_outro}
                     }
                  }
                  {if_else {find_elem (vignette_transition vignette_shell) {$world get_type}}
                     {$world next_camera}
                     {$world pick_shot vignette}
                  }
               }
            }
         )
         (play_group
            ($char $grp $fwd $units $event)
            {if_else {find_elem (extras crowd) {$char get_type}}
               {if $grp
                  {do
                     ($drv {$char find main.drv})
                     {$drv play_group $grp 2}
                     {$drv set_first_beat_offset $fwd $units $event}
                  }
               }
               {$char play_group $grp 1 0 $fwd $units $event}
            }
         )
         (teleport_char
            ($char $ret)
            {unless {|| {== {$char get_type} extras} {== {$char get_type} crowd}}
               {$char cam_teleport $ret}
               {if $ret
                  {$char set group_name ""}
               }
            }
         )
         (update_overlay)
         (play_movie
            ($texmovie $start)
            {$texmovie set showing $start}
            {$texmovie play_movie $start}
         )
         (start_shot
            {if_else [postprocess]
               {do
                  {[postprocess] select}
               }
               {do
                  {rnd reset_postproc}
               }
            }
            {if [start_movie]
               {$this play_movie [start_movie] 1}
            }
            {foreach_int $idx 0 {size [crowds]}
               {do
                  ($crowd [crowds $idx crowd])
                  {if $crowd
                     {$crowd set rotate [crowd_face_camera]}
                     {$crowd set_fullness [crowd_density] [crowd_density]}
                     {$crowd set lod [crowd_lod]}
                  }
               }
            }
         )
         (stop_shot
            {if [stop_movie]
               {$this play_movie [stop_movie] 0}
            }
            {if $world
               {foreach_int $idx 0 {size [crowds]}
                  {do
                     ($crowd [crowds $idx crowd])
                     {if $crowd
                        {$crowd override_anim}
                     }
                  }
               }
            }
         )
         (list_targets
            {do
               ($list {object_list {$this dir} Trans 1})
               {if $bandwardrobe
                  {$bandwardrobe sort_targets $list}
               }
               {foreach $p (player0 player1 player2 player3)
                  {remove_elem $list $p}
               }
               {insert_elems
                  $list
                  1
                  (player0 player1 player2 player3)
               }
               $list
            }
         )
         (find_target
            ($targ $anonymous)
            {if_else $bandwardrobe
               {$bandwardrobe find_target $targ}
               kDataUnhandled
            }
         )
         (shot_ok ($prev_shot) 1)
         (validate
            {if {&& [looping] {! {has_substr {path_name $this} "/vignette/shell/"}}}
               {notify
                  {path_name $this}
                  " is looping vignette camera, but is not in /shell/, not allowed to loop"
               }
            }
            {do
               ($clips {find_obj {$this dir} clips})
               ($limit {$this get duration})
               {if $clips
                  {foreach_int $i 0 {$this size (targets)}
                     {do
                        ($targ [targets $i target])
                        {if {has_substr $targ "player"}
                           {do
                              ($group {find_obj $clips $targ})
                              {if $group
                                 {foreach $clip {$group get_array clips}
                                    {do
                                       ($dur {* 30 {$clip get length_seconds}})
                                       ($ff [targets $i fast_forward])
                                       {if_else $ff
                                          {if {< $dur {- $limit $ff}}
                                             {notify
                                                {path_name $clip}
                                                " has duration "
                                                $dur
                                                " shorter than "
                                                {path_name $this}
                                                " - fast_forward: "
                                                {- $limit $ff}
                                             }
                                          }
                                          {if {< $dur $limit}
                                             {notify
                                                {path_name $clip}
                                                " has duration "
                                                $dur
                                                " shorter than "
                                                {path_name $this}
                                                ": "
                                                $limit
                                             }
                                          }
                                       }
                                    }
                                    {if_else [looping]
                                       {unless {== {$clip get default_loop} 48}
                                          {notify
                                             {path_name $clip}
                                             " non-looping vignette clip played by looping camera "
                                             {path_name $this}
                                             ", make clip [default_looping] kPlayGraphLoop, or make camera non-looping"
                                          }
                                       }
                                       {unless {== {$clip get default_loop} 16}
                                          {notify
                                             {path_name $clip}
                                             " looping vignette clip played by non-looping camera "
                                             {path_name $this}
                                             ", make clip [default_looping] kPlayNoLoop, or make camera loop"
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         )
      )
      (closet
         (placement_mesh "")
         (editor
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use for this shot")
            )
            (placement_mesh
               string
               (list
                  (
                     ""
                     "torso_front"
                     "torso_back"
                     "torso_L-lowerArm"
                     "torso_L-shoulder"
                     "torso_R-lowerArm"
                     "torso_R-shoulder"
                     "legs_L-back"
                     "legs_L-front"
                     "legs_R-back"
                     "legs_R-front"
                     "head_front"
                     "head_back"
                  )
               )
               (help
                  "placement mesh suffix to use with this camera, used in clothing shop"
               )
            )
         )
         (postprocess {object ""})
         (shot_over)
         (play_group
            ($char $grp $fwd $units $event)
            {$char play_group $grp 1 0 $fwd $units $event}
         )
         (teleport_char
            ($char $ret)
            {$char closet_teleport}
            {if $ret
               {$char set group_name ""}
            }
         )
         (update_overlay)
         (start_shot
            {if [postprocess]
               {[postprocess] select}
            }
         )
         (stop_shot
            {if [postprocess]
               {rnd reset_postproc}
            }
         )
         (shot_ok ($prev_shot) 1)
         (find_target
            ($targ $anonymous)
            {if_else $bandwardrobe
               {$bandwardrobe find_target $targ}
               kDataUnhandled
            }
         )
         (list_targets
            {do
               ($list {object_list {$this dir} Trans 1})
               {insert_elems $list 1 ("closet_character")}
               $list
            }
         )
      )
   )
   (views
      (flags
         ("Category" [category])
         ("Platform Only" [platform_only])
         ("DoF" [use_depth_of_field])
         ("Target 0" [keyframes 0 targets 0])
         ("Target 1" [keyframes 1 targets 0])
         ("Total Duration" {$this duration_seconds})
         ("Blur Depth" [keyframes 0 blur_depth])
         ("Max Blur" [keyframes 0 max_blur])
         ("Focus Blur Mult" [keyframes 0 focus_blur_multiplier])
         ("Shake Freq" [keyframes 0 shake_noisefreq])
         ("Shake Amp" [keyframes 0 shake_noiseamp])
         ("Shake Max x" [keyframes 0 shake_maxangle x])
         ("Shake Max y" [keyframes 0 shake_maxangle y])
         ("PS3 Per Pixel" [ps3_per_pixel])
      )
      (Shadows
         ("Category" [category])
         ("Bass Shadow" [targets 0 self_shadow])
         ("Drum Shadow" [targets 1 self_shadow])
         ("Guitar Shadow" [targets 2 self_shadow])
         ("Vocal Shadow" [targets 3 self_shadow])
      )
   )
   (init
      {do
         ($pn
            {if_else {$this dir}
               {{$this dir} get_path_name}
               ""
            }
         )
         {cond
            ({has_substr
                  $pn
                  "/vignette/"
               }
               {$this set_type band3}
               {set [category] TEST_CAM}
               {do
                  ($count 0)
                  {foreach $char (player0 player1 player2 player3)
                     {if {exists $char}
                        {$this add_target $char}
                        {set [targets $count teleport] 0}
                        {set [targets $count return] 1}
                        {++ $count}
                     }
                  }
               }
            )
            ({has_substr
                  $pn
                  "/world/meta/closet"
               }
               {$this set_type closet}
               {set [category] TEST_CAM}
            )
            ({has_substr
                  $pn
                  "/ui/"
               }
               {set [category] TEST_CAM}
               {eval 0}
            )
            ({has_substr
                  $pn
                  "/venue/"
               }
               {$this set_type band}
               {set [category] TEST_CAM}
               {set [flags]
                  {| kValidAll 4096 1048576 2097152 4194304}
               }
            )
         }
      }
   )
)
(BandCrowdMeterDir
   (description "Crowd meter hud element, has a needle")
   (superclasses RndDir)
   (types)
   (editor
      (peak_value float (help "Peak state value"))
      (value
         float
         (range 0 1)
         (help "Band health. Animates crowd_meter.grp")
         (no_test)
      )
      (icon_0_val
         float
         (range -1 1)
         (no_test)
      )
      (icon_1_val
         float
         (range -1 1)
         (no_test)
      )
      (icon_2_val
         float
         (range -1 1)
         (no_test)
      )
      (icon_3_val
         float
         (range -1 1)
         (no_test)
      )
      (icon_4_val
         float
         (range -1 1)
         (no_test)
      )
      (reset script (script {$this reset}))
      (level_colors (array color))
      (maxed
         bool
         (help "Turned on when in the 'meter maxed' state. Animates maxed.tnm")
         (no_test)
      )
      (worst_case script (script {$this worst_case}))
   )
)
(CrowdMeterIcon
   (description "Individual player icon for crowd meter")
   (superclasses RndDir)
   (types)
   (editor
      (reset script (script {$this reset}))
      (arrow_hide script (script {$this arrow_hide}))
      (arrow_show script (script {$this arrow_show}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (glow script (script {$this set_glowing 1}))
      (glow_stop script (script {$this set_glowing 0}))
      (state_normal script (script {$this set_state 0}))
      (state_warning script (script {$this set_state 1}))
      (state_failed script (script {$this set_state 2}))
   )
)
(BandScoreboard
   (description "Scoreboard HUD element including stars")
   (superclasses RndDir)
   (types)
   (editor
      (score
         int
         (help "Test value for scoreboard")
         (no_test)
      )
      (num_stars
         float
         (help "Test value for number of stars")
         (no_test)
      )
      (reset
         script
         (help "Reset the score and star values")
         (script {$this reset})
      )
      (star_display
         object
         (class BandStarDisplay)
         (help "Star display proxy object.")
         (hide {!= $this {$this dir}})
      )
   )
)
(BandStarDisplay
   (description "HUD element which displays up to 5 stars")
   (superclasses RndDir)
   (types)
   (editor
      (num_stars
         float
         (help "Test value for number of stars")
         (no_test)
      )
      (star_type
         symbol
         (list (normal tour))
         (help "The type of star to display")
         (no_test)
      )
      (reset
         script
         (help "Reset the star values")
         (script {$this reset})
      )
   )
)
(BandFaceDeform
   (description
      "Band Face Deformation object for face creator, basically a compact MeshAnim with position deltas"
   )
   (ext fdm)
   (editor
      (frames
         (array
            (struct
               (verts
                  int
                  (help "number of vertices with non-zero deltas in this keyframe")
                  (read_only 1)
               )
            )
         )
         (help "the keyframes")
         (read_only 1)
      )
      (size
         int
         (help "Size in bytes this takes up")
         (read_only 1)
      )
   )
   (types)
)
(BandStreakDisplay
   (description "Streak displaying hud element")
   (superclasses RndDir)
   (types)
   (editor
      (color_anim
         object
         (class MatAnim)
         (help "mat anim specifying the color for each state")
         (hide {!= $this {$this dir}})
      )
      (shake_anim
         object
         (class Anim)
         (help "anim that is fired when achieving a new streak")
         (hide {!= $this {$this dir}})
      )
      (frame_mat
         object
         (class Mat)
         (help "material for the frame (has color applied to it)")
         (hide {!= $this {$this dir}})
      )
      (mult_glow_mesh
         object
         (class Mesh)
         (help
            "glow mesh; hidden when no streak, color of its material is changed to match the streak color"
         )
         (hide {!= $this {$this dir}})
      )
      (mult_frame_mat
         object
         (class Mat)
         (help "material for multiplier frame")
         (hide {!= $this {$this dir}})
      )
      (led_mats
         (array object (class Mat))
         (help "material for LED's; one material per color.")
         (hide {!= $this {$this dir}})
      )
      (led_meshs
         (array object (class Mesh))
         (help "meshes for the LED streak indicators")
         (hide {!= $this {$this dir}})
      )
      (digit_mats
         (array object (class Mat))
         (help "one material per digit")
         (hide {!= $this {$this dir}})
      )
      (mult_digit_mesh
         object
         (class Mesh)
         (help "mesh for the multiplier digit")
         (hide {!= $this {$this dir}})
      )
      (x_digit_mesh
         object
         (class Mesh)
         (help "mesh for the X")
         (hide {!= $this {$this dir}})
      )
      (blank_digit_mat
         object
         (class Mat)
         (help "material for a blank digit")
         (hide {!= $this {$this dir}})
      )
      (x_digit_mat
         object
         (class Mat)
         (help "material for the X")
         (hide {!= $this {$this dir}})
      )
      (blown_mesh_1
         object
         (class Mesh)
         (help "mesh to indicate when player 1 blows a streak")
         (hide {!= $this {$this dir}})
      )
      (blown_mesh_2
         object
         (class Mesh)
         (help "mesh to indicate when player 2 blows a streak")
         (hide {!= $this {$this dir}})
      )
      (blown_mat
         object
         (class Mat)
         (help "material used for the indicators when the streak is blown")
         (hide {!= $this {$this dir}})
      )
      (blown_display_time
         float
         (range 0 5)
         (no_test serialize)
         (help "length of time the blown streak indicator should light up for")
         (hide {!= $this {$this dir}})
      )
      (player_1_blows script (script {$this blow_streak 0}))
      (player_2_blows script (script {$this blow_streak 1}))
      (multiplier
         int
         (range 1 9)
         (help "multiplier value for testing")
      )
      (star_mode bool (help "toggle star power for testing"))
      (partial_streak
         int
         (range 0 20)
         (help "partial streak for testing")
      )
      (player
         int
         (list ("kPlayer1" "kPlayer2" "kPlayerNone" "kPlayerShared"))
         (help "which player to track")
      )
      (refresh script (script {$this refresh}))
   )
)
(BandLeadMeter
   (description
      "Multiplayer lead meter hud element, shows which player is in the lead"
   )
   (superclasses RndDir)
   (types)
   (editor
      (needle_anim
         object
         (class Anim)
         (help "anim to drive the needle")
         (hide {!= $this {$this dir}})
      )
      (logo_glow_anim
         object
         (class Anim)
         (help "anim to make the logo glow different colors")
         (hide {!= $this {$this dir}})
      )
      (glow_mesh_1
         object
         (class Mesh)
         (help "mesh that is shown when player 1 is ahead")
         (hide {!= $this {$this dir}})
      )
      (glow_mesh_2
         object
         (class Mesh)
         (help "mesh that is shown when player 2 is ahead")
         (hide {!= $this {$this dir}})
      )
      (pegged_anim_1
         object
         (class Anim)
         (help "animation to play when player 1 has a huge lead")
         (hide {!= $this {$this dir}})
      )
      (pegged_anim_2
         object
         (class Anim)
         (help "animation to play when player 2 has a huge lead")
         (hide {!= $this {$this dir}})
      )
      (lens_mesh
         object
         (class Mesh)
         (help "lens mesh")
         (hide {!= $this {$this dir}})
      )
      (lens_mat_neutral
         object
         (class Mat)
         (help "lens mat to use when the score is tied")
         (hide {!= $this {$this dir}})
      )
      (lens_mat_1
         object
         (class Mat)
         (help "lens mat to use when player 1 is winning")
         (hide {!= $this {$this dir}})
      )
      (lens_mat_2
         object
         (class Mat)
         (help "lens mat to use when player 2 is winning")
         (hide {!= $this {$this dir}})
      )
      (score_diff
         int
         (help
            "difference in scores for testing. a positive number means the first player is ahead."
         )
      )
      (refresh script (script {$this refresh}))
   )
)
(BandMeshLauncher
   (description "A MeshLauncher object emits meshes along a path.")
   (superclasses Poll)
   (ext ml)
   (types
      (basic_launcher
         (editor
            (launch_mesh script (script {$this launch_mesh}))
            (trans_anim object (class TransAnim))
            (parent_trans object (class Trans))
         )
         (trans_anim "")
         (parent_trans "")
         (launch_mesh
            {if {!= [trans_anim] ""}
               {$this launch [trans_anim] [parent_trans]}
            }
         )
      )
      (particle_launcher
         (editor
            (launch script (script {$this launch_particles}))
            (part object (class ParticleSys))
            (trans object (class Trans))
            (num_parts int (range 0 1000))
            (use_life
               bool
               (refresh life)
               (post_sync
                  {if {! [use_life]}
                     {set [life] 0}
                  }
               )
            )
            (life float (read_only {! [use_life]}))
            (use_speed
               bool
               (refresh speed)
               (post_sync
                  {if {! [use_speed]}
                     {set [speed] 0}
                  }
               )
            )
            (speed float (read_only {! [use_speed]}))
            (use_size
               bool
               (refresh size)
               (post_sync
                  {if {! [use_size]}
                     {set [size] 0}
                  }
               )
            )
            (size float (read_only {! [use_size]}))
            (use_delta_size
               bool
               (refresh delta_size)
               (post_sync
                  {if {! [use_delta_size]}
                     {set [delta_size] 0}
                  }
               )
            )
            (delta_size float (read_only {! [use_delta_size]}))
            (use_start_color
               bool
               (refresh start_color start_alpha)
               (post_sync
                  {if {! [use_start_color]}
                     {set [start_color] 0}
                     {set [start_alpha] 0}
                  }
               )
            )
            (start_color color (read_only {! [use_start_color]}))
            (start_alpha
               float
               (read_only {! [use_start_color]})
               (range 0 1)
            )
            (use_mid_color
               bool
               (refresh mid_color mid_alpha)
               (post_sync
                  {if {! [use_mid_color]}
                     {set [mid_color] 0}
                     {set [mid_alpha] 0}
                  }
               )
            )
            (mid_color color (read_only {! [use_mid_color]}))
            (mid_alpha
               float
               (read_only {! [use_mid_color]})
               (range 0 1)
            )
            (use_end_color
               bool
               (refresh end_color end_alpha)
               (post_sync
                  {if {! [use_end_color]}
                     {set [end_color] 0}
                     {set [end_alpha] 0}
                  }
               )
            )
            (end_color color (read_only {! [use_end_color]}))
            (end_alpha
               float
               (read_only {! [use_end_color]})
               (range 0 1)
            )
            (use_emit_direction
               bool
               (refresh pitch_low pitch_high yaw_low yaw_high)
               (post_sync
                  {if {! [use_end_color]}
                     {set [pitch_low] 0}
                     {set [pitch_high] 0}
                     {set [yaw_low] 0}
                     {set [yaw_high] 0}
                  }
               )
            )
            (pitch_low float (read_only {! [use_emit_direction]}))
            (pitch_high float (read_only {! [use_emit_direction]}))
            (yaw_low float (read_only {! [use_emit_direction]}))
            (yaw_high float (read_only {! [use_emit_direction]}))
         )
      )
   )
   (editor
      (multi_mesh
         object
         (class MultiMesh)
         (help "Controlled MultiMesh to emit from.")
      )
   )
)
(LayerDir
   (description "Draws configurable layer planes from an orthographic camera")
   (types)
   (superclasses RndDir)
   (editor
      (layers
         (array
            (struct
               (name
                  string
                  (hide {$this is_proxy})
                  (refresh layers)
               )
               (active
                  bool
                  (help "is this layer active?")
                  (hide {! [layers {elem $milo_prop_path 1} layer_optional]})
               )
               (color
                  color
                  (help
                     {if_else {$this is_proxy}
                        "layers preview color value to apply (not saved)"
                        "layers default color value to apply (saved)"
                     }
                  )
                  (hide {! [layers {elem $milo_prop_path 1} allow_color]})
               )
               (color_idx
                  int
                  (help
                     {if_else {$this is_proxy}
                        "layers preview color value to apply from palette (not saved)"
                        "layers default color value to apply from palette (saved)"
                     }
                  )
                  (hide
                     {||
                        {! [layers {elem $milo_prop_path 1} allow_color]}
                        {! [layers {elem $milo_prop_path 1} color_palette]}
                     }
                  )
               )
               (alpha
                  float
                  (help
                     {if_else {$this is_proxy}
                        "layers preview alpha value to apply (not saved)"
                        "layers default alpha value to apply (saved)"
                     }
                  )
                  (range 0 1)
                  (hide {! [layers {elem $milo_prop_path 1} allow_alpha]})
               )
               (bitmap
                  string
                  (list {$this get_bitmap_list})
                  (help
                     {if_else {$this is_proxy}
                        "preview bitmap to apply (not saved)"
                        "default bitmap to apply (saved)"
                     }
                  )
                  (hide {< {size [layers {elem $milo_prop_path 1} bitmap_list]} 2})
               )
               (setup
                  (indent
                     (mat
                        object
                        (class Mat)
                        (help "Material this layer controls")
                     )
                     (proxy
                        object
                        (class RndDir)
                        (help "set the proxy file to use if this is a user-created patch layer")
                     )
                     (layer_optional
                        bool
                        (help "can this layer can be turned off?")
                        (refresh layers)
                     )
                     (bitmap_list
                        (array file)
                        (help "list of available bitmaps")
                        (refresh layers)
                     )
                     (allow_color
                        bool
                        (help "allow users to change color")
                        (refresh layers)
                     )
                     (color_palette
                        object
                        (class Object color_palette)
                        (help "select a palette object to get colors from")
                        (hide
                           {|| {! [layers {elem $milo_prop_path 1} allow_color]} {$this is_proxy}}
                        )
                     )
                     (allow_alpha
                        bool
                        (help "allow users to change alpha as slider")
                        (refresh layers)
                     )
                     (alpha_min
                        float
                        (read_only {! [layers {elem $milo_prop_path 1} allow_alpha]})
                        (refresh layers)
                        (help "minimum alpha value allowed")
                     )
                     (alpha_max
                        float
                        (read_only {! [layers {elem $milo_prop_path 1} allow_alpha]})
                        (refresh layers)
                        (help "maximum alpha value allowed")
                     )
                  )
                  (hide {$this is_proxy})
               )
            )
            (header [layers {elem $milo_prop_path 1} name])
         )
      )
      (randomize_colors script (script {$this randomize_colors}))
      (use_free_cam
         bool
         (help
            "allows dir to have it's own camera instead of using the preset fixed camera"
         )
         (hide {$this is_proxy})
      )
   )
)
(OutfitConfig
   (description "Configurable options for outfits")
   (superclasses Draw)
   (allowed_dirs Character)
   (types)
   (ext cfg)
   (editor
      (primary_color
         int
         (help "Index of primary color option")
         (range 0 256)
         (hide {< {$this num_color_options} 1})
      )
      (secondary_color
         int
         (help "Index of secondary color option")
         (range 0 256)
         (hide {< {$this num_color_options} 2})
      )
      (tertiary_color
         int
         (help "Index of tertiary color option")
         (range 0 256)
         (hide {< {$this num_color_options} 3})
      )
      (mats
         (array
            (struct
               (mat
                  object
                  (class Mat)
                  (help "The material to be colored by palettes")
               )
               (resource_mat
                  object
                  (class Mat)
                  (help "optional resource material to be replaced with by [mat]")
               )
               (two_color_diffuse
                  object
                  (class Tex)
                  (help "Diffuse texture for two color, mat must have render to texture")
               )
               (two_color_interp
                  object
                  (class Tex)
                  (help
                     "Two color interpolation, transparent means use color1, opaque means color2, blends"
                  )
               )
               (two_color_mask
                  object
                  (class Tex)
                  (help
                     "Two color mask, transparent means do no color modulation, opaque means do full color modulation"
                  )
               )
               (color1_palette
                  object
                  (class ColorPalette)
                  (help "Palette to use for mat color1")
               )
               (color1_option
                  int
                  (list
                     (
                        ("kPrimaryColor" "uses primary_color")
                        ("kSecondaryColor" "uses secondary_color")
                        ("kTertiaryColor" "uses tertiary_color")
                     )
                  )
                  (help "which color option to use in palette1")
               )
               (color2_palette
                  object
                  (class ColorPalette)
                  (help "Palette to use for mat color2, if NULL, assumes white")
               )
               (color2_option
                  int
                  (list
                     (
                        ("kPrimaryColor" "uses primary_color")
                        ("kSecondaryColor" "uses secondary_color")
                        ("kTertiaryColor" "uses tertiary_color")
                     )
                  )
                  (help "which color option to use in palette2")
               )
               (textures
                  (array object (class Tex))
                  (help "Textures to use instead of colors, uses color1_option")
               )
               (two_color
                  bool
                  (help "is this a two color system")
                  (read_only 1)
                  (no_test)
               )
            )
         )
         (help "Material swaps from resource file, and two color information")
      )
      (patches
         (array
            (struct
               (meshes
                  (array
                     (struct
                        (mesh
                           object
                           (class Mesh)
                           (help
                              "Mesh to project patch onto, must have a 2 color mat to work in render_to mode"
                           )
                        )
                        (patches
                           (array
                              (struct
                                 (patch
                                    object
                                    (class Mesh)
                                    (help "constructed patch")
                                    (read_only 1)
                                 )
                                 (tex
                                    object
                                    (class Tex)
                                    (help "source texture")
                                    (read_only 1)
                                 )
                              )
                           )
                           (read_only 1)
                        )
                     )
                  )
                  (help
                     "All the meshes that patches with [category] will be projected onto.  All must have mats with the same diffuse renderable output texture."
                  )
               )
               (src
                  object
                  (class Trans)
                  (help
                     "If set, indicates a permanent patch, whose mesh is saved out in the dir.  Transformable whose x axis is U, y axis in V, and will be projected onto mesh along its -z axis"
                  )
               )
               (render_to
                  bool
                  (help "if true, renders patch to the mesh diffuse texture")
               )
               (category
                  int
                  (list
                     (
                        ("kPatchNone" "no patch, won't be used")
                        ("kPatchTorso" "patch torso outfit")
                        ("kPatchLeg" "patch on the leg outfit")
                        ("kPatchFeet" "patch on the shoes")
                        ("kPatchHair" "patch on the hat or hair")
                        ("kPatchTattoo" "tattoo art, goes on torso, legs, feet, head, all skin")
                        ("kPatchMakeup" "makeup art, goes on head")
                        ("kPatchFacepaint" "facepaint art, goes on head")
                        ("kPatchTorsoOverlay" "torso overlays, goes on the torso skin")
                        ("kPatchLegOverlay" "leg overlay, goes on the leg skin")
                        ("kPatchGuitar" "patch on the guitar")
                        ("kPatchBass" "patch on the bass")
                        ("kPatchDrum" "patch on the drum")
                        ("kPatchMic" "patch on the mic")
                        ("kPatchKeyboard" "patch on the keyboards")
                     )
                  )
                  (help
                     "Category of this patch, all matching BandCharDesc patches and Overlays will be projected onto these meshes"
                  )
               )
            )
         )
      )
      (meshao
         (array
            (struct
               (meshname string (help "name of the mesh"))
               (coeffs
                  (array int)
                  (help "old colors, packed")
               )
               (seams
                  (array
                     (struct
                        (index int (help "vertex index of a seam"))
                        (coeff int (help "cached ao value before seam blend"))
                     )
                  )
               )
            )
            (help "Array of mesh ao objects")
         )
         (read_only 1)
      )
      (perma_project
         bool
         (help "Project patches every frame, good for composing")
         (no_test)
      )
      (piercings
         (array
            (struct
               (piercing
                  object
                  (class Trans)
                  (help "The piercing mesh, or a piercing bone Trans")
               )
               (reskin
                  bool
                  (help
                     "When facial hair, reskins the [piercing] mesh to the face, only use for very close fitting facial hair"
                  )
               )
               (pieces
                  (array
                     (struct
                        (attachment
                           object
                           (class Trans)
                           (help
                              "Where piece attaches to skin, NULL for facial hair, suggest name spot_<x>_<y> where <x> is p for piercing, e for earring, etc."
                           )
                        )
                        (highlight
                           bool
                           (help "When object is hilit, shows this piece")
                           (no_test)
                        )
                        (vert
                           int
                           (help "index of closest vert in the head mesh")
                           (read_only 1)
                        )
                     )
                  )
                  (help "discontinuous regions ofpolygons, for facial hair, only make one.")
               )
            )
         )
      )
      (overlays
         (array
            (struct
               (category
                  int
                  (list
                     (
                        ("kPatchTorsoOverlay" "torso overlays, goes on the torso skin")
                        ("kPatchLegOverlay" "leg overlay, goes on the leg skin")
                     )
                  )
                  (help "Where this overlay will go")
                  (post_sync {$this milo_reload})
               )
               (texture
                  object
                  (class Tex)
                  (help "The overlay texture")
               )
            )
         )
         (help
            "System for overlaying translucent textures on top of existing patch areas, such as skin, must match the UV mappings for each one."
         )
      )
      (band_logo
         object
         (class Mat)
         (help "Mat that will get the band logo as diffuse texture")
      )
      (tex_blender
         object
         (class TexBlender)
         (help
            "Optional tex blender, will recompose and compress output like our own"
         )
      )
      (wrinkle_blender
         object
         (class TexBlender)
         (help "Optional per frame wrinkle blender")
      )
      (port_patches
         script
         (script
            {$this port_patches}
            {{$this dir} sync_objects}
            {milo update_objects}
         )
         (help "Port old patches to new system")
         (refresh)
      )
      (randomize_colors
         script
         (script {$this randomize_colors})
         (help "Set random color indices")
         (refresh)
      )
      (recompose
         script
         (script {$this recompose})
         (help "Apply color choices to the outfit and recompose the textures")
      )
      (compress_textures
         script
         (script {$this compress_textures})
         (help
            "Compress all the textures and delete superflous textures, will be no longer modifyable after that, so don't do it."
         )
         (refresh)
      )
      (compute_ao
         bool
         (help "should this outfit config compute AO")
         (refresh calculate_ao)
      )
      (calculate_ao
         script
         (script {$this calculate_ao})
         (help "calculates AO for this file, remember to save afterwards!")
         (hide {! [compute_ao]})
      )
   )
)
(PatchRenderer
   (description "Special texture renderer for character patches")
   (allowed_dirs)
   (superclasses TexRenderer)
   (types)
   (ext patch)
   (editor
      (test_mode
         symbol
         (list (blank test))
         (help "Blank/test modes for milo")
      )
      (position
         symbol
         (list (front back left right))
         (help "Position of patch, controls which cam shot we use")
      )
      (back_mat
         object
         (class Mat)
         (help "background material for patch")
      )
      (overlay_mat
         object
         (class Mat)
         (help "Overlay material for patch")
      )
   )
)
(WorldMapDir
   (description "A panel dir for the world tour map.")
   (allowed_dirs)
   (superclasses PanelDir)
   (editor
      (focus_scale
         float
         (range 1 10)
         (help "Scale factor when buttons are focused")
      )
      (postprocess
         object
         (class PostProc)
         (help "Post process object to use when this panel is on screen")
         (post_sync {$this update_postproc})
      )
      (refresh_postproc
         script
         (script {$this update_postproc})
         (help "Refresh postprocessor selection on the tool")
      )
      (focal_distance float (help "Focal distance."))
      (blur_depth float (help "Blur depth."))
      (min_blur float (help "The min blur."))
      (max_blur float (help "The max blur."))
      (do_culling bool (help "Should hidden towns be culled?"))
      (town
         symbol
         (list {$this get_town_list})
         (help "Select a town to rotate the world to it.")
         (no_test)
      )
      (zoom_in
         script
         (script {$this zoom_in_impl})
         (help "Zoom in to a town.")
      )
      (zoom_out
         script
         (script {$this zoom_out_impl})
         (help "Zoom out from a town.")
      )
   )
   (focus_scale 1)
   (postprocess "")
   (update_postproc
      {if $edit_mode
         {if_else [postprocess]
            {[postprocess] select}
            {rnd reset_postproc}
         }
      }
   )
   (play_cascade
      ($start_button $delay)
      {if $start_button
         {do
            ($comp)
            {$start_button stop_anim "enter_anim"}
            {$start_button stop_anim "exit_anim"}
            {set $comp {$start_button get nav_down}}
            {while {&& {!= $comp ""} {!= $comp $start_button}}
               {$comp stop_anim "enter_anim"}
               {$comp stop_anim "exit_anim"}
               {set $comp {$comp get nav_down}}
            }
            {if {exists cascade_intro}
               {delete cascade_intro}
            }
            {$start_button play_anim enter_anim}
            {set $comp {$start_button get nav_down}}
            {thread_task
               0
               (name cascade_intro)
               (script
                  {set $i 0}
                  {if {|| {== $comp ""} {== $comp $start_button}}
                     {$task exit}
                  }
                  {$task sleep $delay}
                  {$comp play_anim enter_anim}
                  {set $comp {$comp get nav_down}}
                  {$task loop}
               )
            }
         }
      }
   )
   (play_exit
      ($start_button)
      {if $start_button
         {do
            ($comp)
            {if {exists cascade_intro}
               {delete cascade_intro}
            }
            {if {$start_button is_anim_playing "enter_anim"}
               {$start_button play_anim "exit_anim"}
            }
            {set $comp {$start_button get nav_down}}
            {while {&& {!= $comp ""} {!= $comp $start_button}}
               {if {$comp is_anim_playing "enter_anim"}
                  {$comp play_anim "exit_anim"}
               }
               {set $comp {$comp get nav_down}}
            }
         }
      }
   )
   (kill_cascade
      ($start_button)
      {if $start_button
         {do
            ($comp)
            {if {exists cascade_intro}
               {delete cascade_intro}
            }
            {if_else {$start_button is_anim_playing "enter_anim"}
               {$start_button stop_anim "enter_anim"}
               {if_else {$start_button is_anim_playing "exit_anim"}
                  {$start_button stop_anim "exit_anim"}
                  {do
                     {$comp play_anim "exit_anim"}
                     {$comp stop_anim "exit_anim"}
                  }
               }
            }
            {set $comp {$start_button get nav_down}}
            {while {&& {!= $comp ""} {!= $comp $start_button}}
               {if_else {$comp is_anim_playing "enter_anim"}
                  {$comp stop_anim "enter_anim"}
                  {if_else {$comp is_anim_playing "exit_anim"}
                     {$comp stop_anim "exit_anim"}
                     {do
                        {$comp play_anim "exit_anim"}
                        {$comp stop_anim "exit_anim"}
                     }
                  }
               }
               {set $comp {$comp get nav_down}}
            }
         }
      }
   )
   (types)
)
(GemTrackDir
   (description "band 2 TrackDir for gem tracks")
   (superclasses TrackDir)
   (editor
      (reset script (script {$this reset}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (mash script (script {$this mash 0}))
      (effect_selector object (class RndDir))
      (practice_reset script (script {$this practice_reset}))
      (streak_meter_offset
         float
         (help "The projected distance between the now bar and the streak meter")
         (post_sync {$this set_pitch [track_pitch]})
      )
      (streak_meter_tilt
         float
         (help "The tilt of the streak meter relative to game.cam, in degrees")
         (post_sync {$this set_pitch [track_pitch]})
      )
      (instrument
         symbol
         (list (bass drum guitar vocals real_keys real_guitar))
         (post_sync {$this setup_instrument})
      )
      (player_intro object (class RndDir))
      (star_power_meter object (class RndDir))
      (streak_meter object (class StreakMeterDir))
      (popup_object object (class RndDir))
      (player_feedback object (class RndDir))
      (failed_feedback object (class RndDir))
      (endgame_feedback object (class RndDir))
      (retract_trig object (class EventTrigger))
      (reset_trig object (class EventTrigger))
      (deploy_trig object (class EventTrigger))
      (stop_deploy_trig object (class EventTrigger))
      (intro_trig object (class EventTrigger))
      (disable_player script (script {$this disable_player 1}))
      (save_player
         script
         (script
            {$this save_player}
            {script_task 0 (delay 1.50) (script {$this enable_player})}
         )
      )
      (rotater object (class Group))
      (surface_objects
         (indent
            (surface_mesh object (class Mesh))
            (surface_texture object (class Tex))
            (surface_mat object (class Mat))
         )
      )
      (track_env object (class Environ))
      (game_cam object (class Cam))
      (peak_state_triggers
         (indent
            (peak_state_on_trig object (class EventTrigger))
            (peak_state_off_trig object (class EventTrigger))
         )
         (help "Peak state on/off triggers for all instrument types")
      )
      (bass_super_streak_triggers
         (indent
            (bass_super_streak_on_trig object (class EventTrigger))
            (bass_super_streak_off_trig object (class EventTrigger))
         )
         (help "Bass super streak on/off triggers")
      )
      (spotlight_phrase_success_trig object (class EventTrigger))
      (gem_mash_anims
         (indent
            (gem_mash_0_anim object (class PropAnim))
            (gem_mash_1_anim object (class PropAnim))
            (gem_mash_2_anim object (class PropAnim))
            (gem_mash_3_anim object (class PropAnim))
            (gem_mash_4_anim object (class PropAnim))
         )
      )
      (drum_mash_anims
         (indent
            (drum_mash_1_anim object (class PropAnim))
            (drum_mash_2_anim object (class PropAnim))
            (drum_mash_3_anim object (class PropAnim))
            (drum_mash_4_anim object (class PropAnim))
         )
      )
      (real_guitar_mash_anims
         (indent
            (real_guitar_mash_0_anim object (class PropAnim))
            (real_guitar_mash_1_anim object (class PropAnim))
            (real_guitar_mash_2_anim object (class PropAnim))
            (real_guitar_mash_3_anim object (class PropAnim))
            (real_guitar_mash_4_anim object (class PropAnim))
            (real_guitar_mash_5_anim object (class PropAnim))
         )
      )
      (fill_lane_anims
         (indent
            (fill_lane_1_anim object (class PropAnim))
            (fill_lane_2_anim object (class PropAnim))
            (fill_lane_3_anim object (class PropAnim))
            (fill_lane_4_anim object (class PropAnim))
         )
      )
      (fill_hit_trigs
         (indent
            (fill_hit_1_trig object (class EventTrigger))
            (fill_hit_2_trig object (class EventTrigger))
            (fill_hit_3_trig object (class EventTrigger))
         )
      )
      (drummer_objects
         (indent
            (kick_drummer_trig object (class EventTrigger))
            (kick_drummer_reset_trig object (class EventTrigger))
            (drum_fill_reset_trig object (class EventTrigger))
            (drum_mash_2nd_pass_activate_anim object (class PropAnim))
            (drum_mash_hit_anim_grp object (class Group))
         )
      )
      (fill_colors_grp object (class Group))
      (lod_anim object (class PropAnim))
      (glow_widgets (array object (class TrackWidget)))
      (smasher_plate
         object
         (class RndDir)
         (hide 1)
         (no_test)
      )
      (fret_number_positioning
         (indent
            (fret_pos_offset_0 float)
            (fret_pos_offset_1 float)
            (fret_pos_offset_2 float)
            (fret_pos_offset_3 float)
            (fret_pos_offset_4 float)
         )
         (help
            "the x offset from the center of an RG gem mesh where the fret number should go"
         )
      )
      (chord_label_pos_offset
         float
         (help
            "the x offset from the center of the track where the chord label should go"
         )
      )
   )
   (types
      (test
         (editor
            (spew_gems script (script {$this spew_gems}))
            (clear_gems script (script {$this clear_gems}))
            (fit_meshes
               (array object (class Mesh))
               (help
                  "Meshes which need to be fit to the cross section of the track surface."
               )
            )
            (dump script (script {$this dump}))
         )
         (black_key_style 0)
         (screen_aspect regular)
         (total_slots 1)
         (track_slot 0)
         (track_extended 0)
         (fit_meshes ())
         (object_type_list
            ($obj_type)
            {do
               ($array {array 0})
               {push_back $array none}
               {$this iterate $obj_type $obj {push_back $array {symbol {$obj name}}}}
               {sort $array}
               $array
            }
         )
         (spew_gems
            {if {! {exists spew_gems_test}}
               {$this toggle_running}
               {thread_task
                  1
                  (name spew_gems_test)
                  (script
                     {set $lane 0}
                     {switch $beat
                        (0
                           {$this add_test_widget "bar_measure.wid" 2}
                           {set $beat 1}
                        )
                        (1
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 2}
                        )
                        (2
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 3}
                        )
                        (3
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 4}
                        )
                        (4
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 5}
                        )
                        (5
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 6}
                        )
                        (6
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 7}
                        )
                        (7
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 0}
                        )
                     }
                     {set $num_gems {random_int 3 4}}
                     {if {== $num_gems 1}
                        {set $hopo {random_int 0 2}}
                     }
                     {foreach_int $gem 0 $num_gems
                        {set $lane {random_int 0 5}}
                        {if_else {== [instrument] drum}
                           {switch $lane
                              (0 {$this add_test_widget "drum_red.wid" $lane})
                              (1 {$this add_test_widget "drum_yellow.wid" $lane})
                              (2 {$this add_test_widget "gem_kick.wid" $lane})
                              (3 {$this add_test_widget "drum_blue.wid" $lane})
                              (4 {$this add_test_widget "drum_green.wid" $lane})
                           }
                           {switch $lane
                              (0
                                 {if_else $hopo
                                    {$this add_test_widget "gem_green_hopo.wid" $lane}
                                    {$this add_test_widget "gem_green.wid" $lane}
                                 }
                              )
                              (1
                                 {if_else $hopo
                                    {$this add_test_widget "gem_red_hopo.wid" $lane}
                                    {$this add_test_widget "gem_red.wid" $lane}
                                 }
                              )
                              (2
                                 {if_else $hopo
                                    {$this add_test_widget "gem_yellow_hopo.wid" $lane}
                                    {$this add_test_widget "gem_yellow.wid" $lane}
                                 }
                              )
                              (3
                                 {if_else $hopo
                                    {$this add_test_widget "gem_blue_hopo.wid" $lane}
                                    {$this add_test_widget "gem_blue.wid" $lane}
                                 }
                              )
                              (4
                                 {if_else $hopo
                                    {$this add_test_widget "gem_orange_hopo.wid" $lane}
                                    {$this add_test_widget "gem_orange.wid" $lane}
                                 }
                              )
                           }
                        }
                     }
                     {$task sleep 1}
                     {$task loop}
                  )
               }
            }
         )
         (clear_gems
            {if {exists spew_gems_test}
               {delete spew_gems_test}
               {$this toggle_running}
            }
         )
         (dump
            {print "surface_texture: " [surface_texture] "
"}
            {print "surface_mesh: " [surface_mesh] "
"}
            {print "effect_selector: " [effect_selector] "
"}
            {print "gem_track_index: " [gem_track_index] "
"}
            {print "num_tracks: " [num_tracks] "
"}
            {print "multiplier: " [multiplier] "
"}
            {print "kick_pass_counter: " [kick_pass_counter] "
"}
         )
         (cycle_black_key_style
            {++ [black_key_style]}
            {if {> [black_key_style] 3}
               {set [black_key_style] 0}
            }
            {switch [black_key_style]
               (0
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_blue.mesh}
                     {object gem_black_blue_glow.mesh}
                  }
                  {key_black_green.wid set_meshes
                     {object kbgem_black_green.mesh}
                     {object gem_black_green_glow.mesh}
                  }
                  {key_black_red.wid set_meshes
                     {object kbgem_black_red.mesh}
                     {object gem_black_red_glow.mesh}
                  }
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_yellow.mesh}
                     {object gem_black_yellow_glow.mesh}
                  }
                  {black_gem_tex.anim set frame 0}
               )
               (1
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_blue_7c.mesh}
                     {object gem_black_blue_glow_7c.mesh}
                  }
                  {key_black_green.wid set_meshes
                     {object kbgem_black_green_7c.mesh}
                     {object gem_black_green_glow_7c.mesh}
                  }
                  {key_black_red.wid set_meshes
                     {object kbgem_black_red_7c.mesh}
                     {object gem_black_red_glow_7c.mesh}
                  }
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_yellow_7c.mesh}
                     {object gem_black_yellow_glow_7c.mesh}
                  }
                  {black_gem_tex.anim set frame 0}
               )
               (2
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_blue.mesh}
                     {object gem_black_blue_glow.mesh}
                  }
                  {key_black_green.wid set_meshes
                     {object kbgem_black_green.mesh}
                     {object gem_black_green_glow.mesh}
                  }
                  {key_black_red.wid set_meshes
                     {object kbgem_black_red.mesh}
                     {object gem_black_red_glow.mesh}
                  }
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_yellow.mesh}
                     {object gem_black_yellow_glow.mesh}
                  }
                  {black_gem_tex.anim set frame 1}
               )
               (3
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_blue_7c.mesh}
                     {object gem_black_blue_glow_7c.mesh}
                  }
                  {key_black_green.wid set_meshes
                     {object kbgem_black_green_7c.mesh}
                     {object gem_black_green_glow_7c.mesh}
                  }
                  {key_black_red.wid set_meshes
                     {object kbgem_black_red_7c.mesh}
                     {object gem_black_red_glow_7c.mesh}
                  }
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_yellow_7c.mesh}
                     {object gem_black_yellow_glow_7c.mesh}
                  }
                  {black_gem_tex.anim set frame 1}
               )
            }
            [black_key_style]
         )
         (update_screen_position
            ($animate $size_frame $shift_frame $cam_rect_frame)
            {if_else {< [track_slot] [total_slots]}
               {do
                  {if_else $animate
                     {do
                        {track_size.anim animate (dest $size_frame) (period 1) (units 2)}
                        {track_shift.anim animate (dest $shift_frame) (period 1) (units 2)}
                        {track_cam_rect.anim animate (dest $cam_rect_frame) (period 1) (units 2)}
                     }
                     {do
                        {track_size.anim animate (range $size_frame $size_frame) (units 2)}
                        {track_shift.anim animate (range $shift_frame $shift_frame) (units 2)}
                        {track_cam_rect.anim animate
                           (range $cam_rect_frame $cam_rect_frame)
                           (units 2)
                        }
                     }
                  }
                  {$this set_used 1}
               }
               {$this set_used 0}
            }
         )
         (set_used
            ($val)
            {unless {== $val [track_extended]}
               {if_else $val
                  {do
                     {if
                        {&&
                           {! [disabled]}
                           {|| {exists milo} {{get_track_panel my_track_panel_dir} tracks_extended}}
                        }
                        {if_else {> [total_slots] 1}
                           {track_in_delayed.trig trigger}
                           {track_in.trig trigger}
                        }
                     }
                     {set [track_extended] 1}
                  }
                  {do
                     {track_out.trig trigger}
                     {set [track_extended] 0}
                  }
               }
            }
         )
      )
   )
   (min_finale_help_time 5.00)
)
(VocalTrackDir
   (description "band 2 dir for vocal track")
   (superclasses RndDir)
   (editor
      (reset script (script {$this reset}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (pitch_panel
         (indent
            (pitch_window
               bool
               (help "are we displaying the note tube panel?")
               (post_sync {$this reset})
            )
            (pitch_window_height
               float
               (help "height of the note tube panel")
               (post_sync {$this reset})
            )
            (pitch_window_mesh
               object
               (class Mesh)
               (help "the pitch window mesh")
               (post_sync {$this reset})
            )
            (pitch_window_overlay
               object
               (class Mesh)
               (help "the pitch window overlay mesh")
               (post_sync {$this reset})
            )
         )
      )
      (lead_panel
         (indent
            (lead_lyrics
               bool
               (help "are we showing the lead lyric panel?")
               (post_sync {$this reset})
            )
            (lead_lyric_height
               float
               (hide {! [lead_lyrics]})
               (help "controls the height of the lead lyric bar")
               (post_sync {$this reset})
            )
            (lead_lyric_mesh
               object
               (class Mesh)
               (hide {! [lead_lyrics]})
               (help "the lead lyric bar mesh")
               (post_sync {$this reset})
            )
         )
      )
      (harmony_panel
         (indent
            (harmony_lyrics
               bool
               (help "are we showing the harmony lyric panel?")
               (post_sync {$this reset})
            )
            (harmony_lyric_height
               float
               (hide {! [harmony_lyrics]})
               (help "controls the height of the harmony lyric bar")
               (post_sync {$this reset})
            )
            (harmony_lyric_mesh
               object
               (class Mesh)
               (hide {! [harmony_lyrics]})
               (help "the harmony lyric bar mesh")
               (post_sync {$this reset})
            )
         )
      )
      (lyric_colors
         (indent
            (scrolling
               (indent
                  (lead
                     (indent
                        (lead_coming
                           color
                           (help "Color of the approaching lead lyrics.")
                           (post_sync
                              {$this set_lyric_color [lead_coming] lead [scrolling_coming_alpha]}
                           )
                        )
                        (lead_now
                           color
                           (help "Color of the current lead lyric.")
                           (post_sync {$this set_lyric_color [lead_now] lead [scrolling_now_alpha]})
                        )
                        (lead_past
                           color
                           (help "Color of the lead lyrics after they have been read.")
                           (post_sync {$this set_lyric_color [lead_past] lead [scrolling_past_alpha]})
                        )
                        (lead_od_coming
                           color
                           (help "Color of the approaching lead overdrive lyrics.")
                           (post_sync
                              {$this set_lyric_color [lead_od_coming] lead [scrolling_coming_alpha]}
                           )
                        )
                        (lead_od_now
                           color
                           (help "Color of the current lead overdrive lyric.")
                           (post_sync
                              {$this set_lyric_color [lead_od_now] lead [scrolling_now_alpha]}
                           )
                        )
                        (lead_od_past
                           color
                           (help "Color of the lead overdrive lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [lead_od_past] lead [scrolling_past_alpha]}
                           )
                        )
                     )
                  )
                  (harmony
                     (indent
                        (harmony_coming
                           color
                           (help "Color of the approaching harmony lyrics.")
                           (post_sync
                              {$this set_lyric_color [harmony_coming] harmony [scrolling_coming_alpha]}
                           )
                        )
                        (harmony_now
                           color
                           (help "Color of the current harmony lyric.")
                           (post_sync
                              {$this set_lyric_color [harmony_now] harmony [scrolling_now_alpha]}
                           )
                        )
                        (harmony_past
                           color
                           (help "Color of the harmony lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [harmony_past] harmony [scrolling_past_alpha]}
                           )
                        )
                        (harmony_od_coming
                           color
                           (help "Color of the approaching harmony overdrive lyrics.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_od_coming]
                                 harmony
                                 [scrolling_coming_alpha]
                              }
                           )
                        )
                        (harmony_od_now
                           color
                           (help "Color of the current harmony overdrive lyric.")
                           (post_sync
                              {$this set_lyric_color [harmony_od_now] harmony [scrolling_now_alpha]}
                           )
                        )
                        (harmony_od_past
                           color
                           (help "Color of the harmony overdrive lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [harmony_od_past] harmony [scrolling_past_alpha]}
                           )
                        )
                     )
                  )
                  (alpha
                     (indent
                        (scrolling_coming_alpha
                           float
                           (range 0 1)
                           (help "Alpha for coming lyrics.")
                        )
                        (scrolling_now_alpha
                           float
                           (range 0 1)
                           (help "Alpha for active lyric.")
                        )
                        (scrolling_past_alpha
                           float
                           (range 0 1)
                           (help "Alpha for past lyrics.")
                        )
                     )
                  )
               )
            )
            (static
               (indent
                  (lead
                     (indent
                        (lead_static_preview
                           color
                           (help "Color of the preview lead lyrics.")
                           (post_sync
                              {$this set_lyric_color [lead_static_preview] lead [static_preview_alpha]}
                           )
                        )
                        (lead_static_coming
                           color
                           (help "Color of the approaching lead lyrics in the current phrase.")
                           (post_sync
                              {$this set_lyric_color [lead_static_coming] lead [static_coming_alpha]}
                           )
                        )
                        (lead_static_now
                           color
                           (help "Color of the current lead lyric.")
                           (post_sync
                              {$this set_lyric_color [lead_static_now] lead [static_now_alpha]}
                           )
                        )
                        (lead_static_past
                           color
                           (help "Color of the lead lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [lead_static_past] lead [static_past_alpha]}
                           )
                        )
                        (lead_static_od_preview
                           color
                           (help "Color of the preview lead lyrics.")
                           (post_sync
                              {$this set_lyric_color
                                 [lead_static_od_preview]
                                 lead
                                 [static_preview_alpha]
                              }
                           )
                        )
                        (lead_static_od_coming
                           color
                           (help
                              "Color of the approaching lead overdrive lyrics in the current phrase."
                           )
                           (post_sync
                              {$this set_lyric_color [lead_static_od_coming] lead [static_coming_alpha]}
                           )
                        )
                        (lead_static_od_now
                           color
                           (help "Color of the current lead overdrive lyric.")
                           (post_sync
                              {$this set_lyric_color [lead_static_od_now] lead [static_now_alpha]}
                           )
                        )
                        (lead_static_od_past
                           color
                           (help "Color of the lead overdrive lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [lead_static_od_past] lead [static_past_alpha]}
                           )
                        )
                     )
                  )
                  (harmony
                     (indent
                        (harmony_static_preview
                           color
                           (help "Color of the preview harmony lyrics.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_preview]
                                 harmony
                                 [static_preview_alpha]
                              }
                           )
                        )
                        (harmony_static_coming
                           color
                           (help "Color of the approaching harmony lyrics in the current phrase.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_coming]
                                 harmony
                                 [static_coming_alpha]
                              }
                           )
                        )
                        (harmony_static_now
                           color
                           (help "Color of the current harmony lyric.")
                           (post_sync
                              {$this set_lyric_color [harmony_static_now] harmony [static_now_alpha]}
                           )
                        )
                        (harmony_static_past
                           color
                           (help "Color of the harmony lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [harmony_static_past] harmony [static_past_alpha]}
                           )
                        )
                        (harmony_static_od_preview
                           color
                           (help "Color of the preview harmony overdrive lyrics.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_od_preview]
                                 harmony
                                 [static_preview_alpha]
                              }
                           )
                        )
                        (harmony_static_od_coming
                           color
                           (help
                              "Color of the approaching harmony overdrive lyrics in the current phrase."
                           )
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_od_coming]
                                 harmony
                                 [static_coming_alpha]
                              }
                           )
                        )
                        (harmony_static_od_now
                           color
                           (help "Color of the current harmony overdrive lyric.")
                           (post_sync
                              {$this set_lyric_color [harmony_static_od_now] harmony [static_now_alpha]}
                           )
                        )
                        (harmony_static_od_past
                           color
                           (help "Color of the harmony overdrive lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_od_past]
                                 harmony
                                 [static_past_alpha]
                              }
                           )
                        )
                     )
                  )
                  (alpha
                     (indent
                        (static_preview_alpha
                           float
                           (range 0 1)
                           (help "Alpha for static preview lyrics.")
                        )
                        (static_coming_alpha
                           float
                           (range 0 1)
                           (help "Alpha for static current phrase lyrics.")
                        )
                        (static_now_alpha
                           float
                           (range 0 1)
                           (help "Alpha for static active lyric.")
                        )
                        (static_past_alpha
                           float
                           (range 0 1)
                           (help "Alpha for static past lyrics.")
                        )
                     )
                  )
               )
            )
         )
      )
      (track_decoration
         (indent
            (left_deco_mesh
               object
               (class Mesh)
               (post_sync {$this reset})
            )
            (right_deco_mesh
               object
               (class Mesh)
               (post_sync {$this reset})
            )
         )
      )
      (now_bar
         (indent
            (now_bar_width
               float
               (help "the width of the now bar mesh")
               (post_sync {$this reset})
            )
            (now_bar_mesh
               object
               (class Mesh)
               (post_sync {$this reset})
            )
         )
      )
      (pitch_guides
         symbol
         (list (none evenly_spaced harmonic staff keyboard))
         (post_sync {$this reset})
      )
      (tube_style object (class Object tube_style))
      (arrow_style
         object
         (class Object arrow_style)
         (post_sync {$this apply_arrow_style [arrow_style]})
      )
      (font_style
         object
         (class Object font_style)
         (post_sync {$this apply_font_style [font_style]})
      )
      (deploy_sections
         (indent
            (lead_deploy_mat
               object
               (class Mat)
               (post_sync {{$this find lead_deploy.mesh} set mat [lead_deploy_mat]})
            )
            (harmony_deploy_mat
               object
               (class Mat)
               (post_sync {{$this find harmony_deploy.mesh} set mat [harmony_deploy_mat]})
            )
         )
      )
      (phrase_feedback
         (indent
            (feedback_state_lead
               int
               (range -1 4)
               (post_sync
                  {$this set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]
                  }
               )
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase."
               )
               (no_test)
            )
            (feedback_state_harm_1
               int
               (range -1 4)
               (post_sync
                  {$this set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]
                  }
               )
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase."
               )
               (no_test)
            )
            (feedback_state_harm_2
               int
               (range -1 4)
               (post_sync
                  {$this set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]
                  }
               )
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase."
               )
               (no_test)
            )
            (phrase_feedback_trig object (class EventTrigger))
         )
      )
      (vocalist_volume object (class RndDir))
      (configurable_objects
         (array object (class Trans))
         (help "Objects which can change transform or showing per configuration.")
      )
      (vox_configuration
         object
         (class Object vocals_configuration)
         (post_sync {$this reset})
      )
      (spotlight_success_objects
         (indent
            (spotlight_sparkles_only_trig object (class EventTrigger))
            (spotlight_phrase_success_trig object (class EventTrigger))
         )
      )
      (instrument
         symbol
         (list (bass drum guitar vocals real_keys real_guitar))
         (post_sync {$this setup_instrument})
      )
      (player_intro object (class RndDir))
      (star_power_meter object (class RndDir))
      (streak_meter object (class StreakMeterDir))
      (popup_object object (class RndDir))
      (player_feedback object (class RndDir))
      (failed_feedback object (class RndDir))
      (endgame_feedback object (class RndDir))
      (retract_trig object (class EventTrigger))
      (reset_trig object (class EventTrigger))
      (deploy_trig object (class EventTrigger))
      (stop_deploy_trig object (class EventTrigger))
      (intro_trig object (class EventTrigger))
      (disable_player script (script {$this disable_player 1}))
      (save_player
         script
         (script
            {$this save_player}
            {script_task 0 (delay 1.50) (script {$this enable_player})}
         )
      )
   )
   (types
      (test
         (editor (text_lyrics script (script {$this test_lyrics})))
         (test_lyrics {word.txt set_text "Current Line"})
      )
      (vocal_harmony_prototype
         (editor)
         (toggle_lead_lyrics
            {set [lead_lyrics] {! [lead_lyrics]}}
            {$this hot_refresh}
            {if_else [lead_lyrics]
               {cheat_display show "Lead lyrics ON"}
               {cheat_display show "Lead lyrics OFF"}
            }
         )
         (toggle_harmony_lyrics
            {set [harmony_lyrics] {! [harmony_lyrics]}}
            {$this hot_refresh}
            {if_else [harmony_lyrics]
               {cheat_display show "Harmony lyrics ON"}
               {cheat_display show "Harmony lyrics OFF"}
            }
         )
         (toggle_pitch_window
            {set [pitch_window] {! [pitch_window]}}
            {$this hot_refresh}
            {if_else [pitch_window]
               {cheat_display show "Pitch window ON"}
               {cheat_display show "Pitch window OFF"}
            }
         )
         (cycle_pitch_guides
            {set [pitch_guides]
               {switch [pitch_guides]
                  (none evenly_spaced)
                  (evenly_spaced harmonic)
                  (harmonic staff)
                  (staff keyboard)
                  (keyboard none)
               }
            }
            {cheat_display show {sprint "pitch guides: " {eval [pitch_guides]}}}
            {$this hot_refresh}
         )
         (toggle_now_bar_extent
            {set [now_bar_covers_lyrics] {! [now_bar_covers_lyrics]}}
            {$this hot_refresh}
            {if_else [now_bar_covers_lyrics]
               {cheat_display show "now bar extent: whole track"}
               {cheat_display show "now bar extent: pitch window only"}
            }
         )
         (nudge_pitch_window_size
            ($in_val)
            {if {> [pitch_window_height] {- $in_val}}
               {+= [pitch_window_height] $in_val}
            }
            {$this hot_refresh}
            {cheat_display show {sprint "Pitch Window size: " [pitch_window_height]}}
         )
         (hot_refresh
            {$this reset}
            {$this rebuild_hud}
         )
         (tube_styles ())
         (tube_style_idx 0)
         (cycle_tube_style
            {if_else {== 0 {size [tube_styles]}}
               {do
                  {$this iterate_self
                     (Object tube_style)
                     $style
                     {insert_elem [tube_styles] {size [tube_styles]} $style}
                  }
                  {set [tube_style_idx] 0}
               }
               {do
                  {++ [tube_style_idx]}
                  {if {>= [tube_style_idx] {size [tube_styles]}}
                     {set [tube_style_idx] 0}
                  }
               }
            }
            {if_else {> {size [tube_styles]} 0}
               {do
                  {set [tube_style] {elem [tube_styles] [tube_style_idx]}}
                  {$this hot_refresh}
                  {cheat_display show {sprint "Tube Style: " {[tube_style] name}}}
               }
               {cheat_display show "no tube styles found"}
            }
         )
         (arrow_styles ())
         (arrow_style_idx 0)
         (cycle_arrow_style
            {if_else {== 0 {size [arrow_styles]}}
               {do
                  {$this iterate_self
                     (Object arrow_style)
                     $style
                     {insert_elem [arrow_styles] {size [arrow_styles]} $style}
                  }
                  {set [arrow_style_idx] 0}
               }
               {do
                  {++ [arrow_style_idx]}
                  {if {>= [arrow_style_idx] {size [arrow_styles]}}
                     {set [arrow_style_idx] 0}
                  }
               }
            }
            {if_else {> {size [arrow_styles]} 0}
               {do
                  {set [arrow_style] {elem [arrow_styles] [arrow_style_idx]}}
                  {$this apply_arrow_style [arrow_style]}
                  {cheat_display show {sprint "Arrow Style: " {[arrow_style] name}}}
               }
               {cheat_display show "no arrow styles found"}
            }
         )
         (font_styles ())
         (font_style_idx 0)
         (cycle_font_style
            {if_else {== 0 {size [font_styles]}}
               {do
                  {$this iterate_self
                     (Object font_style)
                     $style
                     {insert_elem [font_styles] {size [font_styles]} $style}
                  }
                  {set [font_style_idx] 0}
               }
               {do
                  {++ [font_style_idx]}
                  {if {>= [font_style_idx] {size [font_styles]}}
                     {set [font_style_idx] 0}
                  }
               }
            }
            {if_else {> {size [font_styles]} 0}
               {do
                  {set [font_style] {elem [font_styles] [font_style_idx]}}
                  {$this apply_font_style [font_style]}
                  {$this hot_refresh}
                  {cheat_display show {sprint "Font Style: " {[font_style] name}}}
               }
               {cheat_display show "no font styles found"}
            }
         )
         (beat_task_milo "")
         (kick_spotlight
            {do
               ($anim {$this find spotlight.anim})
               ($time_til_next
                  {-
                     {taskmgr time_til_next 1 0.00}
                     0.20
                  }
               )
               {if {< $time_til_next 0}
                  {set $time_til_next {+ $time_til_next 1}}
               }
               {if {!= [beat_task_milo] ""}
                  {delete [beat_task_milo]}
               }
               {set [beat_task_milo]
                  {script_task
                     1
                     (name spotlightbeattask)
                     (delay $time_til_next)
                     (script {kick_spotlight.trig trigger})
                  }
               }
               {print "starting spotlight anim
"}
            }
         )
         (smoothing_log 1)
         (increase_arrow_smoothing
            {++ [smoothing_log]}
            {set [arrow_smoothing] {/ [smoothing_log] {+ [smoothing_log] 1}}}
            {cheat_display show {sprint "arrow smoothing: " [arrow_smoothing]}}
         )
         (decrease_arrow_smoothing
            {if {> [smoothing_log] 0}
               {-- [smoothing_log]}
               {set [arrow_smoothing] {/ [smoothing_log] {+ [smoothing_log] 1}}}
            }
            {cheat_display show {sprint "arrow smoothing: " [arrow_smoothing]}}
         )
      )
   )
   (min_finale_help_time 5.00)
)
(H2HTrackPanelDir
   (description "panel dir that handles tracks & hud in head-to-head mode")
   (superclasses PanelDir)
   (editor
      (reset
         script
         (script
            {$this configure_tracks}
            {$this reset}
         )
      )
      (instrument
         int
         (list
            ("kInstGuitar" "kInstDrum" "kInstBass" "kInstVocals" "kInstRealGuitar")
         )
         (refresh configuration)
         (no_test)
         (post_sync
            {$this configure_tracks}
            {$this play_intro}
         )
      )
      (track_0_net
         bool
         (post_sync {$this configure_tracks})
         (no_test)
      )
      (track_1_net
         bool
         (post_sync {$this configure_tracks})
         (no_test)
      )
      (test_score
         int
         (post_sync {$this set_score_diff [test_score]})
         (no_test)
      )
      (view_time_easy float (post_sync {$this configure_tracks}))
      (view_time_expert float (post_sync {$this configure_tracks}))
      (net_track_alpha float (post_sync {$this configure_tracks}))
      (configuration
         object
         (class Object)
         (post_sync {$this set_configuration [configuration]})
         (help "current configuration")
         (no_test)
      )
      (configurable_objects
         (array object (class Trans))
         (help "Objects which can change transform or showing per configuration.")
      )
   )
   (types)
)
(TrackPanelDir
   (description "panel dir that handles tracks & hud")
   (superclasses PanelDir)
   (editor
      (reset
         script
         (script
            {$this reset}
            {$this configure_tracks}
         )
      )
      (vocals
         bool
         (refresh vocals_net)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (vocals_net
         bool
         (hide {! [vocals]})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (instrument_A
         int
         (list
            (
               "kInstNone"
               "kInstGuitar"
               "kInstDrum"
               "kInstBass"
               "kInstKeys"
               "kInstRealGuitar"
            )
         )
         (refresh inst_A_net configuration)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (inst_A_net
         bool
         (hide {== [instrument_A] -1})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (instrument_B
         int
         (list
            (
               "kInstNone"
               "kInstGuitar"
               "kInstDrum"
               "kInstBass"
               "kInstKeys"
               "kInstRealGuitar"
            )
         )
         (refresh inst_B_net configuration)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (inst_B_net
         bool
         (hide {== [instrument_B] -1})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (instrument_C
         int
         (list
            (
               "kInstNone"
               "kInstGuitar"
               "kInstDrum"
               "kInstBass"
               "kInstKeys"
               "kInstRealGuitar"
            )
         )
         (refresh inst_C_net configuration)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (inst_C_net
         bool
         (hide {== [instrument_C] -1})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (instrument_D
         int
         (list
            (
               "kInstNone"
               "kInstGuitar"
               "kInstDrum"
               "kInstBass"
               "kInstKeys"
               "kInstRealGuitar"
            )
         )
         (refresh inst_D_net configuration)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (inst_D_net
         bool
         (hide {== [instrument_D] -1})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (test_multiplier
         int
         (post_sync {$this set_multiplier [test_multiplier]})
         (no_test)
      )
      (view_time_easy float (post_sync {$this configure_tracks}))
      (view_time_expert float (post_sync {$this configure_tracks}))
      (net_track_alpha float (post_sync {$this configure_tracks}))
      (configuration
         object
         (class Object)
         (post_sync {$this set_configuration [configuration]})
         (help "current configuration")
         (no_test)
      )
      (configurable_objects
         (array object (class Trans))
         (help "Objects which can change transform or showing per configuration.")
      )
      (turn_everything_on
         script
         (script
            {player_intro_00 icon_show}
            {player_intro_01 icon_show}
            {player_intro_02 icon_show}
            {player_intro_03 icon_show}
            {player_intro_00 set_talking 1}
            {player_intro_01 set_talking 1}
            {player_intro_02 set_talking 1}
            {player_intro_03 set_talking 1}
            {player_feedback_00 start_solo}
            {player_feedback_00 set_percent 75}
            {player_feedback_01 start_solo}
            {player_feedback_01 set_percent 25}
            {player_feedback_02 start_solo}
            {player_feedback_02 set_percent 100}
            {player_feedback_03 start_solo}
            {player_feedback_03 set_percent 50}
            {failed_feedback_00 failed 3}
            {failed_feedback_01 failed 3}
            {failed_feedback_02 failed 3}
            {failed_feedback_03 failed 3}
            {popup_help_00 drum_fill}
            {popup_help_01 drum_fill}
            {popup_help_02 drum_fill}
            {popup_help_03 drum_fill}
            {scoreboard set_score_milo 1234567}
            {crowd_meter worst_case}
            {$this set_multiplier 4}
            {mtv_overlay set_showing 1}
            {do
               ($obj)
               {set $obj {vocals get popup_object}}
               {if {!= $obj ""}
                  {$obj scream}
               }
               {set $obj {vocals get player_feedback}}
               {if {!= $obj ""}
                  {$obj start_solo}
                  {$obj set_percent 35}
               }
               {set $obj {vocals get player_intro}}
               {if {!= $obj ""}
                  {$obj icon_show}
                  {$obj set_talking 1}
               }
            }
         )
      )
      (turn_everything_off
         script
         (script
            {player_intro_00 reset}
            {player_intro_01 reset}
            {player_intro_02 reset}
            {player_intro_03 reset}
            {player_intro_00 set_talking 0}
            {player_intro_01 set_talking 0}
            {player_intro_02 set_talking 0}
            {player_intro_03 set_talking 0}
            {player_feedback_00 reset}
            {player_feedback_01 reset}
            {player_feedback_02 reset}
            {player_feedback_03 reset}
            {failed_feedback_00 reset}
            {failed_feedback_01 reset}
            {failed_feedback_02 reset}
            {failed_feedback_03 reset}
            {popup_help_00 reset}
            {popup_help_01 reset}
            {popup_help_02 reset}
            {popup_help_03 reset}
            {scoreboard set_score_milo 0}
            {crowd_meter reset}
            {$this set_multiplier 1}
            {mtv_overlay set_showing 0}
            {do
               ($obj)
               {set $obj {vocals get popup_object}}
               {if {!= $obj ""}
                  {$obj reset}
               }
               {set $obj {vocals get player_feedback}}
               {if {!= $obj ""}
                  {$obj reset}
               }
               {set $obj {vocals get player_intro}}
               {if {!= $obj ""}
                  {$obj reset}
               }
            }
         )
      )
      (game_won script (script {$this game_won}))
      (game_lost script (script {$this game_lost}))
      (everyone_deploy
         script
         (script
            {track_0 deploy}
            {track_1 deploy}
            {track_2 deploy}
            {track_3 deploy}
            {vocals deploy}
            {keys deploy}
         )
      )
      (everyone_stop_deploy
         script
         (script
            {track_0 stop_deploy}
            {track_1 stop_deploy}
            {track_2 stop_deploy}
            {track_3 stop_deploy}
            {vocals stop_deploy}
            {keys stop_deploy}
         )
      )
   )
   (types)
)
(StreakMeterDir
   (description "streak meter for band tracks")
   (superclasses RndDir)
   (types
      (test_streak_meter
         (editor
            (max_multiplier
               int
               (help "The maximum multiplier this track can reach w/o overdrive")
               (range 0 25)
            )
            (test
               script
               (help "Test the streak meter")
               (script {$this test})
            )
            (break
               script
               (help "Break the streak")
               (script {$this break})
            )
            (stop_test
               script
               (help "Stop the streak meter test")
               (script {$this stop_test})
            )
            (star_deploy
               script
               (help "Deploy overdrive")
               (script {$this star_deploy})
            )
            (star_deploy_stop
               script
               (help "Stop deploying overdrive")
               (script {$this star_deploy_stop})
            )
            (reset
               script
               (help "Reset everything")
               (script {$this test_reset})
            )
         )
         (test_hit_val 0)
         (test_streak_multiplier 1)
         (max_multiplier 4)
         (test
            {$this test_reset}
            {set [test_hit_val] 0}
            {set [test_streak_multiplier] 1}
            {thread_task
               0
               (name streak_meter_test)
               (script
                  {set [test_hit_val] [test_hit_val]}
                  {set [test_hit_val] {+ [test_hit_val] 1}}
                  {if {> [test_hit_val] 20}
                     {set [test_hit_val] {- [test_hit_val] 20}}
                  }
                  {if {== [test_hit_val] 20}
                     {set [test_streak_multiplier] {+ [test_streak_multiplier] 1}}
                  }
                  {if {> [test_streak_multiplier] 4}
                     {$this peak_state}
                  }
                  {if_else {> [test_streak_multiplier] [max_multiplier]}
                     {$this set_wipe 1}
                     {do
                        {$this set_wipe {/ [test_hit_val] 20}}
                        {$this set_multiplier [test_streak_multiplier]}
                     }
                  }
                  {$task sleep 0.10}
                  {$task loop}
               )
            }
         )
         (test_reset
            {$this stop_test}
            {$this reset}
            {star_deploy_stop.trig trigger}
         )
         (break
            {$this set_multiplier 1}
            {$this break_streak}
            {set [test_hit_val] 0}
            {set [test_streak_multiplier] 1}
         )
         (stop_test
            {if {exists streak_meter_test}
               {delete streak_meter_test}
            }
         )
      )
   )
)
(OverdriveMeterDir
   (description "overdrive meter for band tracks")
   (superclasses RndDir)
   (editor
      (initialize script (script {$this initialize}))
      (test_energy float (no_test))
      (energy_ready script (script {$this energy_ready}))
      (stop_deploy script (script {$this stop_deploy}))
      (disable_overdrive script (script {$this set_no_overdrive}))
   )
   (types
      (powermeter
         (editor
            (tour_disable
               script
               (script {$this disable})
               (help "Disable the tour display.")
            )
            (tour_enable
               script
               (script {$this enable})
               (help "Enable the tour display, but without focus.")
            )
            (tour_hide
               script
               (script {$this hide})
               (help "Hide the tour display.")
            )
            (tour_gain_focus
               script
               (script {$this gain_focus 0})
               (help "Fade the tour display in.")
            )
            (tour_lose_focus_success
               script
               (script {$this lose_focus 1})
               (help "Player succeeded in passing focus.")
            )
            (tour_lose_focus_failure
               script
               (script {$this lose_focus 0})
               (help "Focus moves, but without success.")
            )
            (tour_succeeding
               script
               (script {$this set_success_state 1})
               (help "Player is succeeding, but focus doesn't change.")
            )
            (tour_failing
               script
               (script {$this set_success_state 0})
               (help "Player is failing, but focus doesn't change.")
            )
            (tour_pulse_success
               script
               (script {$this pulse 1})
               (help
                  "Player succeeded at something, so show it, but don't remove the display."
               )
            )
            (tour_pulse_fail
               script
               (script {$this pulse 0})
               (help
                  "Player failed at something, so show it, but don't remove the display."
               )
            )
            (tour_set_secondary_state_0
               script
               (script {$this set_secondary_state_level 0})
            )
            (tour_set_secondary_state_1
               script
               (script {$this set_secondary_state_level 1})
            )
            (tour_set_secondary_state_2
               script
               (script {$this set_secondary_state_level 2})
            )
            (tour_set_secondary_state_3
               script
               (script {$this set_secondary_state_level 3})
            )
         )
         (set_challenge_type
            ($type)
            {switch $type
               (1 {tour_configure_challenge.anim set_frame 2})
               (2 {tour_configure_challenge.anim set_frame 1})
               (3 {tour_configure_challenge.anim set_frame 0})
            }
         )
         (set_type
            ($type)
            {switch $type
               (0 {tour_configure_type.anim set_frame 0})
               (1 {tour_configure_type.anim set_frame 1})
               (2 {tour_configure_type.anim set_frame 2})
            }
         )
         (hide
            {tour_hide.trig trigger}
            {tour_meter_wipe.anim set_frame 0.00}
            {tour_secondary_state.anim set_frame 0}
            {tour_pulse_fail.anim set_frame 0.00}
            {tour_pulse_success.anim set_frame 0.00}
         )
         (enable
            {tour_enable.trig trigger}
            {tour_meter_wipe.anim set_frame 0.00}
            {tour_secondary_state.anim set_frame 0}
            {tour_pulse_fail.anim set_frame 0.00}
            {tour_pulse_success.anim set_frame 0.00}
         )
         (disable
            {tour_disable.trig trigger}
            {tour_pulse_fail.anim set_frame 0.00}
            {tour_pulse_success.anim set_frame 0.00}
         )
         (gain_focus
            ($with_delay)
            {tour_meter_wipe.anim set_frame 0.00}
            {tour_configure_state.anim set_frame 0}
            {if_else $with_delay
               {do
                  {script_task
                     0
                     (delay 1.00)
                     (script
                        {tour_show.trig trigger}
                        {if {exists get_track_panel}
                           {{get_track_panel} play_seq spade_appear.cue}
                        }
                     )
                  }
               }
               {do
                  {tour_show.trig trigger}
                  {if {exists get_track_panel}
                     {{get_track_panel} play_seq spade_appear.cue}
                  }
               }
            }
         )
         (lose_focus
            ($success)
            {if_else $success
               {do
                  {tour_focus_success.trig trigger}
               }
               {tour_focus_failure.trig trigger}
            }
            {tour_meter_wipe.anim set_frame 0.00}
            {tour_secondary_state.anim set_frame 0}
         )
         (set_success_state
            ($success)
            {if_else $success
               {tour_state_succeeding.trig trigger}
               {tour_state_failing.trig trigger}
            }
         )
         (pulse
            ($success)
            {if_else $success
               {tour_pulse_success.trig trigger}
               {tour_pulse_fail.trig trigger}
            }
         )
         (set_secondary_state_level
            ($level)
            {tour_secondary_state.anim animate (dest {* 10 $level})}
         )
         (set_dynamic_message
            ($message)
            {dynamic_message.lbl set text_token $message}
         )
         (set_multi_message
            ($where $message)
            {switch $where
               (0 {tg_main_text_top.lbl set_token_fmt $message})
               (1 {tg_main_text_middle.lbl set_token_fmt $message})
               (2 {tg_main_text_bottom.lbl set_token_fmt $message})
            }
         )
         (set_static_message
            ($message)
            {static_message.lbl set_token_fmt $message}
            {static_message.lbl set showing 1}
         )
         (set_progress_percentage
            ($percentage $animate)
            {if_else $animate
               {do
                  ($distance {abs {- $percentage {tour_meter_wipe.anim get frame}}})
                  ($period {* $distance 1})
                  {if_else {!= $distance 0.00}
                     {tour_meter_wipe.anim animate (period $period) (dest $percentage)}
                     {tour_meter_wipe.anim animate (range $percentage $percentage)}
                  }
               }
               {tour_meter_wipe.anim animate (range $percentage $percentage)}
            }
         )
         (fill_progress_and_reset
            {$this set_progress_percentage 1.00 1}
            {script_task
               0
               (delay 1.00)
               (script {$this set_progress_percentage 0.00 1})
            }
         )
      )
   )
)
(EndingBonusDir
   (description "BRE/unison phrase popup")
   (superclasses RndDir)
   (editor
      (start
         script
         (script {$this start})
         (help "Start the ending bonus.")
      )
      (reset
         script
         (script {$this reset})
         (help "Reset the ending bonus.")
      )
      (success
         script
         (script {$this success})
         (help "Plays success.trig at the end of the bonus.")
      )
      (failure
         script
         (script {$this coda_end})
         (help "Plays failure.trig at the end of the bonus.")
      )
      (score
         int
         (post_sync {$this set_score [score]})
         (help "Ending bonus score.")
         (no_test)
      )
      (unison_start script (script {$this unison_start}))
      (unison_end script (script {$this unison_end}))
      (unison_succeed script (script {$this unison_succeed}))
   )
   (types)
)
(PitchArrowDir
   (description "singer's vocal HUD pitch guide arrow")
   (superclasses RndDir)
   (editor
      (reset
         script
         (script {$this reset})
         (help "reset to the current param values")
      )
      (arrow_style int)
      (toggle_pitched
         script
         (script {$this toggle_pitched})
         (refresh pitched)
      )
      (pitched bool (read_only 1))
      (toggle_spotlight
         script
         (script {$this toggle_spotlight})
         (refresh spotlight)
      )
      (spotlight bool (read_only 1))
      (toggle_deploying
         script
         (script {$this toggle_deploying})
         (refresh deploying)
      )
      (deploying bool (read_only 1))
      (volume
         float
         (range 0 1)
         (help
            "arrow alpha driven by the mic volume in the current frame, normalized between 0 and 1"
         )
         (post_sync {$this sync_volume})
      )
      (tilt
         float
         (range -90 90)
         (post_sync {$this sync_tilt})
         (help "the tilt of the arrow direction in degrees")
      )
      (score
         float
         (range 0 1)
         (help "the score for the current frame, normalized between 0 and 1")
         (post_sync {$this sync_score})
      )
      (harmony_fx
         float
         (range 0 2)
         (help "extra bonus fx that play when nailing harmony with another part")
         (post_sync {$this sync_harm_score})
      )
      (test_color
         symbol
         (list (green yellow orange brown purple blue white))
         (post_sync {$this sync_color})
      )
      (color_fade
         float
         (range 0 1)
         (help
            "controls the saturation of the arrow color: 0 = max saturation, 1 = no saturation"
         )
         (post_sync {$this sync_color_fade})
      )
      (helix_fx_spin_control
         (indent
            (spin_speed
               float
               (help
                  "controls the spin speed for helix particle effects.  Can be animated"
               )
            )
            (spin_anim
               object
               (class Anim)
               (help
                  "this anim will loop its loop range according to the value of spin_speed"
               )
            )
            (spin_begin_frame float (help "loop start frame for spin_anim"))
            (spin_end_frame float (help "loop end frame for spin_anim"))
            (spin_rest_frame
               float
               (help "frame where spin_anim should be when spin_speed is zero")
            )
         )
      )
   )
   (types)
)
(EventCompleteDir
   (description "PanelDir for tour event complete screens")
   (superclasses PanelDir)
   (editor
      (enabled bool (no_test))
      (play
         script
         (script {$this play})
         (help "Play animations")
      )
      (skip
         script
         (script {$this skip})
         (help "Skip to end of animations")
      )
      (items
         (array
            (struct
               (anim object (class Anim))
               (icon_label object (class BandLabel))
               (icon_label_str string)
               (text_label object (class BandLabel))
               (text_label_str string)
               (text_label_start int)
               (text_label_end int)
               (sfx object (class Sequence))
               (active bool)
               (moment_success_group object (class Group))
               (moment_fail_group object (class Group))
               (moment_name symbol)
               (moment_success_label object (class BandLabel))
               (moment_fail_label object (class BandLabel))
               (moment_str string)
               (moment_end int)
               (moment_sfx object (class Sequence))
               (moment_state int (list ("kMomentNone" "kMomentSuccess" "kMomentFail")))
            )
         )
      )
      (initial_delay float range (0 5.00))
      (anim_time float range (0 5.00))
      (count_time float range (0 5.00))
      (moment_time float range (0 5.00))
      (challenge_list object (class BandList))
   )
   (types)
)
(BandCharDesc
   (description
      "Band Character Description, contains all physical appearance attributes."
   )
   (superclasses)
   (editor
      (prefab
         symbol
         (list {$this list_outfits prefab})
         (help "Prefab name if this is a non-editable prefab")
      )
      (gender
         symbol
         (list (male female))
         (help "take a wild guess")
         (post_sync {$this milo_reload})
      )
      (skin_color
         int
         (help "skin color, taken from skin.pal")
         (post_sync {$this milo_reload})
      )
      (head
         (struct
            (eye_color
               int
               (help "eye color index")
               (post_sync {$this milo_reload})
            )
            (shape
               int
               (help "shape of the head index")
               (range 0 {- {$this shape_num} 1})
               (post_sync {$this milo_reload})
            )
            (chin
               int
               (help "chin index 0-2")
               (range 0 {- {$this chin_num} 1})
               (post_sync {$this milo_reload})
            )
            (chin_width
               float
               (help "chin length 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (chin_height
               float
               (help "chin height 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (jaw_width
               float
               (help "jaw length 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (jaw_height
               float
               (help "jaw height 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (nose
               int
               (help "nose index")
               (range 0 {- {$this nose_num} 1})
               (post_sync {$this milo_reload})
            )
            (nose_width
               float
               (help "nose width 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (nose_height
               float
               (help "nose height 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (eye
               int
               (help "eye index")
               (range 0 {- {$this eye_num} 1})
               (post_sync {$this milo_reload})
            )
            (eye_separation
               float
               (help "eye separation 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (eye_height
               float
               (help "eye height 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (eye_rotation
               float
               (help "eye rotation 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (mouth
               int
               (help "mouth index")
               (range 0 {- {$this mouth_num} 1})
               (post_sync {$this milo_reload})
            )
            (mouth_width
               float
               (help "mouth width 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (mouth_height
               float
               (help "mouth height 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (brow_separation
               float
               (help "eyebrow separation 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (brow_height
               float
               (help "eyebrow height 0-1")
               (range 0 1)
               (post_sync {$this milo_reload})
            )
            (hide
               bool
               (help "if true, loads no head, for development")
               (post_sync {$this milo_reload})
            )
         )
      )
      (instruments
         (struct
            (guitar
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (bass
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (drum
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (mic
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (keyboard
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
         )
         (help "instruments")
      )
      (outfit
         (struct
            (eyebrows
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (facehair
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (earrings
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (glasses
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (hair
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (piercings
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (feet
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (hands
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (legs
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (rings
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (torso
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
            (wrist
               (struct
                  (name
                     symbol
                     (list
                        {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
                     )
                     (post_sync {$this milo_reload})
                  )
                  (color0
                     int
                     (post_sync {$this milo_reload})
                     (help "color0, set -1 to load from outfitconfig")
                  )
                  (color1
                     int
                     (post_sync {$this milo_reload})
                     (help "color1, set -1 to load from outfitconfig")
                  )
                  (color2
                     int
                     (post_sync {$this milo_reload})
                     (help "color2, set -1 to load from outfitconfig")
                  )
               )
               (header
                  {do
                     ($arr {array $milo_prop_path})
                     {push_back $arr name}
                     {localize {symbol {$this get $arr}}}
                  }
               )
            )
         )
         (help "clothing")
      )
      (patches
         (array
            (struct
               (texture
                  int
                  (help
                     "texture index of profile, -1 means to interpret mesh_name as the actual patch mesh, which would live in color_palettes.milo"
                  )
                  (post_sync {$this milo_reload})
               )
               (category
                  int
                  (list
                     (
                        ("kPatchNone" "no patch, won't be used")
                        ("kPatchTorso" "patch torso outfit")
                        ("kPatchLeg" "patch on the leg outfit")
                        ("kPatchFeet" "patch on the shoes")
                        ("kPatchHair" "patch on the hat or hair")
                        ("kPatchTattoo" "tattoo art, goes on torso, legs, feet, head, all skin")
                        ("kPatchMakeup" "makeup art, goes on head")
                        ("kPatchFacepaint" "facepaint art, goes on head")
                        ("kPatchTorsoOverlay" "torso overlays, goes on the torso skin")
                        ("kPatchLegOverlay" "leg overlay, goes on the leg skin")
                        ("kPatchGuitar" "patch on the guitar")
                        ("kPatchBass" "patch on the bass")
                        ("kPatchDrum" "patch on the drum")
                        ("kPatchMic" "patch on the mic")
                        ("kPatchKeyboard" "patch on the keyboards")
                     )
                  )
                  (help "Category of this patch")
                  (post_sync {$this milo_reload})
               )
               (mesh_name
                  string
                  (help
                     "name of placement mesh or mapping mesh. Valid placement meshes:
placement_legs_L-back.mesh placement_legs_L-front.mesh placement_legs_R-back.mesh placement_legs_R-front.mesh placement_torso_back.mesh placement_torso_front.mesh placement_torso_L-lowerArm.mesh placement_torso_L-shoulder.mesh placement_torso_R-lowerArm.mesh placement_torso_R-shoulder.mesh"
                  )
                  (post_sync {$this milo_reload})
               )
               (rotation
                  float
                  (help "in radians, about the uv space z axis.")
                  (post_sync {$this milo_reload})
               )
               (uv
                  (vector
                     (x float)
                     (y float)
                  )
                  (help "UV in the mesh, u == -1 means mesh is mapping mesh.")
                  (post_sync {$this milo_reload})
               )
               (scale
                  (vector
                     (x float)
                     (y float)
                  )
                  (help "local x and y scale factors.")
                  (post_sync {$this milo_reload})
               )
            )
         )
      )
      (height
         float
         (help "Height of character, 0 - 1")
         (range 0 1)
         (no_test)
         (post_sync {$this milo_reload})
      )
      (weight
         float
         (help "Weight of character, 0 - 1")
         (range 0 1)
         (no_test)
         (post_sync {$this milo_reload})
      )
      (muscle
         float
         (help "Muscle of character, 0 - 1")
         (range 0 1)
         (no_test)
         (post_sync {$this milo_reload})
      )
   )
   (types)
   (prefabs_path "char/main/shared/prefabs.milo")
   (deform_path "char/main/shared/deform.milo")
   (head_male_path "char/main/shared/head_male.milo")
   (head_female_path "char/main/shared/head_female.milo")
)
(BandCharacter
   (description "Band Character")
   (superclasses Character BandCharDesc)
   (editor
      (tempo
         symbol
         (help "song tempo")
         (list (slow medium fast))
      )
      (drum_venue
         symbol
         (help "venue type for drums")
         (list {$this list_drum_venues})
      )
      (instrument_type
         symbol
         (list (none guitar bass drum mic keyboard))
         (help "character's current instrument")
         (post_sync {$this milo_reload})
      )
      (in_closet
         bool
         (help "when in closet, colors + outfits can be changed")
         (read_only 1)
         (no_test)
      )
      (enter_closet
         script
         (help "sets in_closet TRUE")
         (script {set [in_closet] 1})
         (refresh in_closet)
      )
      (exit_closet
         script
         (help "sets in_closet FALSE")
         (script {set [in_closet] 0})
         (refresh in_closet)
      )
      (start_load
         script
         (help "loads clips + outfits according to current settings")
         (script {$this start_load 0})
      )
      (head_lookat_weight
         float
         (help "What fraction to drive the head lookat")
         (no_test)
      )
      (test_prefab
         object
         (class BandCharDesc)
         (dir {bandchardesc_prefabs})
         (help "prefab to copy from or to")
      )
      (load_prefab
         script
         (script
            {$this copy_prefab}
            {$this start_load 0}
         )
         (help "make the char look like this prefab")
      )
      (save_prefab
         script
         (script {$this save_prefab})
         (help "make the prefab look like the char AND save to disk")
      )
      (reload_prefabs
         script
         (script {bandchardesc_reload_prefabs})
         (help
            "Reloads all prefabs off of disk, use if you just deleted or added a prefab"
         )
      )
      (group_name
         string
         (list
            {object_list
               {if_else [driver]
                  {[driver] get clips}
                  {object}
               }
               CharClipGroup
               1
            }
         )
         (help "the group name to use for animating")
         (no_test)
      )
   )
   (types
      (main
         (enter
            {if $banddirector
               {if {exists game}
                  {do
                     ($w {$banddirector get_world})
                     {if $w
                        {$w add_sink $this (game_over game_outro game_won_finale) 2}
                     }
                  }
               }
               {$this set_play 4096}
               {$this play_song}
            }
            {if {&& $edit_mode {! $bandwardrobe}}
               {$this find_interest_objects {$this dir}}
            }
            {set $inst {$this get instrument_type}}
            {switch $inst
               (guitar
                  {if {exists strum.dmidi}
                     {strum.dmidi set parser guitar_strum}
                     {strum.dmidi enter}
                  }
                  {if {exists fret.ikmidi}
                     {fret.ikmidi set parser guitar_fret_pos}
                     {fret.ikmidi enter}
                  }
                  {if {exists fret.dmidi}
                     {fret.dmidi set parser guitar_fret}
                     {fret.dmidi enter}
                  }
                  {if {exists string_hi.dmidi}
                     {string_hi.dmidi set parser guitar_string_hi}
                     {string_hi.dmidi enter}
                  }
                  {if {exists string_low.dmidi}
                     {string_low.dmidi set parser guitar_string_low}
                     {string_low.dmidi enter}
                  }
                  {if {exists fret.ikmidi}
                     {fret.ikmidi new_spot spot_neck_fret06.mesh 0.00}
                  }
                  {if {exists fret.dmidi}
                     {fret.dmidi play open}
                  }
                  {if {exists strum.dmidi}
                     {strum.dmidi play strum_open_01}
                  }
               )
               (bass
                  {if {exists strum.dmidi}
                     {strum.dmidi set parser bass_strum}
                     {strum.dmidi enter}
                  }
                  {if {exists fret.ikmidi}
                     {fret.ikmidi set parser bass_fret_pos}
                     {fret.ikmidi enter}
                  }
                  {if {exists fret.dmidi}
                     {fret.dmidi set parser bass_fret}
                     {fret.dmidi enter}
                  }
                  {if {exists string_hi.dmidi}
                     {string_hi.dmidi set parser bass_string_hi}
                     {string_hi.dmidi enter}
                  }
                  {if {exists string_low.dmidi}
                     {string_low.dmidi set parser bass_string_low}
                     {string_low.dmidi enter}
                  }
                  {if {exists zBassOffset.drv}
                     {handle (zBassOffset.drv enter)}
                  }
                  {if {exists fret.ikmidi}
                     {fret.ikmidi new_spot spot_neck_fret06.mesh 0.00}
                  }
                  {if {exists fret.dmidi}
                     {fret.dmidi play open}
                  }
                  {if {exists strum.dmidi}
                     {strum.dmidi play strum_open_01}
                  }
               )
               (drum
                  {if {$this exists drumset.grp}
                     {if $banddirector
                        {right_hand.dmidi play ready}
                        {left_hand.dmidi play ready}
                     }
                  }
               )
               (keyboard
                  {if {$this exists left_hand.dmidi}
                     {left_hand.dmidi play idle}
                  }
                  {if {$this exists right_hand.dmidi}
                     {right_hand.dmidi play idle}
                  }
               )
               (mic {$this set_instrument mic})
            }
         )
         (idle_realtime {$this set_play 4096})
         (idle {$this set_play 8192})
         (idle_intense {$this set_play 16384})
         (mellow {$this set_play 32768})
         (play {$this set_play 65536})
         (intense {$this set_play 131072})
         (play_solo {$this set_play 262144})
         (tambourine_start {$this group_override tambourine})
         (tambourine_end {$this group_override})
         (cowbell_start {$this group_override cowbell})
         (cowbell_end {$this group_override})
         (clap_start {$this group_override clap})
         (clap_end {$this group_override})
         (singalong_on {$this set_singalong 1.00})
         (singalong_off {$this set_singalong 0.00})
         (set_instrument
            ($inst)
            {if {== [instrument_type] mic}
               {do
                  ($mic {instrument find mic.grp})
                  ($mic_stand {instrument find mic_stand.grp})
                  ($cowbell {$this find cowbell.grp})
                  ($tambourine {$this find tambourine.grp})
                  ($show_mic {== $inst "mic"})
                  ($show_tam {== $inst "tambourine"})
                  ($show_cowbell {== $inst "cowbell"})
                  {if $mic
                     {$mic set_showing $show_mic}
                  }
                  {if $mic_stand
                     {$mic_stand set_showing $show_mic}
                  }
                  {if $cowbell
                     {$cowbell set_showing $show_cowbell}
                  }
                  {if $tambourine
                     {$tambourine set_showing $show_tam}
                  }
               }
            }
         )
         (game_over {$this game_over})
         (game_outro
            {do
               ($w {$banddirector get_world})
               {if $w
                  {$w remove_sink $this}
               }
               {set [in_tour_ending] 0}
            }
         )
         (game_won_finale
            {set [in_tour_ending] 1}
            {$this start_load 1}
         )
         (play_song
            {if {exists song.lipdrv}
               {song.lipdrv play_song}
            }
         )
         (play_smile {song.lipdrv play_smile})
         (on_set_instrument_clip_types
            {switch {$this get instrument_type}
               (
                  (guitar bass)
                  {if {exists fret.ikmidi}
                     {fret.ikmidi new_spot spot_neck_fret06.mesh 0.00}
                  }
                  {if {exists fret.dmidi}
                     {fret.dmidi play open}
                  }
                  {if {exists strum.dmidi}
                     {strum.dmidi play strum_open_01}
                  }
               )
            }
         )
         (get_patch_tex
            ($index $mesh)
            {if_else {exists char_cache}
               {char_cache get_patch_tex $this $index $mesh}
               kDataUnhandled
            }
         )
         (get_band_logo
            {if_else {&& {exists game} {profile_mgr get_primary_profile}}
               {{profile_mgr get_primary_profile} get_band_logo_tex}
               {object}
            }
         )
         (get_matching_dude
            {if_else $bandwardrobe
               {$bandwardrobe get_matching_dude $this}
               ''
            }
         )
      )
   )
)
(CharKeyHandMidi
   (description
      "Keyboard hookups to a midi parser, calculates finger destinations."
   )
   (allowed_dirs Character)
   (superclasses CharPollable CharWeightable)
   (ext keyhand)
   (editor
      (first_spot
         object
         (class Trans)
         (help "Spot at 0%")
      )
      (second_spot
         object
         (class Trans)
         (help "Spot at 100%")
      )
      (ik_object
         object
         (class CharIKFingers)
         (help "CharIKFingers object")
      )
      (is_right_hand bool (help "Does this run the right or left hand?"))
      (run_test script (script {$this run_test}))
      (end_test script (script {$this end_test}))
   )
   (types
      (musician
         (parser_up keyboard_rh_fingers_up)
         (parser_down keyboard_rh_fingers_down)
         (editor
            (parser_up symbol (help "Name of the midi parser for finger up events"))
            (parser_down
               symbol
               (help "Name of the midi parser for finger down events")
            )
         )
         (enter
            {if {exists [parser_up]}
               {[parser_up] add_sink $this}
            }
            {if {exists [parser_down]}
               {[parser_down] add_sink $this}
            }
         )
         (exit
            {handle ([parser_up] remove_sink $this)}
            {handle ([parser_down] remove_sink $this)}
         )
         (game_over
            {handle ([parser_up] remove_sink $this)}
            {handle ([parser_down] remove_sink $this)}
         )
      )
   )
)
(BandWardrobe
   (description
      "Manager class that clothes characters and loads animations under different conditions"
   )
   (test_singleton)
   (editor
      (play_mode
         symbol
         (list (coop_bg coop_bk coop_gk))
         (help
            "Which play mode to use, will reload characters + re-pick directed cuts"
         )
         (no_test 1)
      )
      (shot_set_play_mode
         bool
         (help
            "When true, the play_mode will be automatically set based on the name of the camshot you are editting or placed in the anim bar"
         )
         (no_test 1)
      )
      (play_shot_5
         bool
         (help
            "Will play the shot_5 camera track, remapping invalid shot categories on the fly"
         )
         (no_test 1)
      )
      (genre
         symbol
         (list (rocker banger dramatic spazz))
         (help "default genres to load in Milo")
         (no_test 1)
      )
      (tempo
         symbol
         (list (slow medium fast))
         (help "default tempo to load in Milo")
         (no_test 1)
      )
      (vocal_gender
         symbol
         (list (male female))
         (help
            "vocalist gender for this song, set to nothing if in Milo and want whatever you've selected"
         )
         (no_test 1)
      )
      (demand_load
         symbol
         (list
            (
               (budget_cpu_male "worst on budget cpu")
               (budget_cpu_female "worst on budget cpu")
               (budget_gs_male "worst on budget gs")
               (budget_gs_female "worst on budget gs")
               (budget_male "worst on budget combined")
               (budget_female "worst on budget combined")
               (expensive_cpu_male "absolute worst cpu")
               (expensive_cpu_female "absolute worst cpu")
               (expensive_gs_male "absolute worst gs")
               (expensive_gs_female "absolute worst gs")
               (expensive_male "absolute worst combined")
               (expensive_female "absolute worst combined")
            )
         )
         (no_test 1)
         (help
            "Used for framerate mode, set to force prefabs to be these, automatically prepends platform.  Make sure you force to the most expensive of the two (male + female)"
         )
      )
   )
   (anim_props
      (player0_forced_focus
         symbol
         (list {$this list_interest_objects 0})
         (no_test 1)
         (propanim_selected
            (on {$this enable_debug_interests 0 1})
            (off {$this enable_debug_interests 0 0})
         )
         (help
            "for propanim, the name of the interest object to force on player0 in vignettes"
         )
      )
      (player0_enable_blinks bool)
      (player0_force_blink bool (propanim_blockview 0))
      (player1_forced_focus
         symbol
         (list {$this list_interest_objects 1})
         (no_test 1)
         (propanim_selected
            (on {$this enable_debug_interests 1 1})
            (off {$this enable_debug_interests 1 0})
         )
         (help
            "for propanim, the name of the interest object to force on player1 in vignettes"
         )
      )
      (player1_enable_blinks bool)
      (player1_force_blink bool (propanim_blockview 0))
      (player2_forced_focus
         symbol
         (list {$this list_interest_objects 2})
         (no_test 1)
         (propanim_selected
            (on {$this enable_debug_interests 2 1})
            (off {$this enable_debug_interests 2 0})
         )
         (help
            "for propanim, the name of the interest object to force on player2 in vignettes"
         )
      )
      (player2_enable_blinks bool)
      (player2_force_blink bool (propanim_blockview 0))
      (player3_forced_focus
         symbol
         (list {$this list_interest_objects 3})
         (no_test 1)
         (propanim_selected
            (on {$this enable_debug_interests 3 1})
            (off {$this enable_debug_interests 3 0})
         )
         (help
            "for propanim, the name of the interest object to force on player3 in vignettes"
         )
      )
      (player3_enable_blinks bool)
      (player3_force_blink bool (propanim_blockview 0))
   )
   (types
      (band
         (get_slot_info
            ($slot)
            {do
               ($arr (0 0))
               {set_elem $arr 0 0}
               {set_elem $arr 1}
               {set_elem $arr 2 0}
               {if {exists game}
                  {do
                     ($user {user_mgr get_user_from_slot $slot})
                     {if $user
                        {set_elem $arr 0 1}
                        {set_elem
                           $arr
                           1
                           {do
                              ($track {$user get_track_sym})
                              {switch $track
                                 ((drum real_drum) drum)
                                 ((bass real_bass) bass)
                                 ((guitar real_guitar) guitar)
                                 (vocals mic)
                                 ((keys real_keys) keyboard)
                                 {do
                                    ($cont {$user get_controller_sym})
                                    {switch $cont
                                       (drum drum)
                                       ((real_guitar guitar) guitar)
                                       (vocals mic)
                                       (keys keyboard)
                                    }
                                 }
                              }
                           }
                        }
                        {set_elem $arr 2 {$user get_last_hit_fraction}}
                     }
                  }
               }
               $arr
            }
         )
         (get_user_track
            ($slot)
            {if_else {exists user_mgr}
               {do
                  ($user {user_mgr get_user_from_slot $slot})
                  {if_else $user
                     {do
                        ($track {$user get_track_sym})
                        {switch $track
                           ((drum real_drum) drum)
                           ((bass real_bass) bass)
                           ((guitar real_guitar) guitar)
                           (vocals mic)
                           ((keys real_keys) keyboard)
                           kDataUnhandled
                        }
                     }
                     kDataUnhandled
                  }
               }
               kDataUnhandled
            }
         )
         (get_customize_slot
            {if_else {exists closet_mgr}
               {closet_mgr get_user_slot}
               -1
            }
         )
         (on_loading_characters
            {if {exists char_cache}
               {char_cache lock 1 1}
            }
         )
      )
   )
   (anim_groups)
   (coop_bg_remap
      (coop_k_behind coop_all_behind coop_front_behind)
      (coop_k_closeup_hand coop_all_far coop_all_near coop_front_near)
      (coop_k_closeup_head coop_all_far coop_all_near coop_front_near)
      (coop_k_near coop_all_far coop_all_near coop_front_near)
      (coop_bk_behind coop_b_behind)
      (coop_bk_near coop_b_near)
      (coop_gk_behind coop_g_behind)
      (coop_gk_near coop_g_near)
      (coop_kv_behind coop_v_behind)
      (coop_kv_near coop_v_near)
      (directed_keys TEST_CAM)
      (directed_keys_cam TEST_CAM)
      (directed_keys_np TEST_CAM)
      (directed_duo_kg TEST_CAM)
      (directed_duo_kb TEST_CAM)
      (directed_duo_kv TEST_CAM)
   )
   (coop_bk_remap
      (coop_g_behind coop_all_behind coop_front_behind)
      (coop_g_closeup_hand coop_all_far coop_all_near coop_front_near)
      (coop_g_closeup_head coop_all_far coop_all_near coop_front_near)
      (coop_g_near coop_all_far coop_all_near coop_front_near)
      (coop_bg_behind coop_b_behind)
      (coop_bg_near coop_b_near)
      (coop_dg_near coop_d_near)
      (coop_gk_behind coop_k_near)
      (coop_gk_near coop_k_near)
      (coop_gv_behind coop_v_behind)
      (coop_gv_near coop_v_near)
      (directed_duo_guitar TEST_CAM)
      (directed_duo_gb TEST_CAM)
      (directed_guitar TEST_CAM)
      (directed_guitar_np TEST_CAM)
      (directed_guitar_cam TEST_CAM)
      (directed_guitar_cls TEST_CAM)
      (directed_crowd_g TEST_CAM)
      (directed_duo_kg TEST_CAM)
      (directed_guitar_cam_pr TEST_CAM)
      (directed_guitar_cam_pt TEST_CAM)
   )
   (coop_gk_remap
      (coop_b_behind coop_all_behind coop_front_behind)
      (coop_b_closeup_hand coop_all_far coop_all_near coop_front_near)
      (coop_b_closeup_head coop_all_far coop_all_near coop_front_near)
      (coop_b_near coop_all_far coop_all_near coop_front_near)
      (coop_bd_near coop_d_near)
      (coop_bg_behind coop_g_behind)
      (coop_bg_near coop_g_near)
      (coop_bv_behind coop_v_behind)
      (coop_bv_near coop_v_near)
      (coop_bk_behind coop_k_behind)
      (coop_bk_near coop_k_near)
      (directed_duo_bass TEST_CAM)
      (directed_duo_gb TEST_CAM)
      (directed_bass TEST_CAM)
      (directed_bass_np TEST_CAM)
      (directed_bass_cam TEST_CAM)
      (directed_bass_cls TEST_CAM)
      (directed_crowd_b TEST_CAM)
      (directed_duo_kb TEST_CAM)
   )
)
(CrowdAudio
   (description "Crowd Audio, makes the crowd cheer and such")
   (superclasses Poll)
   (editor)
   (types)
)
(BandSongPref
   (description "Band Song Preferences, per song file settable properties")
   (editor
      (part2_inst
         symbol
         (list (guitar bass drum))
         (help "Who should sing the vocal part2?")
      )
      (part3_inst
         symbol
         (list (guitar bass drum))
         (help "Who should sing the vocal part3?")
      )
      (part4_inst
         symbol
         (list (guitar bass drum))
         (help "Who should sing the vocal part4?")
      )
      (animation_genre
         symbol
         (list (banger dramatic rocker spazz))
         (help "Animation genre for the song")
      )
   )
   (types)
)
(BandDirector
   (description
      "Band Director, sits in each song file and manages camera + scene changes"
   )
   (superclasses Poll Draw)
   (init {set [scenetrigger] ''})
   (cam_cat_priorities
      (coop_all_behind
         coop_all_far
         coop_all_near
         coop_front_behind
         coop_front_near
         coop_d_behind
         coop_d_near
         coop_v_behind
         coop_v_near
         coop_b_behind
         coop_b_near
         coop_g_behind
         coop_g_near
         coop_k_behind
         coop_k_near
         coop_d_closeup_hand
         coop_d_closeup_head
         coop_v_closeup
         coop_b_closeup_hand
         coop_b_closeup_head
         coop_g_closeup_hand
         coop_g_closeup_head
         coop_k_closeup_hand
         coop_k_closeup_head
         coop_dv_near
         coop_bd_near
         coop_dg_near
         coop_bv_behind
         coop_bv_near
         coop_gv_behind
         coop_gv_near
         coop_kv_behind
         coop_kv_near
         coop_bg_behind
         coop_bg_near
         coop_bk_behind
         coop_bk_near
         coop_gk_behind
         coop_gk_near
         directed_all
         directed_all_cam
         directed_all_lt
         directed_all_yeah
         directed_bre
         directed_brej
         directed_crowd
         directed_drums
         directed_drums_pnt
         directed_drums_np
         directed_drums_lt
         directed_drums_kd
         directed_vocals
         directed_vocals_np
         directed_vocals_cls
         directed_vocals_cam_pr
         directed_vocals_cam_pt
         directed_stagedive
         directed_crowdsurf
         directed_bass
         directed_crowd_b
         directed_bass_np
         directed_bass_cam
         directed_bass_cls
         directed_guitar
         directed_crowd_g
         directed_guitar_np
         directed_guitar_cls
         directed_guitar_cam_pr
         directed_guitar_cam_pt
         directed_keys
         directed_keys_cam
         directed_keys_np
         directed_duo_drums
         directed_duo_bass
         directed_duo_guitar
         directed_duo_kv
         directed_duo_gb
         directed_duo_kb
         directed_duo_kg
      )
   )
   (generic_cam_cats
      (coop_front_behind
         coop_front_near
         coop_all_behind
         coop_all_far
         coop_all_near
      )
   )
   (editor
      (debug_char_interests
         script
         (script {$this debug_char_interests})
         (help
            "Cycles through each character, enabling debug rendering of its interest objects"
         )
      )
      (toggle_interests_overlay
         script
         (script {$this toggle_interests_overlay})
         (help "Toggles display of debug overlay for interest objects")
      )
      (song_properties
         (indent
            (bass_intensity
               symbol
               (list (idle_realtime idle idle_intense play mellow intense play_solo))
               (help "bass play intensity")
               (no_test 1)
               (read_only 1)
            )
            (drum_intensity
               symbol
               (list (idle_realtime idle idle_intense play mellow intense))
               (help "drum play intensity")
               (no_test 1)
               (read_only 1)
            )
            (guitar_intensity
               symbol
               (list (idle_realtime idle idle_intense play mellow intense play_solo))
               (help "guitar play intensity")
               (no_test 1)
               (read_only 1)
            )
            (mic_intensity
               symbol
               (list
                  (idle_realtime
                     idle
                     idle_intense
                     play
                     mellow
                     intense
                     tambourine_start
                     tambourine_end
                     cowbell_start
                     cowbell_end
                     clap_start
                     clap_end
                  )
               )
               (help "mic play intensity")
               (no_test 1)
               (read_only 1)
            )
            (keyboard_intensity
               symbol
               (list (idle_realtime idle idle_intense play mellow intense))
               (help "keyboard play intensity")
               (no_test 1)
               (read_only 1)
            )
            (crowd
               symbol
               (list
                  (crowd_realtime
                     crowd_mellow
                     crowd_normal
                     crowd_intense
                     crowd_lighters_on
                     crowd_lighters_off
                     crowd_horns_on
                     crowd_horns_off
                     crowd_fists_on
                     crowd_fists_off
                  )
               )
               (help "Crowd commands")
               (no_test 1)
            )
            (part2_sing
               symbol
               (list (singalong_on singalong_off))
               (help "sing on/off for second vocal part")
               (no_test 1)
            )
            (part3_sing
               symbol
               (list (singalong_on singalong_off))
               (help "sing on/off for third vocal part")
               (no_test 1)
            )
            (part4_sing
               symbol
               (list (singalong_on singalong_off))
               (help "sing on/off for fourth vocal part")
               (no_test 1)
            )
            (shot_5
               symbol
               (list (COOP_CAM_CATS DIRECTED_CAM_CATS))
               (help "Five instrument authored BandCamShot categories")
               (no_test)
               (propanim_annotate shot_annotate)
            )
            (shot_bg
               symbol
               (list {$this get_cat_list coop_bg (COOP_CAM_CATS DIRECTED_CAM_CATS)})
               (help "Bass + Guitar BandCamShot categories")
               (no_test)
               (propanim_annotate shot_annotate)
            )
            (shot_bk
               symbol
               (list {$this get_cat_list coop_bk (COOP_CAM_CATS DIRECTED_CAM_CATS)})
               (help "Bass + Keyboard BandCamShot category")
               (no_test)
               (propanim_annotate shot_annotate)
            )
            (shot_gk
               symbol
               (list {$this get_cat_list coop_gk (COOP_CAM_CATS DIRECTED_CAM_CATS)})
               (help "Guitar + Keyboard BandCamShot categories")
               (no_test)
               (propanim_annotate shot_annotate)
            )
            (cur_shot
               object
               (class CamShot)
               (help "currently shown camshot, nice for debugging.")
               (read_only 1)
               (no_test)
            )
            (cur_world
               object
               (class WorldDir)
               (help "currently shown world, nice for debugging.")
               (read_only 1)
               (no_test)
            )
            (excitement
               int
               (help "excitement level")
               (read_only 1)
               (no_test)
            )
            (num_players_failed
               int
               (help "how many have failed")
               (read_only 1)
               (no_test)
            )
            (postproc
               object
               (list
                  {do
                     ($dir {milo cur_dir})
                     ($array {array 0})
                     {$dir iterate
                        PostProc
                        $obj
                        {if
                           {!
                              {find_elem
                                 (all_deploy.pp
                                    failed.pp
                                    failing.pp
                                    intro_contrast_flame.pp
                                    intro_contrast_grey.pp
                                    intro_contrast_ice.pp
                                    intro_posterize_a.pp
                                    intro_test.pp
                                    override_blender.pp
                                    placeholder.pp
                                    savior.pp
                                    world.pp
                                 )
                                 {$obj name}
                              }
                           }
                           {push_back $array $obj}
                        }
                     }
                     {push_back $array}
                     $array
                  }
               )
               (interp_handlers postproc_interp)
               (propanim_blockview 1)
               (help "the current venue postproc.")
               (no_test)
            )
            (cam_postproc
               object
               (class PostProc)
               (help "camera postproc override.  If set, does no postproc blends")
               (read_only 1)
               (no_test)
            )
            (lightpreset
               symbol
               (list (SONG_LIGHTING_CATEGORIES))
               (interp_handlers lightpreset_interp)
               (help "the current light preset")
               (no_test)
            )
            (lightpreset_keyframe
               symbol
               (list (next prev first none))
               (interp_handlers lightpreset_keyframe_interp)
               (help
                  "author next/prev/first keyframe commands for manual presets: strobes, etc."
               )
               (no_test)
            )
            (world_event
               symbol
               (list (none bonusfx))
               (help "author bonusfx")
               (no_test)
            )
            (spot_bass
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (spot_drums
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (spot_guitar
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (spot_keyboard
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (spot_vocal
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (stagekit_fog
               symbol
               (list (on off))
               (help "author Stage Kit fog machine start/stop events")
               (no_test)
            )
         )
         (help
            "These are the properties animated by the song, displayed here for debugging"
         )
      )
   )
   (types
      (band
         (enter
            {if $world
               {$world add_sink
                  $this
                  (excitement
                     game_won
                     game_won_finale
                     game_lost
                     game_over
                     game_outro
                     playing_final_cam
                  )
                  2
               }
            }
            {set $crowd.game_excitement 2}
            {set $crowd.authored_excitement -1}
            {set $crowd.authored_action ''}
            {set $crowd.idle_flags
               {| 2 48 512}
            }
            {set $crowd.play_flags {| 2 48}}
         )
         (exit
            {if $world
               {$world remove_sink $this}
            }
         )
         (excitement
            ($level)
            {unless [disabled]
               {set [excitement] $level}
               {set $crowd.game_excitement $level}
            }
            kDataUnhandled
         )
         (player_failed
            ($inst)
            {++ [num_players_failed]}
            {$this set_dircut
               {switch $inst
                  ((bass real_bass) BFTB_B_FAIL)
                  (drum BFTB_D_FAIL)
                  ((guitar real_guitar) BFTB_G_FAIL)
                  (vocals BFTB_V_FAIL)
                  ((keys real_keys) BFTB_K_FAIL)
                  {notify "unknown player " $inst}
               }
            }
         )
         (player_saved
            ($savior)
            {-- [num_players_failed]}
            {script_task
               0
               (delay 0.35)
               (script
                  {$this set_dircut
                     {switch $savior
                        ((bass real_bass) BFTB_B_REVIVE)
                        (drum BFTB_D_REVIVE)
                        ((guitar real_guitar) BFTB_G_REVIVE)
                        (vocals BFTB_V_REVIVE)
                        ((keys real_keys) BFTB_K_REVIVE)
                        {notify "bad activate inst" $inst}
                     }
                  }
               )
            }
         )
         (set_final_shot
            ($cat)
            {set $crowd.game_excitement
               {if_else {== $cat LOSE}
                  -3
                  -2
               }
            }
            {unless {$this set_dircut $cat}
               {handle (game game_outro)}
            }
         )
         (append_shot
            ($first_cam $cat $notify)
            {do
               ($shot {$this set_dircut $cat})
               {if_else $shot
                  {$first_cam append (next_shots) $shot}
                  {if $notify
                     {notify "could not find " $cat " shot"}
                  }
               }
               $shot
            }
         )
         (make_win_shot
            {do
               ($win {$this set_dircut WIN})
               ($shottime
                  {elem
                     (0 60 50 40 30 30)
                     {beatmatch num_active_players}
                  }
               )
               {if $win
                  {$win clear (next_shots)}
                  {$this append_shot $win WIN_PRE 0}
                  {beatmatch foreach_active_player $p
                     {do
                        ($shot
                           {$this append_shot
                              $win
                              {switch {$p instrument}
                                 ((bass real_bass) WIN_BASS)
                                 (drum WIN_DRUM)
                                 ((guitar real_guitar) WIN_GUITAR)
                                 ((keys real_keys) WIN_KEYBOARD)
                                 (vocals WIN_VOCAL)
                                 {notify "hey bad instrument " {$p instrument}}
                              }
                              1
                           }
                        )
                        {if $shot
                           {$shot set (keyframes 0 duration) $shottime}
                           {$shot set (keyframes 0 blend) 0}
                        }
                     }
                  }
                  {$this append_shot $win WIN_POST 1}
               }
            }
         )
         (playing_final_cam
            {set $crowd.play_flags
               {| 2 48 512}
            }
         )
         (game_won
            {$this set_final_shot
               {if_else {meta_performer is_last_song}
                  {do
                     {$this make_win_shot}
                     WIN
                  }
                  WIN_QUICK
               }
            }
         )
         (game_won_finale
            {$this set_final_shot WIN_PRE_FINALE}
            {$this launch_finale_task}
            kDataUnhandled
         )
         (launch_finale_task
            {script_task
               0
               (delay 1)
               (script
                  {do
                     ($done 1)
                     {foreach_int $i 0 4
                        {do
                           ($char {$bandwardrobe get_character $i})
                           {if {$char is_loading}
                              {set $done 0}
                           }
                        }
                     }
                     {if_else $done
                        {$this finale_sequence}
                        {$this launch_finale_task}
                     }
                  }
               )
               (once 1)
            }
         )
         (finale_sequence {$this set_dircut WIN_FINALE})
         (game_lost {$this set_final_shot LOSE})
         (game_over
            {handle ({$this get_curworld} remove_midi_parsers)}
            {set [disabled] 1}
         )
         (game_outro
            {$this set_dircut
               {if_else {|| {meta_performer is_set_complete} {meta_performer is_last_song}}
                  OUTRO
                  OUTRO_MULTI
               }
            }
         )
         (crowd_realtime {set $crowd.authored_excitement -1})
         (crowd_mellow {set $crowd.authored_excitement 1})
         (crowd_normal {set $crowd.authored_excitement 2})
         (crowd_intense {set $crowd.authored_excitement 3})
         (crowd_lighters_on {set $crowd.authored_action lighters})
         (crowd_lighters_off {set $crowd.authored_action ''})
         (crowd_horns_on {set $crowd.authored_action horns})
         (crowd_horns_off {set $crowd.authored_action ''})
         (crowd_fists_on {set $crowd.authored_action fists})
         (crowd_fists_off {set $crowd.authored_action ''})
         (get_intro_category
            {cond
               ({!= $cheat.intro 0} $cheat.intro)
               ({$this is_music_video} INTRO_VENUE)
               ({&& {exists game} {game get replay}} INTRO_QUICK)
               ({&&
                     {exists meta_performer}
                     {!
                        {meta_performer is_first_song}
                     }
                  }
                  INTRO_MULTI
               )
               INTRO_VENUE
            }
         )
         (pick_intro_shot {$this set_dircut {$this get_intro_category}})
         (allow_intro_shot
            {set $res 1}
            {if {exists game}
               {set $res {! {game resumed_no_score}}}
            }
            $res
         )
         (set_intro_shot
            ($shot)
            {if {exists beatmatch}
               {beatmatch set_intro_real_time
                  {if_else $shot
                     {- {$shot total_duration_seconds}}
                     0
                  }
               }
            }
         )
         (load_game_song
            ($load)
            {do
               ($song {meta_performer song})
               ($data {song_mgr get_meta_data $song})
               {$this load_song
                  {song_mgr song_file_path $song ".milo"}
                  {$data genre}
                  {$data anim_tempo}
                  {$data vocal_gender}
                  $load
               }
            }
         )
         (anim_genres)
      )
   )
   (test_singleton)
)
(ChordShapeGenerator
   (description
      "a tool for generating arbitrary real guitar chord shape gems from sample geometry"
   )
   (editor
      (chord_source_mesh
         object
         (class Mesh)
         (help "sample mesh from which to create chord meshes")
      )
      (finger_source_mesh
         object
         (class Mesh)
         (help "sample mesh from which to create finger shape meshes")
      )
      (geometric_guides
         (indent
            (base_cross_section
               object
               (class Trans)
               (help
                  "determines where the cross section will be taken to generate the open-string parts of the chord shape"
               )
            )
            (contour_cross_section
               object
               (class Trans)
               (help
                  "determines where the cross section will be taken to generate the fretted parts of the chord shape"
               )
            )
            (base_height
               object
               (class Trans)
               (help
                  "indicated where the top of the base is - everything above this height will be scaled according to the fret position."
               )
            )
         )
      )
      (num_slots
         int
         (range 4 6)
         (help "how many strings the instrument has")
         (refresh
            frets
            smasher_positions
            string_4_fret
            string_5_fret
            string_4
            string_5
         )
      )
      (frets
         (indent
            (string_0_fret
               int
               (range -1 6)
               (help "the fret value for the low E string")
            )
            (string_1_fret
               int
               (range -1 6)
               (help "the fret value for the A string")
            )
            (string_2_fret
               int
               (range -1 6)
               (help "the fret value for the D string")
            )
            (string_3_fret
               int
               (range -1 6)
               (help "the fret value for the G string")
            )
            (string_4_fret
               int
               (range -1 6)
               (help "the fret value for the B string")
               (hide {< [num_slots] 5})
            )
            (string_5_fret
               int
               (range -1 6)
               (help "the fret value for the high E string")
               (hide {< [num_slots] 6})
            )
         )
         (help "the fret position on each string for this chord")
      )
      (smasher_positions
         (indent
            (string_0
               object
               (class Trans)
               (help "position of the low E smasher")
            )
            (string_1
               object
               (class Trans)
               (help "position of the A smasher")
            )
            (string_2
               object
               (class Trans)
               (help "position of the D smasher")
            )
            (string_3
               object
               (class Trans)
               (help "position of the G smasher")
            )
            (string_4
               object
               (class Trans)
               (help "position of the B smasher")
               (hide {< [num_slots] 5})
            )
            (string_5
               object
               (class Trans)
               (help "position of the high E smasher")
               (hide {< [num_slots] 6})
            )
         )
         (help
            "list of smashers from left to right - determines where we consider each string to be"
         )
      )
      (fret_heights
         (indent
            (fret_height_1
               float
               (range 0 5)
               (help "height when fret = 1")
            )
            (fret_height_2
               float
               (range 0 5)
               (help "height when fret = 2")
            )
            (fret_height_3
               float
               (range 0 5)
               (help "height when fret = 3")
            )
            (fret_height_4
               float
               (range 0 5)
               (help "height when fret = 4")
            )
            (fret_height_5
               float
               (range 0 5)
               (help "height when fret = 5")
            )
            (fret_height_6
               float
               (range 0 5)
               (help "height when fret = 6")
            )
         )
         (help
            "determines the height of the chord shape at a string according to the fret"
         )
      )
      (grade_distances
         (indent
            (grade_distance_1
               float
               (range 0 1)
               (help
                  "how much space the slant takes as a proportion of the width of a smasher when transitioning between fret numbers that differ by 1"
               )
            )
            (grade_distance_2
               float
               (range 0 1)
               (help
                  "how much space the slant takes as a proportion of the width of a smasher when transitioning between fret numbers that differ by 2"
               )
            )
            (grade_distance_3
               float
               (range 0 1)
               (help
                  "how much space the slant takes as a proportion of the width of a smasher when transitioning between fret numbers that differ by 3"
               )
            )
            (grade_distance_4
               float
               (range 0 1)
               (help
                  "how much space the slant takes as a proportion of the width of a smasher when transitioning between fret numbers that differ by 4"
               )
            )
            (grade_distance_5
               float
               (range 0 1)
               (help
                  "how much space the slant takes as a proportion of the width of a smasher when transitioning between fret numbers that differ by 5"
               )
            )
         )
         (help
            "this value controls how steep the slant is between different fret numbers"
         )
      )
      (BUILD script (script {$this generate_chord_shape}))
   )
   (types)
)
(UnisonIcon
   (description "player feedback in a unison phrase")
   (superclasses RndDir)
   (editor
      (reset script (script {$this reset}))
      (start script (script {$this start}))
      (end script (script {$this end}))
      (succeed script (script {$this succeed}))
      (fail script (script {$this fail}))
      (progress
         float
         (range 0 1)
         (no_test)
      )
   )
   (types)
)
(BandConfiguration
   (description
      "Band Configuration, sits in each venue and stores xfms per target per play mode"
   )
   (editor
      (store
         script
         (script {$this store_configuration})
         (help "store the current character locations into this configuration")
      )
      (release
         script
         (script {$this release_configuration})
         (help
            "releases the characters from their waypoints, so they can be moved around in preparation for storing."
         )
      )
      (view
         script
         (script {$this sync_play_mode})
         (help "Re-teleports the characters to their waypoint positions.")
      )
   )
   (types)
)
(OvershellDir
   (description "panel dir that handles the overshell")
   (superclasses PanelDir)
   (types)
)
(SongSectionController
   (description
      "Syncronizes effects to structural song elements like verse, derived from practice sections"
   )
   (superclasses Poll)
   (allowed_dirs WorldDir)
   (ext ssctrl)
   (editor
      (mappings_owner
         object
         (class SongSectionController)
         (alias section_owner)
         (refresh section_mappings)
         (help
            "Set this to get your section mappings from another SongSectionController.  Useful for moving this logic into a common subdir"
         )
      )
      (section_mappings
         (array
            (struct
               (pool_category
                  symbol
                  (list
                     (intro
                        verse
                        verse_1
                        verse_2
                        verse_3
                        prechorus
                        chorus
                        chorus_1
                        chorus_2
                        chorus_3
                        solo
                        bridge
                        break
                        bre
                        outro
                        custom1
                        custom2
                        custom3
                     )
                  )
                  (help
                     "the name of the content pool category we are mapping practice section names to"
                  )
               )
               (valid_practice_sections
                  (array string)
                  (help
                     "a list of valid practice section names.
  Can use expressions like '*verse*' to mean all sections with 'verse' in the name."
                  )
               )
               (invalid_practice_sections
                  (array string)
                  (help
                     "Any practice section appearing in this list will cause a failed match.
  Can use expressions like '*intro_verse*' if you like"
                  )
               )
            )
         )
         (read_only {!= [mappings_owner] })
         (help
            "Define how practice section names map to content pool categories (i.e. verse_1d  -> verse)"
         )
      )
      (wait_for_event
         symbol
         (list (cam_cut))
         (help "An optional event to wait for before swapping in a new pool")
      )
      (trigger_mappings
         (array
            (struct
               (pool_category
                  symbol
                  (list
                     (intro
                        verse
                        verse_1
                        verse_2
                        verse_3
                        prechorus
                        chorus
                        chorus_1
                        chorus_2
                        chorus_3
                        solo
                        bridge
                        break
                        bre
                        outro
                        custom1
                        custom2
                        custom3
                        CATCH_ALL
                     )
                  )
                  (help
                     "the name of the content pool category we are mapping practice section names to"
                  )
               )
               (trigger_pools
                  (array object (list {$this find_pools}))
                  (help
                     "Pools of content associate with this pool category - they should be EventTriggers of type 'trigger_pool'.  
If you add more than one, then each time the category is newly activated, we go to another one in the list using the trigger_order rule below."
                  )
               )
               (trigger_order
                  int
                  (list
                     (
                        (
                           "kPoolTriggerSequence"
                           "trigger in sequence, sticking on the last one if the pool is activated more times"
                        )
                        (
                           "kPoolTriggerRandom"
                           "randomly pick a pool each time the pool is newly activated"
                        )
                        (
                           "kPoolTriggerLoop"
                           "same as sequence, but we loop back to the beginning if we activate more times"
                        )
                     )
                  )
                  (alias next_pool_order)
                  (help
                     "when a category is newly activated, this rule determines how we choose which trigger_pool is next."
                  )
               )
            )
         )
         (help "Define which triggers get activated for each content pool category")
      )
      (testing
         (indent
            (pratice_section_debug
               symbol
               (help
                  "Type in a pratice section name here, and pool_debug will show you which pool we'd activate"
               )
               (refresh pool_debug)
            )
            (pool_debug
               symbol
               (read_only 1)
               (no_test)
               (help "the pool that would be activate for the pratice_section_debug")
            )
            (pool_to_activate
               symbol
               (list
                  (intro
                     verse
                     verse_1
                     verse_2
                     verse_3
                     prechorus
                     chorus
                     chorus_1
                     chorus_2
                     chorus_3
                     solo
                     bridge
                     break
                     bre
                     outro
                     custom1
                     custom2
                     custom3
                     CATCH_ALL
                  )
               )
               (help "Select a pool here and hit the 'activate' button to test it out")
            )
            (activate
               script
               (script
                  {unless {== [pool_to_activate] }
                     {$this trigger_debug_pool}
                     {milo invalidate_listers_and_trees}
                     {milo update_objects}
                  }
               )
               (help "activate the pool of content associated with pool_to_activate")
            )
            (reset
               script
               (script
                  {$this reset_all}
                  {milo invalidate_listers_and_trees}
                  {milo update_objects}
               )
               (help "reset the system")
            )
         )
         (help
            "facilities to test practice section mappings and activate specific pools"
         )
      )
      (create_objects
         (indent
            (pool_to_createfor
               symbol
               (list
                  (intro
                     verse
                     verse_1
                     verse_2
                     verse_3
                     prechorus
                     chorus
                     chorus_1
                     chorus_2
                     chorus_3
                     solo
                     bridge
                     break
                     bre
                     outro
                     custom1
                     custom2
                     custom3
                     CATCH_ALL
                  )
               )
               (alias pool_category)
               (refresh create_pool)
               (help "Will create assets for the pool selected here.")
            )
            (create_pool
               script
               (script
                  {set $poolName
                     {next_name
                        {sprint "pool_" [pool_to_createfor] ".trig"}
                     }
                  }
                  {set $newPool {new EventTrigger}}
                  {$newPool set_name $poolName {$this dir}}
                  {$newPool set_type trigger_pool}
                  {$newPool insert (trigger_events 0) cam_cut}
                  {$this add_trigger_pool $newPool [pool_to_createfor]}
                  {milo invalidate_listers_and_trees}
                  {milo update_objects}
                  {milo edit $newPool}
               )
               (read_only {== [pool_to_createfor] })
               (help "create a new trigger pool for the selected category")
            )
            (triggerpool_to_createfor
               object
               (list {$this find_pools})
               (alias trigger_pool)
               (refresh create_content_for_pool)
               (help "select a trigger pool to create a content for")
            )
            (create_content_for_pool
               script
               (script
                  {set $poolName {[triggerpool_to_createfor] name}}
                  {search_replace $poolName "pool_" "" $poolName}
                  {search_replace $poolName ".trig" "_content.trig" $poolName}
                  {set $poolName {next_name $poolName}}
                  {set $newTrig {new EventTrigger}}
                  {$newTrig set_name $poolName {$this dir}}
                  {print "new name: " $poolName "
"}
                  {[triggerpool_to_createfor] insert (triggers 0) $newTrig}
                  {milo invalidate_listers_and_trees}
                  {milo update_objects}
                  {milo edit $newTrig}
               )
               (read_only {== [triggerpool_to_createfor] })
               (help
                  "create a trigger that represents a single piece of content and add it to the selected pool"
               )
            )
         )
         (help
            "utilities to create new pool objects and pieces of content for pools"
         )
      )
      (toggle_debug
         script
         (script {$this toggle_overlay})
         (help
            "toggles on/off the debug overlay that shows information like which pool is currently active"
         )
      )
   )
   (init {$this set_type band})
   (types
      (band
         (enter
            {if {exists events_parser}
               {events_parser add_sink $this}
            }
         )
         (section
            ($secName)
            {set [midi_section] $secName}
         )
      )
   )
)
(view_times
   (drum
      (easy 2.40)
      (medium 2.00)
      (hard 1.60)
      (expert 1.20)
   )
   (bass
      (easy 2.40)
      (medium 2.00)
      (hard 1.60)
      (expert 1.20)
   )
   (guitar
      (easy 2.40)
      (medium 2.00)
      (hard 1.60)
      (expert 1.20)
   )
   (real_guitar
      (easy 2.40)
      (medium 2.20)
      (hard 1.80)
      (expert 1.20)
   )
   (real_bass
      (easy 2.40)
      (medium 2.20)
      (hard 1.80)
      (expert 1.20)
   )
   (real_keys
      (easy 2.40)
      (medium 2.00)
      (hard 1.60)
      (expert 1.20)
   )
   (keys
      (easy 2.40)
      (medium 2.00)
      (hard 1.60)
      (expert 1.20)
   )
   (pending
      (easy 2.40)
      (medium 2.00)
      (hard 1.60)
      (expert 1.20)
   )
   (description
      "Specifies track speed via view times for various difficulties on various instruments."
   )
)