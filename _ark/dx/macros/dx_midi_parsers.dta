{new
   MidiParser
   check_trainer_pro_guitar
   (track_name 'PART REAL_GUITAR')
   (text
      ;{dx_log_writer info {sprint "func: check_trainer_pro_guitar"}}
      ;{dx_log_writer info
      ;   {sprintf "Executed check_trainer_pro_guitar - time: %.4fms"
      ;      {time
               {if
                  {has_any_substr
                        $mp.val
                        (pg_ _pg)}
                  {set $dx_trainer_real_guitar TRUE}
               }
      ;      }
      ;   }
      ;}
      ;{dx_log_writer info {sprint "guitar trainer checker - " $dx_trainer_real_guitar}}
   )
}
{new
   MidiParser
   check_trainer_pro_bass
   (track_name 'PART REAL_BASS')
   (text
      ;{dx_log_writer info {sprint "func: check_trainer_pro_bass"}}
      ;{dx_log_writer info
      ;   {sprintf "Executed check_trainer_pro_bass - time: %.4fms"
      ;      {time
               {if
                  {has_any_substr
                        $mp.val
                        (_pb pb_)}
                  {set $dx_trainer_real_bass TRUE}
               }
      ;      }
      ;   }
      ;}
      ;{dx_log_writer info {sprint "bass trainer checker - " $dx_trainer_real_bass}}
   )
}
{new
   MidiParser
   check_trainer_pro_keys
   (track_name 'PART REAL_KEYS_X')
   (text
      ;{dx_log_writer info {sprint "func: check_trainer_pro_keys"}}
      ;{dx_log_writer info
      ;   {sprintf "Executed check_trainer_pro_keys - time: %.4fms"
      ;      {time
               {if
                  {has_any_substr
                        $mp.val
                        (_pk pk_ _key key_)}
                  {set $dx_trainer_real_keys TRUE}
               }
      ;      }
      ;   }
      ;}
      ;{dx_log_writer info {sprint "keys trainer checker - " $dx_trainer_real_keys}}
   )
}
{new
   MidiParser
   check_trainer_pro_drums
   (track_name 'PART DRUMS')
   (text
      ;{dx_log_writer info {sprint "func: check_trainer_pro_drums"}}
      ;{dx_log_writer info
      ;   {sprintf "Executed check_trainer_pro_drums - time: %.4fms"
      ;      {time
               {if
                  {has_any_substr
                        $mp.val
                        (_drm drm_ challenge)}
                  {set $dx_trainer_real_drum TRUE}
               }
      ;      }
      ;   }
      ;}
      ;{dx_log_writer info {sprint "drum trainer checker - " $dx_trainer_real_drum}}
   )
}
{func dx_get_latest_phrase ()
   {elem $dx_lyric_display_phrases {- {size $dx_lyric_display_phrases} 1}}
}
{func dx_get_last_syllable ($phrase)
   {set $sylcount {size {elem $phrase 1}}}
   {if_else {> $sylcount 0}
      {elem {elem $phrase 1} {- $sylcount 1}}
      kDataUnhandled
   }
}
{func dx_get_last_syllable_idx ($phrase)
   {set $sylcount {size {elem $phrase 1}}}
   {if_else {> $sylcount 0}
      {- $sylcount 1}
      -1
   }
}
{func dx_get_max_phrase_time ($phrase)
   {max {if_else {dx_get_last_syllable $phrase}
      {elem {dx_get_last_syllable $phrase} 0}
      {elem $phrase 0}
   } {elem $phrase 2}}
}
{func dx_lyric_display_push_dummy_phrase ($time)
   {push_back $dx_lyric_display_phrases {array ($time () $time 0 "dummy phrase")}}
}
; $time refers to the start time of the next phrase
{func dx_lyric_display_push_phrase ($time $end)
   {set $syllist {elem $_current_lyric_phrase 1}}
   {set $lastsyl {dx_get_last_syllable $_current_lyric_phrase}}
   {set $nextlyrics {array ()}}
   {if $lastsyl ; MidiParser doesn't read lyric events and phrase events that are at the same time in the right order
      {if {>= {elem $lastsyl 0} $time}
         {push_back $nextlyrics $lastsyl}
         {remove_elem {elem $_current_lyric_phrase 1} $lastsyl}
         {set $lastsyl {dx_get_last_syllable $_current_lyric_phrase}}
      }
   }
   ; {dx_log_writer insane {sprint "last syllable: " $lastsyl}}
   {if $lastsyl ; Remove the space from the last syllable
      {set $syl_str {elem $lastsyl 1}}
      {search_replace $syl_str " " "" $syl_str}
      {set_elem $lastsyl 1 $syl_str}
   }
   {push_back $_current_lyric_phrase $_lyric_char_count}
   {push_back $dx_lyric_display_phrases $_current_lyric_phrase}
   {if {> {- $time {dx_get_max_phrase_time $_current_lyric_phrase}} 16}
      {dx_lyric_display_push_dummy_phrase {+ {dx_get_max_phrase_time $_current_lyric_phrase} 4}}
      {dx_lyric_display_push_dummy_phrase {- $time 4}}
   }
   {set $_current_lyric_phrase {array ($time $nextlyrics $end)}}
   {set $_lyric_char_count 0}
}
{new
   MidiParser
   lyric_display
   (track_name 'PART VOCALS')
   (enabled TRUE)
   (allowed_notes (105 106))
   (init
      ; {set $iwanttologstuff TRUE}
      ; {dx_log_writer insane {sprint "Lyric display parser initialized"}}
      {set $dx_lyric_display_phrases {array ()}}
      {set $_current_lyric_phrase {array (0 () 0)}}
      {set $_lyric_char_count 0}
      {set $last_phrase_time -1}
   )
   (midi
      {if {!= $last_phrase_time $mp.start} ; Filter out duplicate phrases because rb2 got quirky with note 106
         ; {dx_log_writer insane {sprint " - Lyric phrase at " $mp.start " - "}}
         {dx_lyric_display_push_phrase $mp.start $mp.end}
         {set $last_phrase_time $mp.start}
      }
   )
   (lyric
      {unless {== $mp.data "+"}
         {set $lyriclist {elem $_current_lyric_phrase 1}}
         ; {dx_log_writer insane {sprint "Syllables already in $lyriclist: " {size $lyriclist}}}
         ;{if {> {size $lyriclist} 0}
         ;   {dx_log_writer insane {sprint "Getting previous lyric"}}
         ;   {set $prevlyric {elem $lyriclist {- {size $lyriclist} 1}}}
         ;   {dx_log_writer insane {sprint "Prev lyric: " $prevlyric}}
         ;   {if_else {> {- $mp.start {elem $prevlyric 0}} 2} ; Split by 2 beat delays
         ;      {dx_lyric_display_push_phrase $mp.start}
         ;      {if {> {size $lyriclist} 10} ; Split if phrase contains more than 10 syllables TODO: use the length of text instead
         ;         {dx_lyric_display_push_phrase $mp.start}
         ;      }
         ;   }
         ;}
         {set $buf {sprint $mp.data}}
         ; {dx_log_writer insane {sprint "Lyric event at " $mp.start ": " $buf}}
         {set $talkie {|| {has_substr $buf "#"} {has_substr $buf "^"}}}
         {search_replace $buf "#" "" $buf}
         {search_replace $buf "^" "" $buf}
         {search_replace $buf "%" "" $buf}
         {search_replace $buf "*" "" $buf}
         {search_replace $buf "+" "" $buf}
         {search_replace $buf "_" " " $buf}
         {search_replace $buf "§" "=" $buf} ; Pentatonic outline doesn't have the undertie character :sadge:
         {set $buf {fix_special_chars $buf}}
         {if_else {|| {has_substr $buf "-"} {has_substr $buf "="}}
            {do
               {search_replace $buf "-" "" $buf}
               {search_replace $buf "=" "-" $buf}
               {set $word FALSE}
            }
            {do
               {set $buf {sprint $buf " "}}
               {set $word TRUE}
            }
         }
         {+= $_lyric_char_count {strlen $buf}}
         {set $slashsplit {has_substr $buf "/"}}
         {search_replace $buf "/" "" $buf}
         {if $talkie
            {set $buf {sprint "<it>" $buf "</it>"}}
         }
         {if {> $_lyric_char_count {if_else {&& $word {! $prev_word}} 120 130}} ; Make it more likely to split phrases on a word rather than a syllable
            {dx_lyric_display_push_phrase $mp.start $mp.start}
         }
         {push_back {elem $_current_lyric_phrase 1} {array ($mp.start $buf)}}
         {set $prev_word $word}
         {if $slashsplit
            {dx_lyric_display_push_phrase $mp.start $mp.start}
         }
      }
   )
   (term
      {set $phrasecount {size $dx_lyric_display_phrases}}
      {if {> $phrasecount 0}
         {set $lasttime {dx_get_max_phrase_time $_current_lyric_phrase}}
         {dx_lyric_display_push_phrase {+ $lasttime 1} {+ $lasttime 2}} 
         {dx_lyric_display_push_phrase {+ $lasttime 2} {+ $lasttime 2}}
      }
   )
}