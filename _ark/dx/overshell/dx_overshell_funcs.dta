{func leave_dx_settings
   {set $in_dx_settings FALSE}
   {set $dx_slider FALSE}
   {set $in_slider_state FALSE}
   {set $dx_list_item_selected FALSE}
   {dx_close_msg}
   {set $dx_msg_opened TRUE}
   {chars.sbd set_showing FALSE}
   {chars.sbd set scrollbar_list chars.lst}
   {handle ($this init)}
   {overshell update_all}
}
{func
   dx_close_msg
   ;closes message if open
   {if {|| {! {$this in_game}} {== {ui current_screen} coop_endgame_screen}}
      {if $dx_msg_opened
         {set $dx_msg_opened FALSE}
         {$this hide_message}
      }
      {set $dx_no_message_sound FALSE} ;re-allows message sound to play after closing
   }
   
}
{func dx_open_msg
   ($message)
   ;opens player message panel on current player
   {if {&& $message {! {$this in_game}}}
      {if {! $dx_msg_opened}
         {set $dx_msg_opened TRUE}
         {$this show_message}
      }
      {set $dx_no_message_sound TRUE} ;prevents message sound from playing in menus
      {$this setup_message_text $message FALSE}
   }
}
{func
   dx_check_for_dupe ; function to allow 5L/Pro instruments together but still block same parts from being selected
   ($slot) ; current slot number of the user
   ;{dx_log_writer info {sprint "func: dx_check_for_dupe" " - Args: " $slot}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_check_for_dupe - time: %.4fms"
         {time
            {do
               {set $selected_part ; grabs the currently selected part of the user
                  {switch $slot
                     (0 $default_slot0)
                     (1 $default_slot1)
                     (2 $default_slot2)
                     (3 $default_slot3)
                  }
               }
               {set $dupe_allowed TRUE} ; allows dupe TRUE by default, any check below will set it to FALSE
               {switch $selected_part
                  ((overshell_drums overshell_drums_pro)
                     {user_mgr foreach_user $user
                        {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                           {if {== {$user get_track_type} kTrackDrum} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
                        }
                     }
                  )
                  (overshell_guitar
                     {user_mgr foreach_user $user
                        {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                           {if {== {$user get_track_type} kTrackGuitar} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
                        }
                     }
                  )
                  (overshell_real_guitar
                     {user_mgr foreach_user $user
                        {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                           {if {== {$user get_track_type} kTrackRealGuitar} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
                        }
                     }
                  )
                  (overshell_bass
                     {user_mgr foreach_user $user
                        {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                           {if {== {$user get_track_type} kTrackBass} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
                        }
                     }
                  )
                  (overshell_real_bass
                     {user_mgr foreach_user $user
                        {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                           {if {== {$user get_track_type} kTrackRealBass} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
                        }
                     }
                  )
                  (overshell_keys
                     {user_mgr foreach_user $user
                        {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                           {if {== {$user get_track_type} kTrackKeys} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
                        }
                     }
                  )
                  (overshell_real_keys
                     {user_mgr foreach_user $user
                        {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                           {if {== {$user get_track_type} kTrackRealKeys} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
                        }
                     }
                  )
               }
               $dupe_allowed ; returns dupe TRUE/FALSE check back to slot_states
            }
         }
   ;   }
   ;}
   $dupe_allowed ; returns dupe TRUE/FALSE check back to slot_states
}
#ifdef DISABLED ;i tried refactoring and it broke vocal duping
{func
   dx_check_for_dupe ; function to allow 5L/Pro instruments together but still block same parts from being selected
   ($slot) ; current slot number of the user
   {do
      ($selected_part ; grabs the currently selected part of the user
         {switch $slot
            (0 $default_slot0)
            (1 $default_slot1)
            (2 $default_slot2)
            (3 $default_slot3)
         }
      )
      ($dupe_allowed TRUE) ; allows dupe TRUE by default, any check below will set it to FALSE
      {user_mgr foreach_user $user
         {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
            {if
               {==
                  {$user get_track_type}
                  {switch $selected_part
                     ((overshell_drums overshell_drums_pro) kTrackDrum)
                     (overshell_guitar kTrackGuitar)
                     (overshell_real_guitar kTrackRealGuitar)
                     (overshell_bass kTrackBass)
                     (overshell_real_bass kTrackRealBass)
                     (overshell_keys kTrackKeys)
                     (overshell_real_keys kTrackRealKeys)
                  }
               }
               {set $dupe_allowed FALSE} ; block dupe if another player already has this part
            }
            {if
               {==
                  {$user get_track_type}
                  {switch $selected_part
                     ((overshell_vocal_solo overshell_vocal_harmony) kTrackVocals)
                  }
               }
               {set $dupe_allowed TRUE} ; block dupe if another player already has this part
            }
         }
      }
      $dupe_allowed ; returns dupe TRUE/FALSE check back to slot_states
   }
}
#endif
{func
   dx_state_pos_tracker
   ($state $pos)
   {do
      ($pushed 0)
      ($arr {array 0})
      {if $pos
         {search_replace $pos "_on" "" $pos}
         {search_replace $pos "_off" "" $pos}
         {foreach $entry $dx_state_tracker
            {if {== {elem $entry 0} $state} ;first check if we have the state tracked already
               {set $pushed TRUE}
               {set_elem $entry 1 {eval $pos}} ;removed the previously tracked list position
            }
         }
         {if {! $pushed}
            {push_back $arr {eval $state}}
            {push_back $arr {eval $pos}}
            {push_back $dx_state_tracker $arr} ;push_back a new state into the array
         }
      }
   }
}
{func same_list_reveal
   ($list $data $size)
   ;fake animation between dx states that use the same list
   {do
      ($list_temp {array 0})
      {foreach_int $i 0 $size
         {push_back $list_temp os_blnk}
      }
      {$list set_data $list_temp}
      {$list refresh}
      {$list set conceal_scale 150}
      {$list conceal}
      {script_task kTaskUISeconds
         (delay 0.025)
         (script
            {$list reveal}
            {$list set conceal_scale 5}
            {$list set_data {array $data}}
            {$list refresh}
         )
      }
   }
}
{func dx_state
   ($state)
   {do
      ($this_list_content {array 0})
      ($dx_picked_view choose_char)
      ($prev_list {if_else $current_list $current_list chars.lst})
      ($last_tracked_state
         {if_else
            {||
               ;these are all of the "first states" for dx settings states
               {== $this_state dxState_BrutalWarn}
               {== $this_state dxState_TrackSpeeds}
               {== $this_state dxState_FakeJukeWarn}
               {== $this_state dxState_AutoPlayWarn}
               {== $this_state dxState_ModifierSongLoad}
               {== $this_state dxState_CHModeWarn}
               {== $this_state dxState_CalibrationWarn}
               {== $this_state dxState_PrecisionWarn}
               {== $this_state dxState_CalibrationInGame}
               {== $this_state dxState_BotSettings}
               {== $this_state dxState_SaveWarnError}
               {== $this_state dxState_SaveWarnErrorAV}
               {&& {== $this_state dxState_TextureMenu} $dx_customizer {$this in_game}}
               {&& {== $this_state dxState_AppearanceMenu} $dx_customizer {$this in_game}}
               {== $this_state dxState_DeluxeSettings}
            }
            fake
            $this_state
         }
      )
      ($last_tracked_num {if_else $current_list {$current_list get display_num} 1})
      ($prev_group $dx_picked_view)
      ($num 0)
      {if $this_state
         {dx_state_pos_tracker $this_state {$current_list selected_sym}}
      }
      {set $this_state $state}
      ;get list items from state array
      {foreach $entry {find $syscfg dx_settings $this_state view}
         ;view gets included so don't add it to the list
         {if {&& $entry {!= {sprint $entry} "view"}}
            ;generate this list array
            {push_back $this_list_content $entry}
         }
      }
      ;cap max num shown in list to 7
      {set $num {size $this_list_content}}
      {if {> $num 8} {set $num 8}}
      ;pick the view for this
      {set $dx_picked_view
         {switch $num
            (1 auto_sign_in_rock_central)
            (2 options_end_game)
            (3 options_extras)
            (4 gamercard_users)
            (5 options)
            (6 options_av_settings)
            (7 game_options)
            (8 choose_char)
            choose_char
         }
      }
      ;pick the list for this
      {set $current_list
         {switch $num
            (1 auto_sign_in_rock_central.lst)
            (2 options_end_game.lst)
            (3 options_extras.lst)
            (4 users.lst)
            (5 options.lst)
            (6 options_av_settings.lst)
            (7 game_options.lst)
            (8 chars.lst)
            chars.lst
         }
      }
      {$current_list set display_num $num}
      {$current_list set scroll_time 0}
      {if_else {== $current_list users.lst}
         {gamercard_users.lbl set_showing FALSE}
         {gamercard_users.lbl set_showing TRUE}
      }
      {if_else {&& {$this in_game} {!= {ui current_screen} coop_endgame_screen}}
         {$current_list set_type overshell_menu_ingame}
         {$current_list set_type overshell_menu}
      }

      ;this is so lazy, please rewrite bot settings to not use a slider
      {if {== $this_state dxState_BotSettings}
         {set $current_list options_audio.lst}
         {set $dx_picked_view options_audio}
      }
      ;circular breaks things
      ;{set $options_circular {>= {size $this_list_content} 12}}
      ;{$current_list set circular $options_circular}

      ;if we have setup a confirm dialog, we need to call it manually to see the nice description
      {if_else
         {&&
            {== {elem $this_list_content 0} overshell_continue}
            {== {elem $this_list_content 1} overshell_cancel}
         }
         {do
            {confirm_question.lbl set alpha 1}
            {set $dx_picked_view confirm_action}
            {set $current_list confirm_action.lst}
         }
         {confirm_question.lbl set alpha 0}
      }
      ;(enter) in overshell state needs a slight delay to not be overwritten by vanilla state setup
      {script_task kTaskUISeconds
         (delay 0.01)
         (script
            ;call the handle to shift to correct view for state
            {do
               ($trigger {sprint "view_" $dx_picked_view ".trg"})
               ($initial_focus $current_list)
               ($in_track_mode {&& {$this in_game} {!= {ui current_screen} coop_endgame_screen}})
               {if {!= $last_tracked_state $state}
                  ;#ifdef HX_WII {view_default_wii.trg trigger} #endif
                  ;{view_default.trg trigger}
                  {view_default.trg set_view_pos $this $in_track_mode}
                  {$prev_list conceal}
                  {if {!= $current_list options_audio.lst}
                     {options_audio.lst conceal}
                     {options_audio.grp set_showing FALSE}
                  }
                  {{sprint $prev_group ".grp"} set_showing FALSE}
                  {{sprint $dx_picked_view ".grp"} set_showing TRUE}
                  {$current_list reveal}
                  ;{$this conceal_all_lists {$trigger get hidden}}
                  ;{$trigger trigger}
                  {$trigger set_view_pos $this $in_track_mode}
                  {$this set_focus $initial_focus}
                  {if $in_track_mode
                     {track_mode.trg trigger}
                  }
               }
            }
            {if_else
               {&& ;HACK re-reveal the list if we are currently in it
                  {!= $last_tracked_state $this_state}
                  {== $num $last_tracked_num}
               }
               ;lmao
               {do
                  {same_list_reveal $current_list $this_list_content $num}
                  {script_task kTaskUISeconds
                     (delay 0.025)
                     (script
                        {fire_lasers $this_list_content $dx_picked_view $this_state}
                     )
                  }
               }
               ;generate the list (normal reveal)
               {if_else {> {size $this_list_content} 0}
                  {do
                     {$current_list set_data $this_list_content}
                     {fire_lasers $this_list_content $dx_picked_view $this_state}
                  }
                  {$current_list set_data (no list data found)}
               }
            }
         )
      }
   }
}
{func fire_lasers
   ($list $view $state)
   {do
      ($show {>= {size $list} 8})
      ;clean up and attach the scroll bar to this list (or not)
      {choose_char.grp set_showing $show}
      {choose_char.lst set_showing {! $show}}
      ;{modifiers.lbl set_showing {! $show}}
      {chars.sbd set_showing $show}
      {if_else $show
         {chars.sbd set scrollbar_list $current_list}
         {chars.sbd set scrollbar_list chars.lst}
      }
   }
   {if {! {find_exists $dx_state_tracker $state}}
      {$current_list set_selected 0}
   }
   {if {find_exists $dx_state_tracker $state}
      {do
         ($data 0)
         {foreach $entry $dx_state_tracker
            {if {== {elem $entry 0} $state}
               {set $data {elem $entry 1}}
            }
         }
         {foreach $entry $list
            {if {has_substr $entry $data}
               {$current_list set_selected $entry}
            }
         }
      }
   }
   ;close the message if going to a confirm screen, open otherwise
   {if_else {== $view confirm_action}
      {dx_close_msg}
      {dx_open_msg {sprint {$current_list selected_sym} "_desc"}}
   }
   {if {find_exists $syscfg dx_settings $state enter}
      {foreach $entry {find $syscfg dx_settings $state enter}
         {if {&& $entry {!= {sprint $entry} "enter"}}
            {eval $entry}
         }
      }
   }
   {if {find_exists $syscfg dx_settings $state message}
      {foreach $entry {find $syscfg dx_settings $state message}
         {if {&& $entry {!= {sprint $entry} "message"}}
            {if_else {== {sprint $entry} "none"}
               {dx_close_msg}
               {dx_open_msg {eval $entry}}
            }
         }
      }
   }
}
{func
   dx_auto_endurance_handler
   ; "{{$this get_user} set_track_type ...}" selects the part and will give the player a blank track if they don't have a part
   ; in Vocals case it'll default to Solo if no Harmony part exists
   {script_task kTaskSeconds
      (delay {if_else $dx_auto_endurance 0.2 0})
      (script
         {if {|| $dx_customizer $dx_auto_endurance}
            {switch
               {$this get_slot_num}
               (0 {{$this get_user} set_track_type kTrackGuitar})
               (1 
                  {do 
                     {$this select_drum_part TRUE}
                     {{$this get_user} set_track_type kTrackDrum}
                  }
               )
               (2 
                  {if_else {modifier_mgr is_modifier_active mod_auto_vocals}
                     {{$this get_user} set_track_type kTrackRealKeys}
                     {do
                        {$this select_vocal_part TRUE}
                        {{$this get_user} set_track_type kTrackVocals}  
                     }
                  }
               )
               (3 {{$this get_user} set_track_type kTrackBass})
               {fail {set $default_slot0 {$component selected_sym}}}
            }
            {$this show_state kState_ChooseDiff} ; force enter diff select even if song doesn't have a part
         }
      )
   }
}
{func
   dx_quick_chat
   ($message)
   {set $user_name " "} {set $track_icon "G"} ; set default values if user_name or track icon cannot be obtained
   {set $user_name {$user get_user_name}}
   {if {== {ui current_screen} game_screen} {set $track_icon {$user get_track_icon}}}
   {if_else {== {ui current_screen} game_screen}
      {do ;if in-game, use Road Challange's tracker display to show a chat message
         {{coop_track_panel find tracker_broadcast_display} set_showing TRUE}
         {{{coop_track_panel find tracker_broadcast_display} find band_message.lbl} set_showing TRUE}
         {{coop_track_panel find tracker_broadcast_display} set_challenge_type kTrackerChallengeType_Streak}
         {{coop_track_panel find tracker_broadcast_display} set_display_type kBroadcastTrackerDisplay_BandMessage}
         {{coop_track_panel find tracker_broadcast_display} show_brief_band_message {symbol {sprintf "%s <alt>%s</alt>: %s" $user_name $track_icon {localize $message}}}}
         {unless {session_mgr is_local}
            {session send_msg_to_all
               {'`' 
                  (
                     {do
                        {{coop_track_panel find tracker_broadcast_display} set_showing TRUE}
                        {{{coop_track_panel find tracker_broadcast_display} find band_message.lbl} set_showing TRUE}
                        {{coop_track_panel find tracker_broadcast_display} set_challenge_type kTrackerChallengeType_Streak}
                        {{coop_track_panel find tracker_broadcast_display} set_display_type kBroadcastTrackerDisplay_BandMessage}
                        {{coop_track_panel find tracker_broadcast_display} show_brief_band_message {symbol {sprintf "%s <alt>%s</alt>: %s" {',' $user_name} {',' $track_icon} {',' {localize $message}}}}}
                     }
                  )
                  kNetReliable
               }
            }
         }
      }
      {do ;if not in-game, use passive_messages_panel instead to show a chat message
         {passive_messages_panel queue_message {symbol {sprintf "%s: %s" $user_name {localize $message}}}}
         {unless {session_mgr is_local}
            {session send_msg_to_all
               {'`' 
                  (
                     {passive_messages_panel queue_message {symbol {sprintf "%s: %s" {',' $user_name} {',' {localize $message}}}}}
                  )
                  kNetReliable
               }
            }
         }
      }
   }
}   
{func
   dx_cycle_aspect
   {set $dx_aspectratio {+ $dx_aspectratio 1}}
   {if
      {== $dx_aspectratio 4}
      {set $dx_aspectratio 0}}
   {cheat_display
      show
      {sprint
         "aspect ratio set to "
         {elem
            (square regular widescreen letterbox)
            $dx_aspectratio}}}
   {do
      {rnd set_aspect $dx_aspectratio}
   }
}
{func dx_modify_tracklength ($item_id $mod)

   {set $clamp_min 0.25}
   {set $clamp_max 4.0}
   {dx_log_writer insane {sprint "os modify track len " $item_id " " $mod " " $clamp_min " " $clamp_max}}
   {switch $item_id
      (0
         {dx_modify_tracklength 1 $mod}
         {set $tracklength_bass        $tracklength_guitar}
         {set $tracklength_drum        $tracklength_guitar}
         {set $tracklength_keys        $tracklength_guitar}
         {set $tracklength_real_keys   $tracklength_guitar}
         {set $tracklength_real_guitar $tracklength_guitar}
         {set $tracklength_real_bass   $tracklength_guitar}
      )
      (1
         {+= $tracklength_guitar $mod}
         {set $tracklength_guitar {clamp $tracklength_guitar $clamp_min $clamp_max}}
      )
      (2
         {+= $tracklength_bass $mod}
         {set $tracklength_bass {clamp $tracklength_bass $clamp_min $clamp_max}}
      )
      (3
         {+= $tracklength_drum $mod}
         {set $tracklength_drum {clamp $tracklength_drum $clamp_min $clamp_max}}
      )
      (4
         {+= $tracklength_keys $mod}
         {set $tracklength_keys {clamp $tracklength_keys $clamp_min $clamp_max}}
      )
      (5
         {+= $tracklength_real_guitar $mod}
         {set $tracklength_real_guitar {clamp $tracklength_real_guitar $clamp_min $clamp_max}}
      )
      (6
         {+= $tracklength_real_bass $mod}
         {set $tracklength_real_bass {clamp $tracklength_real_bass $clamp_min $clamp_max}}
      )
      (7
         {+= $tracklength_real_keys $mod}
         {set $tracklength_real_keys {clamp $tracklength_real_keys $clamp_min $clamp_max}}
      )
   }
   {set $dx_list_pos $item_id}
   {if {session is_in_game}
      {dx_track_update_lengths}
   }
}
{func enable_modifier
   ($modifier)
   {unless {modifier_mgr is_modifier_active $modifier}
      {modifier_mgr toggle_modifier_enabled $modifier}
   }
}
{func disable_modifier
   ($modifier)
   {if {modifier_mgr is_modifier_active $modifier}
      {modifier_mgr toggle_modifier_enabled $modifier}
   }
}