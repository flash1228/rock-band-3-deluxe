#ifdef RB3DX_DEV
#define MOVE_IT
(
   {$this iterate Mesh $m {$m set_showing FALSE}}
   {if {$this in_game}
      {unless $dx_moved_once
         #ifdef RB3E
         {set $list_move_down_number 0}
         #else
         {set $list_move_down_number 250}
         #endif
         {if_else
            {&&
               {user_mgr get_user_from_slot 2} ;check if user on slot 2 exists
               {== {{user_mgr get_user_from_slot 2} get_track_type} kTrackVocals}
            }
            {$this iterate UIList $l
               {$l set_local_pos_index 2 {- {$l get_local_pos_index 2} $list_move_down_number}} ;move vocal type menu straight down
            }
            {$this iterate UIList $l
               {$l set_local_pos_index 0 {+ {$l get_local_pos_index 0} 200}} ;move 5l type menu up and to the right
               {$l set_local_pos_index 2 {+ {$l get_local_pos_index 2} 250}}
            }
         }
         {set $dx_moved_once TRUE}
      }
   }
)
#define MOVE_IT_BACK
(
   {$this iterate Mesh $m {$m set_showing TRUE}}
   {if $dx_moved_once
      {set $dx_moved_once FALSE}
      {if_else
         {&&
            {user_mgr get_user_from_slot 2} ;check if user on slot 2 exists
            {== {{user_mgr get_user_from_slot 2} get_track_type} kTrackVocals}
         }
         {$this iterate UIList $l
            {$l set_local_pos_index 2 {+ {$l get_local_pos_index 2} $list_move_down_number}}
         }
         {$this iterate UIList $l
            {$l set_local_pos_index 0 {- {$l get_local_pos_index 0} 200}}
            {$l set_local_pos_index 2 {- {$l get_local_pos_index 2} 250}}
         }
      }
   }
)
   (dxState_MiloPanels
      (view os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk)
      (message none)
      (enter
         {do
            ($options {array 0})
            {ui foreach_screen $screen
               {$screen foreach_panel $panel
                  {if
                     {&&
                        {$panel loaded_dir}
                        {! {find_elem $options {$panel loaded_dir}}}
                     }
                     {push_back $options {sprint $panel}}
                  }
               }
            }
            {$current_list set_data $options}
            {chars.sbd set scrollbar_list $current_list}
            {chars.sbd set_showing {! {$this in_game}}}
            {$current_list set_type overshell_menu}
            {set $categorizemetrail ()}
            {resize $categorizemetrail 0}
            {set $findmetrail ()}
            {resize $findmetrail 0}
            MOVE_IT
            {set $dx_milo_objects
               (
                  #include ../reference/_pre-prc/dx_milo_objects.dta
               )
            }
            {$current_list set_data $options}
         }
      )
      (select
         (_fallthrough
            {set $findme {{sprint {$current_list selected_sym}} loaded_dir}}
            {push_back $findmetrail {eval $findme}}
            {dx_state dxState_MiloObjects}
         )
      )
      (cancel
         {do
            {dx_state dxState_Debug}
            MOVE_IT_BACK
         }
      )
   )

   (dxState_MiloObjects
      (view os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk)
      (message
         {do
            ($prop {$current_list selected_sym})
            ($message {sprint "Help not found"})
            {if {find_exists $dx_milo_objects $prop description}
               {set $message {sprint {elem {find $dx_milo_objects $prop description} 1}}}
            }
            {sprint $message}
         }
      )
      (enter
         {do
            ($options {array 0})
            {if {> {size $findmetrail} 1}
               {set $findme
                  {elem $findmetrail {- {size $findmetrail} 1}}
               }
            }
            {$findme iterate Object $p
               {if {! {find_elem $options {sprintf "%s" {$p class_name}}}}
                  {push_back $options {sprintf "%s" {$p class_name}}}
               }
            }
            {if_else {== {size $options} 0}
               {set $options ('couldnt' 'find' 'object' 'classes')}
               {sort $options}
            }
            {$current_list set_data $options}
            {chars.sbd set scrollbar_list $current_list}
            {chars.sbd set_showing {! {$this in_game}}}
            {$current_list set_type overshell_menu}
            MOVE_IT
         }
      )
      (select
         (_fallthrough
            {set $categorizeme {$current_list selected_sym}}
            {push_back $categorizemetrail {eval $categorizeme}}
            {dx_state dxState_MiloFind}
         )
      )
      (cancel
         {do
            {if {> {size $findmetrail} 0}
               {resize $findmetrail {- {size $findmetrail} 1}}
            }
            {if_else {>= {size $categorizemetrail} 1}
               {dx_state dxState_MiloFind}
               {dx_state dxState_MiloPanels}
            }
            MOVE_IT_BACK
         }
      )
   )

   (dxState_MiloFind
      (view os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk)
      (message none)
      (enter
         {do
            ($options {array 0})
            {if {>= {size $findmetrail} 1}
               {set $findme
                  {elem $findmetrail {- {size $findmetrail} 1}}
               }
            }
               {set $categorizeme
                  {elem $categorizemetrail {- {size $categorizemetrail} 1}}
               }
            {$findme iterate Object $p
               {if {== {$p class_name} $categorizeme}
                  {push_back $options {sprintf "%s" {$p name}}}
               }
            }
            {if_else {== {size $options} 0}
               {set $options ('couldnt' 'find' 'objects' 'of' 'type')}
               {sort $options}
            }
            {$current_list set_data $options}
            {chars.sbd set scrollbar_list $current_list}
            {chars.sbd set_showing {! {$this in_game}}}
            {$current_list set_type overshell_menu}
            MOVE_IT
         }
      )
      (select
         (_fallthrough
            {if
               {&&
                  {!= $categorizeme EventTrigger}
                  {!= $categorizeme UITrigger}
                  {!= $categorizeme Sfx}
               }
               {set $findme {$findme find {$current_list selected_sym}}}
            }
            {switch $categorizeme
               ;((BandLabel UILabel AppLabel Cam) {dx_state dxState_PositionRemapper})
               (Sfx {{$findme find {$current_list selected_sym}} play})
               ({has_substr $categorizeme Trigger} {{$findme find {$current_list selected_sym}} trigger})
               (({has_substr $categorizeme Dir} Character BandCharacter Wardrobe BandWardrobe Scoreboard BandScoreboard StarDisplay BandStarDisplay)
                  {push_back $findmetrail {eval $findme}}
                  {dx_state dxState_MiloObjects}
               )
               {push_back $findmetrail {eval $findme}}
               {dx_state dxState_MiloRnd}
            }
            ;{switch $categorizeme
            ;  (AnimFilter kDataUnhandled)
            ;  (Cam {dx_state dxState_PositionRemapper})
            ;  (Environ kDataUnhandled)
            ;  (EventTrigger {{$findme find {$current_list selected_sym}} trigger})
            ;  (UITrigger {{$findme find {$current_list selected_sym}} trigger})
            ;  (FXSendEQ kDataUnhandled)
            ;  (Group {push_back $findmetrail {eval $findme}} {dx_state dxState_MiloRnd})
            ;  (Mat {push_back $findmetrail {eval $findme}} {dx_state dxState_MiloRnd})
            ;  (BandCharacter
            ;     {push_back $findmetrail {eval $findme}}
            ;     {dx_state dxState_MiloObjects})
            ;  ;(AmbientOcclusion {dx_state dxState_MiloAO})
            ;  (Character
            ;     {push_back $findmetrail {eval $findme}}
            ;     {dx_state dxState_MiloObjects})
            ;  (BandWardrobe
            ;     {push_back $findmetrail {eval $findme}}
            ;     {dx_state dxState_MiloObjects})
            ;  (BandScoreboard
            ;     {push_back $findmetrail {eval $findme}}
            ;     {dx_state dxState_MiloObjects})
            ;  (BandStarDisplay
            ;     {push_back $findmetrail {eval $findme}}
            ;     {dx_state dxState_MiloObjects})
            ;  (Wind {dx_state dxState_MiloWind})
            ;  (BandCamShot kDataUnhandled)
            ;  (PostProc kDataUnhandled)
            ;  (MatAnim kDataUnhandled)
            ;  (Mesh {push_back $findmetrail {eval $findme}} {dx_state dxState_MiloRnd})
            ;  (ParticleSys kDataUnhandled)
            ;  (PropAnim kDataUnhandled)
            ;  (RandomGroupSeq kDataUnhandled)
            ;  (Sfx {{$findme find {$current_list selected_sym}} play})
            ;  (SynthFader kDataUnhandled)
            ;  (SynthSample kDataUnhandled)
            ;  (Tex {push_back $findmetrail {eval $findme}} {dx_state dxState_MiloRnd})
            ;  (Text {{$findme find {$current_list selected_sym}} set font default})
            ;  (TrackWidget kDataUnhandled)
            ;  (Trans kDataUnhandled)
            ;  (TransAnim kDataUnhandled)
            ;  (UIColor kDataUnhandled)
            ;  (UIGuide kDataUnhandled)
            ;  (WaitSeq kDataUnhandled)
            ;  kDataUnhandled
            ;}
         )
      )
      (cancel
         {if {> {size $categorizemetrail} 0}
            {resize $categorizemetrail {- {size $categorizemetrail} 1}}
         }
         {if_else {>= {size $findmetrail} 1}
            {dx_state dxState_MiloObjects}
            {dx_state dxState_MiloPanels}
         }
         MOVE_IT_BACK
      )
   )

   (dxState_MiloRnd
      (view os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk)
      (enter
         {do
            ($findsuper {find_exists $dx_milo_objects $categorizeme superclasses})
            ($superclasses {if_else $findsuper {find $dx_milo_objects $categorizeme superclasses} {array 0}})
            ($sizesuperclasses {if_else $findsuper {size {find $dx_milo_objects $categorizeme superclasses}} 0})
            ($found {find_exists $dx_milo_objects $categorizeme editor})
            ($size {if_else $found {size {find $dx_milo_objects $categorizeme editor}} 0})
            ($data {array 0})
            ($arr {array 0})
            {if_else {&& $found {> $size 1}}
               {foreach $elem {find $dx_milo_objects $categorizeme editor}
                  {push_back $arr $elem}
               }
               {push_back $arr "error"}
            }
            {if_else {&& $findsuper {> $sizesuperclasses 1}}
               {foreach $elem $superclasses
                  {if {!= {sprint $elem} "superclasses"}
                     {if {find_exists $dx_milo_objects $elem editor}
                        {do
                           ($newfound {find_exists $dx_milo_objects $elem editor})
                           ($newclass {if_else $newfound {find $dx_milo_objects $elem} {array 0}})
                           ($newsize {if_else $newfound {size {find $newclass editor}} 0})
                           {if_else {&& $newfound {> $newsize 1}}
                              {foreach $elem2 {find $newclass editor}
                                 {push_back $arr $elem2}
                              }
                              {push_back $arr "error"}
                           }
                        }
                     }
                  }
               }
               {push_back $arr "error super"}
            }
            {foreach $entry $arr
               {if {!= {sprint $entry} editor}
                  {if_else {== {type $entry} kDataArray}
                     {if {!= {sprint {elem $entry 1}} "script"}
                        ;todo, handle deeper indents
                        {if {!= {type {elem $entry 1}} kDataArray}
                           {push_back $data {elem $entry 0}}
                        }
                     }
                     {push_back $data $entry}
                  }
               }
            }
            {$current_list set_data $data}
            {$current_list set_type overshell_menu}
            {chars.sbd set_showing {! {$this in_game}}}
            MOVE_IT
         }
      )
      (message
         {do
            ($prop {$current_list selected_sym})
            ($found {find_exists $dx_milo_objects $categorizeme editor})
            ($foundprop {if_else $found {find_exists $dx_milo_objects $categorizeme editor $prop} 0})
            ($type {if_else $foundprop {sprint {elem {find $dx_milo_objects $categorizeme editor $prop} 1}} "unknown type"})
            ($cur 
               {if $foundprop
                  {if_else
                     {&&
                        {!= $type "string"}
                        {!= $prop "edit_text"}
                        {!= $type "struct"}
                        {!= $type "unknown type"}
                     }
                     {if_else {== $type "object"}
                        {sprint {$findme get $prop}}
                        {$findme get $prop}
                     }
                     "unknown"
                  }
               }
            )
            ($findsuper {find_exists $dx_milo_objects $categorizeme superclasses})
            ($superclasses {if_else $findsuper {find $dx_milo_objects $categorizeme superclasses} {array 0}})
            ($message "Help not found")
            {if {&& {! $foundprop} $findsuper}
               {foreach $super $superclasses
                  {if {!= {sprint $super} "superclasses"}
                     {if {find_exists $dx_milo_objects $super editor $prop}
                        {do
                           {set $foundprop TRUE}
                           {set $type {sprint {elem {find $dx_milo_objects $super editor $prop} 1}}}
                           {set $cur
                              {if_else
                                 {&&
                                    {!= $type "string"}
                                    {!= $type "struct"}
                                    {!= $prop "edit_text"}
                                    {!= $type "unknown type"}
                                 }
                                 {if_else {== $type "object"}
                                    {sprint {$findme get $prop}}
                                    {$findme get $prop}
                                 }
                                 "unknown"
                              }
                           }
                        }
                     }
                  }
               }
            }
            {if_else {find_exists $dx_milo_objects $categorizeme editor $prop help}
               {set $message {sprint {elem {find $dx_milo_objects $categorizeme editor $prop help} 1}}}
               {foreach $super $superclasses
                  {if {find_exists $dx_milo_objects $super editor $prop help}
                     {set $message {sprint {elem {find $dx_milo_objects $super editor $prop help} 1}}}
                  }
               }
            }
            {sprint $message "\n" {sprint $type " - " $cur}}
         }
      )
      (select
         (_fallthrough
            {do
               ($prop {$current_list selected_sym})
               ;find on this class
               ($foundprop {find_exists $dx_milo_objects $categorizeme editor $prop})
               ;prep supers
               ($findsuper {find_exists $dx_milo_objects $categorizeme superclasses})
               ($superclasses {if_else $findsuper {find $dx_milo_objects $categorizeme superclasses} {array 0}})
               ;pick metadata class
               ($meta_class $categorizeme)
               ($meta_found FALSE)
               {if {&& {! $foundprop} $findsuper}
                  {foreach $super $superclasses
                     {if {find_exists $dx_milo_objects $super editor $prop}
                        {set $meta_class $super}
                     }
                  }
               }
               ;now do the real toggle/increment
               {set $meta_found {find_exists $dx_milo_objects $meta_class editor $prop}}
               {if $meta_found
                  {switch {elem {find $dx_milo_objects $meta_class editor $prop} 1}
                     (bool {$findme set $prop {! {$findme get $prop}}})
                     (float
                        {do
                           ($cur {$findme get $prop})
                           ($type {if_else {find_exists $dx_milo_objects $meta_class editor $prop range} range inf})
                           ($ran_lo {if_else {== $type range} {elem {find $dx_milo_objects $meta_class editor $prop range} 1} 0})
                           ($ran_hi {if_else {== $type range} {elem {find $dx_milo_objects $meta_class editor $prop range} 2} 100})
                           ($interval {/ $ran_hi 8})
                           {if_else {> {+ $cur $interval} $ran_hi}
                              {$findme set $prop $ran_lo}
                              {$findme set $prop {+ $cur $interval}}
                           }
                        }
                     )
                     (int
                        {do
                           ($cur {$findme get $prop})
                           ($type int)
                           {if {find_exists $dx_milo_objects $meta_class editor $prop range}
                              {set $type range}
                           }
                           {if {find_exists $dx_milo_objects $meta_class editor $prop list}
                              {set $type list}
                           }
                           {switch $type
                              (range
                                 {do
                                    ($ran_lo {elem {find $dx_milo_objects $meta_class editor $prop range} 1})
                                    ($ran_hi {elem {find $dx_milo_objects $meta_class editor $prop range} 2})
                                    ($interval {int {/ $ran_hi 8}})
                                    {if_else {> {+ $cur $interval} $ran_hi}
                                       {$findme set $prop $ran_lo}
                                       {$findme set $prop {+ $cur $interval}}
                                    }
                                 }
                              )
                              (list
                                 {do
                                    ($list {array 0})
                                    ($list_help {array 0})
                                    ($prop_node {find $dx_milo_objects $meta_class editor $prop})
                                    ($cur FALSE)
                                    ($vals FALSE)
                                    {foreach $entry $prop_node
                                       {if {== {type $entry} kDataArray}
                                          {if {== {sprint {elem $entry 0}} "list"}
                                             {set $vals {elem $entry 1}}
                                             {if {== {type $vals} kDataArray}
                                                {foreach $item $vals
                                                   {if_else {== {type $item} kDataArray}
                                                      {do
                                                         {push_back $list {elem $item 0}}
                                                         {push_back $list_help {elem $item 1}}
                                                      }
                                                      {push_back $list {sprint $item}}
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    {set $cur {$findme get $prop}}
                                    {if_else {>= {+ $cur 1} {size $list}}
                                       {$findme set $prop 0}
                                       {$findme set $prop {+ $cur 1}}
                                    }
                                    {if {> {size $list_help} 0}
                                       {dx_passive_messenger_symbol {sprint {elem $list_help {$findme get $prop}}}}
                                    }
                                 }
                              )
                           }
                        }
                     )
                  }
               }
               {if {! $meta_found}
                  {dx_passive_messenger_symbol {sprint "os_milo failed to find selected property"}}
               }
            }
         )
      )
      (cancel
         {if {> {size $findmetrail} 1}
            {resize $findmetrail {- {size $findmetrail} 1}}
         }
         {dx_state dxState_MiloFind}
         MOVE_IT_BACK
      )
   )
#endif
#ifdef DISABLED
#define DX_SET_RBG_COLOR_DATA
(
   {$current_list set_data
      (
         ;if we are inside our special menu item, we want to blank out the other lines so it looks nice
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 0}} os_blnk {sprintf "Red: %.2f" $mycoolcolor_r}}
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 1}} os_blnk {sprintf "Green: %.2f" $mycoolcolor_g}}
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 2}} os_blnk {sprintf "Blue: %.2f" $mycoolcolor_b}}
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 3}} os_blnk {sprintf "Alpha: %.2f" $mycoolalpha}}
      )
   }
)
(dxState_MiloRGBColor
   (view
      options_audio
   )
   (enter
      
      {unpack_color {$findme get color} $mycoolcolor_r $mycoolcolor_g $mycoolcolor_b}
      {$findme set color {pack_color $mycoolcolor_r $mycoolcolor_g $mycoolcolor_b}}
      {set $mycoolalpha {$findme get alpha}}
      ;setup/reset the list tracking info
      {set $dx_list_item_selected FALSE}
      {set $dx_list_pos 0}
      {set $current_list options_audio.lst}
      {if_else {$this in_game}
         {$current_list set_type overshell_menu_ingame}
         {$current_list set_type overshell_menu}
      }
      {$current_list restart_highlight_matanim}
      {$current_list refresh}
      DX_SET_RBG_COLOR_DATA
   )
   ;(SCROLL_MSG
   ;  DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   ;)
   ;these two options are selectable and act normal with a destination trail
   ;(SELECT_MSG
   ;  {switch {$current_list selected_sym}
   ;     (os_track_speeds
   ;        {dx_state dxState_TrackSpeeds})
   ;     (os_acceleration_mode
   ;        {dx_state dxState_AccelerationMode})
   ;  }
   ;)
   ;this is handling the dynamic "slider" replacement
   (BUTTON_DOWN_MSG
      {if_else
         $dx_list_item_selected
         ;we selected an object so now only track up/down
         {switch
            $action
            ;if we confirm or back out of the internal selection shell, go back up to the normal level and refresh the list
            ((kAction_Confirm kAction_Cancel)
               {set $dx_list_item_selected FALSE}
               DX_SET_RBG_COLOR_DATA
            )
            ;if we pressed Up or Down while inside a selected list item
            ((kAction_Down kAction_Up)
               {switch {$current_list selected_data}
                  (0
                     {if
                        ;set minimum and maximum for up and down presses for this variable
                        {switch $action
                           (kAction_Down {> $mycoolcolor_r 0.01}) ;minimum
                           (kAction_Up {< $mycoolcolor_r 0.99}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $mycoolcolor_r
                           {switch $action
                              (kAction_Down {- $mycoolcolor_r 0.02})
                              (kAction_Up {+ $mycoolcolor_r 0.02})
                           }
                        }
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 0}
                     {$findme set color {pack_color $mycoolcolor_r $mycoolcolor_g $mycoolcolor_b}}
                  )
                  (1
                     {if
                        ;set minimum and maximum for up and down presses for this variable
                        {switch $action
                           (kAction_Down {> $mycoolcolor_g 0.01}) ;minimum
                           (kAction_Up {< $mycoolcolor_g 0.99}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $mycoolcolor_g
                           {switch $action
                              (kAction_Down {- $mycoolcolor_g 0.02})
                              (kAction_Up {+ $mycoolcolor_g 0.02})
                           }
                        }
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 1}
                     {$findme set color {pack_color $mycoolcolor_r $mycoolcolor_g $mycoolcolor_b}}
                  )
                  (2
                     {if
                        ;set minimum and maximum for up and down presses for this variable
                        {switch $action
                           (kAction_Down {> $mycoolcolor_b 0.01}) ;minimum
                           (kAction_Up {< $mycoolcolor_b 0.99}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $mycoolcolor_b
                           {switch $action
                              (kAction_Down {- $mycoolcolor_b 0.02})
                              (kAction_Up {+ $mycoolcolor_b 0.02})
                           }
                        }
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 2}
                     {$findme set color {pack_color $mycoolcolor_r $mycoolcolor_g $mycoolcolor_b}}
                  )
                  (3
                     {if
                        ;set minimum and maximum for up and down presses for this variable
                        {switch $action
                           (kAction_Down {> $mycoolalpha 0.01}) ;minimum
                           (kAction_Up {< $mycoolalpha 0.99}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $mycoolalpha
                           {switch $action
                              (kAction_Down {- $mycoolalpha 0.02})
                              (kAction_Up {+ $mycoolalpha 0.02})
                           }
                        }
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 3}
                     {$findme set alpha $mycoolalpha}
                  )
                  kDataUnhandled
               }
               ;refresh the list
               DX_SET_RBG_COLOR_DATA
            )
            kDataUnhandled
         }
         ;we havent specifically selected anything, we are only hovering on a list item
         {switch
            $action
            ;check if we are selecting on the special item that drills down a level
            (kAction_Confirm
               {switch {$current_list selected_data}
                  ((0 1 2 3)
                     ;refresh the list but this time tell the game we are a level deeper to hide other options
                     {set $dx_list_item_selected TRUE}
                     {set $dx_list_pos {$current_list selected_data}}
                     DX_SET_RBG_COLOR_DATA
                  )
                  kDataUnhandled
               }
            )
            ;if we pressed left or right while hovering on a specific list item
            ((kAction_Left kAction_Right)
               {switch {$current_list selected_data}
                  (0
                     {if
                        ;set minimum and maximum for left and right presses for this variable
                        {switch $action
                           (kAction_Left {> $mycoolcolor_r 0.01}) ;minimum
                           (kAction_Right {< $mycoolcolor_r 0.99}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $mycoolcolor_r
                           {switch $action
                              (kAction_Left {- $mycoolcolor_r 0.02})
                              (kAction_Right {+ $mycoolcolor_r 0.02})
                           }
                        }
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 0}
                     {$findme set color {pack_color $mycoolcolor_r $mycoolcolor_g $mycoolcolor_b}}
                  )
                  (1
                     {if
                        ;set minimum and maximum for left and right presses for this variable
                        {switch $action
                           (kAction_Left {> $mycoolcolor_g 0.01}) ;minimum
                           (kAction_Right {< $mycoolcolor_g 0.99}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $mycoolcolor_g
                           {switch $action
                              (kAction_Left {- $mycoolcolor_g 0.02})
                              (kAction_Right {+ $mycoolcolor_g 0.02})
                           }
                        }
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 1}
                     {$findme set color {pack_color $mycoolcolor_r $mycoolcolor_g $mycoolcolor_b}}
                  )
                  (2
                     {if
                        ;set minimum and maximum for left and right presses for this variable
                        {switch $action
                           (kAction_Left {> $mycoolcolor_b 0.01}) ;minimum
                           (kAction_Right {< $mycoolcolor_b 0.99}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $mycoolcolor_b
                           {switch $action
                              (kAction_Left {- $mycoolcolor_b 0.02})
                              (kAction_Right {+ $mycoolcolor_b 0.02})
                           }
                        }
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 2}
                     {$findme set color {pack_color $mycoolcolor_r $mycoolcolor_g $mycoolcolor_b}}
                  )
                  (3
                     {if
                        ;set minimum and maximum for left and right presses for this variable
                        {switch $action
                           (kAction_Left {> $mycoolalpha 0.01}) ;minimum
                           (kAction_Right {< $mycoolalpha 0.99}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $mycoolalpha
                           {switch $action
                              (kAction_Left {- $mycoolalpha 0.02})
                              (kAction_Right {+ $mycoolalpha 0.02})
                           }
                        }
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 3}
                     {$findme set alpha $mycoolalpha}
                  )
                  kDataUnhandled
               }
               ;refresh the list
               DX_SET_RBG_COLOR_DATA
            )
            kDataUnhandled
         }
      }
   )
   (on_cancel
      {dx_state dxState_MiloMat}
   )
)
#endif