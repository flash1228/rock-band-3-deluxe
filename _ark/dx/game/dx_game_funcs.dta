; random change
#define DX_CALLBACK_HANDLES
((hit miss pass first_note check_fc check_missed track_instrument num_gems_hit num_gems_combo num_gems_miss num_gems_pass))
{func
   dx_add_player_sinks
   ;{dx_log_writer info {sprint "func: dx_add_player_sinks"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_add_player_sinks - time: %.4fms"
         {time
            {dx_active_player_var_reset}
            {beatmatch foreach_active_player $player ;dx - add our custom fc checking callbacks to the currently loaded player
               {unless {== {$player instrument} vocals}
                  {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}
               }
               {$player add_sink fc_callback (hit miss pass num_gems_hit num_gems_combo num_gems_miss num_gems_pass)}
               {dx_create_instrument_callback {$player instrument} $player {{$player get_user} get_slot_num}}
               {switch {$player instrument}
                  (bass
                     {set $bassplayeractive true}
                     {set $dx_num_active_strings {+ $dx_num_active_strings 1}}
                     {$player add_sink fc_bass_callback DX_CALLBACK_HANDLES}
                  )
                  (real_guitar
                     {set $real_guitarplayeractive true}
                     {set $dx_num_active_strings {+ $dx_num_active_strings 1}}
                     {$player add_sink fc_real_guitar_callback DX_CALLBACK_HANDLES}
                  )
                  (real_bass
                     {set $real_bassplayeractive true}
                     {set $dx_num_active_strings {+ $dx_num_active_strings 1}}
                     {$player add_sink fc_real_bass_callback DX_CALLBACK_HANDLES}
                  )
                  (keys
                     {set $keysplayeractive true}
                     {$player add_sink fc_keys_callback DX_CALLBACK_HANDLES}
                  )
                  (real_keys
                     {set $real_keysplayeractive true}
                     {$player add_sink fc_real_keys_callback DX_CALLBACK_HANDLES}
                  )
                  (guitar
                     {set $guitarplayeractive true}
                     {set $dx_num_active_strings {+ $dx_num_active_strings 1}}
                     {$player add_sink fc_guitar_callback DX_CALLBACK_HANDLES}
                  )
                  (drum
                     {set $drumplayeractive true}
                     {$player add_sink fc_drum_callback DX_CALLBACK_HANDLES}
                  )
                  (real_drum
                     {set $drumplayeractive true}
                     {$player add_sink fc_real_drum_callback DX_CALLBACK_HANDLES}
                  )
                  (vocals
                     {if {modifier_mgr is_modifier_active mod_auto_vocals}
                        {set $vocal_track_out TRUE}
                     }
                     {if {! {modifier_mgr is_modifier_active mod_auto_vocals}}
                        {set $vocalsplayeractive true}
                        {set $dx_active_vocals TRUE}
                        {set $vocal_track_out TRUE}
                     }
                  )
               }
               {$player add_sink dx_streak_callback (hit miss pass fetch_all_streaks update_streak)}
            }
         }
   ;   }
   ;}
}
{func
   dx_send_leader_song_speed
   ;{dx_log_writer info {sprint "func: dx_send_leader_song_speed"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_send_leader_song_speed - time: %.4fms"
         {time
            {if {is_leader_local} ; dx - sync speeds only if currently the lobby leader
               {if {< $leaderspeed 1.001}
                  ; clamp leader speed to 1.0 if the user intended to do that
                  ; works around floating point weirdness
                  {set $leaderspeed 1.0}
               }
               {dx_log_writer beatmatch {sprint "Sending Leader Speed to peers, Leaderspeed: " $leaderspeed ""}}
               DX_DISCONNECT
               {set $speedmod $leaderspeed}
               ;{set $speedmod_top $leaderspeed}
               {unless {session_mgr is_local}
                  {session send_msg_to_all {'`' (set $speedmod  {',' $leaderspeed}) kNetReliable}}
               }
            }
         }
   ;   }
   ;}
}
{func
   dx_trainer_checker
   ;{dx_log_writer info {sprint "func: dx_trainer_checker"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_trainer_checker - time: %.4fms"
         {time
            {if {gamemode in_mode trainer}
               {beatmatch foreach_active_player $player
                  {switch {{$player get_user} get_slot_num}
                     ((0 1 2 3)
                        {switch {$player instrument}
                           (real_bass
                              {if {== $dx_trainer_real_bass FALSE}
                                 {set $dx_skip_game_setup TRUE}
                                 {dx_passive_messenger_symbol "No Trainer for Pro-Bass found in song."}
                                 {if {exists meta_performer} {meta_performer skip_song}}
                                 {overshell set_active_status kOvershellInShell}
                                 {overshell update_all}
                                 {meta_loading_continue_screen set state kMetaLoading_Loading}
                                 {ui goto_screen meta_loading_continue_screen}
                              }
                           )
                           (real_keys
                              {if {== $dx_trainer_real_keys FALSE}
                                 {set $dx_skip_game_setup TRUE}
                                 {dx_passive_messenger_symbol "No Trainer for Pro-Keys found in song."}
                                 {if {exists meta_performer} {meta_performer skip_song}}
                                 {overshell set_active_status kOvershellInShell}
                                 {overshell update_all}
                                 {meta_loading_continue_screen set state kMetaLoading_Loading}
                                 {ui goto_screen meta_loading_continue_screen}
                              }
                           )
                           (real_guitar
                              {if {== $dx_trainer_real_guitar FALSE}
                                 {set $dx_skip_game_setup TRUE}
                                 {dx_passive_messenger_symbol "No Trainer for Pro-Guitar found in song."}
                                 {if {exists meta_performer} {meta_performer skip_song}}
                                 {overshell set_active_status kOvershellInShell}
                                 {overshell update_all}
                                 {meta_loading_continue_screen set state kMetaLoading_Loading}
                                 {ui goto_screen meta_loading_continue_screen}
                              }
                           )
                           (real_drum
                              {if {== $dx_trainer_real_drum FALSE}
                                 {set $dx_skip_game_setup TRUE}
                                 {dx_passive_messenger_symbol "No Trainer for Pro-Drums found in song."}
                                 {if {exists meta_performer} {meta_performer skip_song}}
                                 {overshell set_active_status kOvershellInShell}
                                 {overshell update_all}
                                 {meta_loading_continue_screen set state kMetaLoading_Loading}
                                 {ui goto_screen meta_loading_continue_screen}
                              }
                           )
                           (fail kDataUnhandled)
                        }
                     )
                  }
               }
            }
         }
   ;   }
   ;}
}
{func
   dx_venue_setter
   ;{dx_log_writer info {sprint "func: dx_venue_setter"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_venue_setter - time: %.4fms"
         {time
            {if {session_mgr is_leader_local}
               {if_else $dx_customizer
                  {do
                     {gamecfg set_venue none}
                     {meta_performer set_venue none}
                  }
                  {if_else {== $force TRUE}
                     {switch $dx_venue
                        (small_venues {do {gamecfg set_venue {random_elem (SMALL_VENUES)}} {meta_performer set_venue {random_elem (SMALL_VENUES)}}})
                        (big_venues {do {gamecfg set_venue {random_elem (BIG_VENUES)}} {meta_performer set_venue {random_elem (BIG_VENUES)}}})
                        (arena_venues {do {gamecfg set_venue {random_elem (ARENA_VENUES)}} {meta_performer set_venue {random_elem (ARENA_VENUES)}}})
                        (festival_venues {do {gamecfg set_venue {random_elem (FESTIVAL_VENUES)}} {meta_performer set_venue {random_elem (FESTIVAL_VENUES)}}})
                        (venues_video {do {gamecfg set_venue {random_elem (VENUES_VIDEO)}} {meta_performer set_venue {random_elem (VENUES_VIDEO)}}})
                        (random
                           {if_else $dx_enable_mv_venues
                               {do
                                  {meta_performer select_random_venue}
                               }
                               {do
                                  {gamecfg set_venue {random_elem (VENUES)}}
                                  {meta_performer set_venue {random_elem (VENUES)}}
                               }
                           }
                        )
                        (none
                           {if_else {&& {! {session_mgr is_local}} {is_leader_local}}
                              {do
                                 {gamecfg set_venue {random_elem (VENUES)}}
                                 {meta_performer set_venue {random_elem (VENUES)}}
                              }
                              {if {&& {session_mgr is_local} {is_leader_local}}
                                 {gamecfg set_venue none}
                                 {meta_performer set_venue none}
                              }
                           }
                        )
                        {do {gamecfg set_venue $dx_venue} {meta_performer set_venue $dx_venue}}
                     }
                     {if_else $dx_enable_mv_venues
                        {do
                           {meta_performer select_random_venue}
                        }
                        {do
                           {gamecfg set_venue {random_elem (VENUES)}}
                           {meta_performer set_venue {random_elem (VENUES)}}
                        }
                     }
                  }
               }
               ;{dx_log_writer default {sprint "Venue set to " $dx_venue " - Forced: " $force}}
            }
         }
   ;   }
   ;}
}
{func
   dx_toggle_fail_feedback
   {do
      {if
         {exists beatmatch}
         {if
            {&&
               {! {gamemode in_mode practice}} {! {gamemode in_mode trainer}}
            }
            {foreach_int $i 0 {beatmatch num_active_players} 
               {
                  {beatmatch active_player $i} set_crowd_rating_active
                     {||
                        {modifier_mgr is_modifier_active mod_brutalmode} ; force on crowd meter if on brutal mode
                        {== $dx_crowd_meter_state dx_on}
                        {== $dx_crowd_meter_state dx_off}
                     }
               }
            }
         {{coop_track_panel find crowd_meter} set_showing {== $dx_crowd_meter_state dx_on}}
         }
      }
   }
}

{func dx_init_gold_flash ()
   {new Object gold_star_handler
      (show_stars
         {set_this {{coop_track_panel find scoreboard} find star_display}}
         {gold_star_flash.grp set showing TRUE}
      )
      (hide_stars
         {set_this {{coop_track_panel find scoreboard} find star_display}}
         {gold_star_flash.grp set showing FALSE}
      )
      (set_star_progress ($progress)
         {set_this {{coop_track_panel find scoreboard} find star_display}}
         {set $actual_scale {* $dx_star_mesh_scale $progress}}
         {set $unfilled {- 1.0 $progress}}
         {set $height {* 1.859 $dx_star_mesh_scale}}
         {$this iterate RndDir $dir {do
            {if {!= {$dir name} "star_indicator"}
               {{$dir find gold_star_flash.mesh} set_local_scale_index 2 $actual_scale}
               {{$dir find gold_star_flash.mesh} set_local_pos_index 2 {* $height {* $unfilled -1}}}
               {{$dir find gold_star_flash_border.mesh} set_local_pos_index 2 {* {* {- 0.5 $unfilled} $height} 2}}
            }
         }}
         {if {> $progress 0}
            {gold_star_flash.mat set (tex_xfm y_scale) $progress}
            {gold_star_flash.mat set (tex_xfm y) {/ {- 0.5 {* $progress 0.5}} $progress}}
         }
      )
      (start_anim
         {set_this {{coop_track_panel find scoreboard} find star_display}}
         {gold_star_flash.anim animate (loop 0 1) (period 2) (units kTaskBeats)}
      )
      (stop_anim
         {set_this {{coop_track_panel find scoreboard} find star_display}}
         {gold_star_flash.anim stop_animation}
      )
   }
   {set_this {{coop_track_panel find scoreboard} find star_display}}
   {new Group gold_star_flash.grp}
   {stars.grp add_object gold_star_flash.grp}
   {new Mat gold_star_flash.mat}
   {gold_star_flash.mat set diffuse_tex dx_star_gold_flash.tex}
   {gold_star_flash.mat set blend kBlendSrcAlpha}
   {gold_star_flash.mat set tex_gen kTexGenXfm}
   {gold_star_flash.mat set stencil_mode kStencilWrite}
   {gold_star_flash.mat set z_mode kZModeTransparent}
   {gold_star_flash.mat set alpha_cut TRUE}
   {gold_star_flash.mat set alpha_threshold 15}
   {new Mat gold_star_flash_border.mat}
   {gold_star_flash_border.mat set diffuse_tex plain.tex}
   {gold_star_flash_border.mat set stencil_mode kStencilTest}
   {gold_star_flash_border.mat set color {pack_color 0.98 0.95 0.51}}
   {gold_star_flash_border.mat set alpha 0.75}
   {gold_star_flash_border.mat set z_mode kZModeTransparent}
   {gold_star_flash_border.mat set blend kBlendSrcAlpha}
   {$this iterate RndDir $dir {do
      {if {!= {$dir name} "star_indicator"}
         {dx_create_gold_flash $dir {$this find gold_star_flash.mat} {$this find gold_star_flash.grp} {$this find gold_star_flash_border.mat}}
      }
   }}
   {new PropAnim gold_star_flash.anim}

   {gold_star_flash.anim add_keys gold_star_flash.mat (alpha) kPropFloat}
   {gold_star_flash.anim set_key_val gold_star_flash.mat (alpha) 0 1}
   {gold_star_flash.anim set_key_val gold_star_flash.mat (alpha) 1 0}
   ;{gold_star_flash.anim set_interp_type gold_star_flash.mat (alpha) kPropEaseIn}

   {gold_star_flash.anim add_keys gold_star_flash_border.mat (alpha) kPropFloat}
   {gold_star_flash.anim set_key_val gold_star_flash_border.mat (alpha) 0 0.75}
   {gold_star_flash.anim set_key_val gold_star_flash_border.mat (alpha) 1 0}
   ;{gold_star_flash.anim set_interp_type gold_star_flash_border.mat (alpha) kPropEaseIn}

   {set $dx_gold_flash_spawned TRUE}
}

{func dx_create_gold_flash ($stardir $starmat $stargrp $bordermat)
   {set_this $stardir}
   {set $iwanttologstuff TRUE}
   {dx_log_writer insane {sprint "Creating gold flash mesh in " {$stardir name}}}
   {new Mesh gold_star_flash.mesh}
   {gold_star_flash.mesh copy star_frame_gold.mesh kCopyShallow}
   {gold_star_flash.mesh set mat $starmat}
   {gold_star_flash.mesh set showing TRUE}
   {$stargrp add_object gold_star_flash.mesh}
   {set $dx_star_mesh_scale {gold_star_flash.mesh get_local_scale_index 0}}
   {new Mesh gold_star_flash_border.mesh}
   {dx_generate_quad_mesh gold_star_flash_border.mesh {* 1.859 $dx_star_mesh_scale} 0.17}
   {gold_star_flash_border.mesh set mat $bordermat}
   {gold_star_flash_border.mesh set showing TRUE}
   {gold_star_flash_border.mesh set_trans_parent star.grp}
   {gold_star_flash_border.mesh set_local_scale 2 2 2}
   {$stargrp add_object gold_star_flash_border.mesh}
}

{func
   dx_update_gold_flash
   {set_this coop_track_panel}
   {if {&& {! {modifier_mgr is_modifier_active mod_nohud}} $dx_gold_star_progress $dx_mtvup {! {gamemode in_mode practice}} {! {gamemode in_mode trainer}} {! {gamemode in_mode tour}} {! {gamemode in_mode campaign}}}
      {set $dx_num_stars {{{coop_track_panel find scoreboard} find star_display} get num_stars}}
      {if_else {&& {>= $dx_num_stars 5.0} {! {>= $dx_num_stars 6.0}}} ; We don't need the stars to flash when you achieve golds
         {do
            {if {! $dx_gold_flash_on}
               {if {! $dx_gold_flash_spawned}
                  {dx_init_gold_flash}
               }
               {set $dx_gold_flash_on TRUE}
               {gold_star_handler show_stars}
               {gold_star_handler start_anim}
            }
            {gold_star_handler set_star_progress {- $dx_num_stars 5.0}}
         }
         {do
            {if $dx_gold_flash_on
               {set $dx_gold_flash_on FALSE}
               {gold_star_handler hide_stars}
               {gold_star_handler stop_anim}
            }
         }
      }
   }
}


{func
   dx_blink_gold_star_off
   {if {&& $dx_mtvup {! {gamemode in_mode practice}} {! {gamemode in_mode trainer}} {! {gamemode in_mode tour}} {! {gamemode in_mode campaign}} {>= $dx_num_stars 5.0}}
      {set $star_transition_ran FALSE}
      {{coop_track_panel find dx_star_base.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find dx_star_base.tex}}}
      {{coop_track_panel find score_star_frame.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find dx_star_base.tex}}}
      {{coop_track_panel find {sprint "dx_star_gold_" $star_num_frame ".tex"}} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find dx_star_base.tex}}}
      {if {> $star_num_frame 0}
         {{coop_track_panel find {sprint "dx_star_gold_" {- $star_num_frame 1} ".tex"}} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find dx_star_base.tex}}}
         {{coop_track_panel find {sprint "dx_star_gold_" {+ $star_num_frame 1} ".tex"}} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find dx_star_base.tex}}}
      }
   }
}
